name: Fox Flight v 1.9.8
slots:
  core:
    class: CoreUnit
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  shield:
    class: ShieldGeneratorUnit
  atmofueltank:
    class: AtmoFuelContainer
  spacefueltank:
    class: SpaceFuelContainer
  rocketfueltank:
    class: RocketFuelContainer
  hover:
    class: Hovercraft
  booster:
    class: VerticalBooster
  radar:
    class: RadarPVPUnit
    select: manual
  armoEngine:
    class: atmosphericEngine
    select: manual
  spaceEngine:
    class: spaceEngine
    select: manual
  databank:
    class: DataBank
    select: manual
handlers:
  library:
    onStart:
      lua: |
        version = "FOX Flight v 1.9.8"

        -- SETTINGS

        saveFlight = false --export: Keep flight track between flights
        trackInterval = 10 --export: Seconds between each track point

        hudColour = "9DBDC6" --export: Main HUD Colour 
        hudSecColour = "C45A38" --export: Warning HUD Colour 
        hudTerColour = "3DED97" --export: Highlight HUD Colour
        
        -- GLOBALS

        totalMass = 0
        fuelBurnPerSecL = 0
        totalSpaceFuelCapacity = 0
        totalSpaceFuelRemaining = 0
        maxDeltaV = 0
        DeltaV = 0
        speedUnit = ""
        shield_status = ""
        lastGoodSurfaceReading = 0
        sinceLastGood = 0
        underWater = false
        rocketsEngaged = false
        firingRockets = false
        rocketMatch = false
        rocketEngines = false
        bestRocketSpeed = 0
        firstRocketCommand = nil
        autoLevelLowSpeed = true
        
        surfaceDistance=0
        Landing=false
    
        roidTrack = 0
        nextRoidPos = nil
    
        rayangle = 0
        raypitch = 0
    
        travelMode = false
        travelPoint = nil
        svgTravelMsg = [[]]
        svgTravelSubMsg = [[]]
    
        fixPoint = nil
        fixRange = 2
    
        sedata = {
            ["SpaceEngineXtraLargeMilitary3"] = {
                FuelRate = 2.94912E-07,
                MaxPower = 27993600
            },
            ["SpaceEngineSmallFreight3"] = {
                FuelRate = 2.2530864197530864197530864197531E-7,
                MaxPower = 90000
            },
            ["SpaceEngineSmallFreight4"] = {
                FuelRate = 1.6975308641975308641975308641975E-7,
                MaxPower = 90000
            },
            ["SpaceEngineSmallManeuver3"] = {
                FuelRate = 2.56E-07,
                MaxPower = 90000
            },
            ["SpaceEngineSmallManeuver4"] = {
                FuelRate = 2.0480000000000003E-07,
                MaxPower = 90000
            },
            ["SpaceEngineSmallMilitary3"] = {
                FuelRate = 5.76E-07,
                MaxPower = 129600
            },
            ["SpaceEngineSmallMilitary4"] = {
                FuelRate = 6.911999999999998E-07,
                MaxPower = 155519.99999999997
            },
            ["SpaceEngineSmallSafe3"] = {
                FuelRate = 3.2407407407407407407407407407407E-7,
                MaxPower = 57600.000000000015
            },
            ["SpaceEngineXtraLargeFreight3"] = {
                FuelRate = 1.1519775948788294467306812985825E-7,
                MaxPower = 19440000
            },
            ["SpaceEngineXtraLargeFreight4"] = {
                FuelRate = 8.6405464106081390032007315957933E-8,
                MaxPower = 19440000
            },
            ["SpaceEngineXtraLargeManeuver3"] = {
                FuelRate = 1.3107200000000002E-07,
                MaxPower = 19440000
            },
            ["SpaceEngineXtraLargeManeuver4"] = {
                FuelRate = 1.0485760000000003E-07,
                MaxPower = 19440000
            },
            ["SpaceEngineXtraLargeMilitary4"] = {
                FuelRate = 3.538944E-07,
                MaxPower = 33592319.99999999
            },
            ["SpaceEngineSmallSafe4"] = {
                FuelRate = 2.9012345679012345679012345679012E-7,
                MaxPower = 46080.000000000015
            },
            ["SpaceEngineMediumSafe4"] = {
                FuelRate = 2.3353909465020576131687242798354E-7,
                MaxPower = 276480.00000000006
            },
            ["SpaceEngineLargeFreight3"] = {
                FuelRate = 1.4403292181069958847736625514403E-7,
                MaxPower = 3240000
            },
            ["SpaceEngineLargeFreight4"] = {
                FuelRate = 1.0802469135802469135802469135802E-7,
                MaxPower = 3240000
            },
            ["SpaceEngineLargeManeuver3"] = {
                FuelRate = 1.6384000000000004E-07,
                MaxPower = 3240000
            },
            ["SpaceEngineLargeManeuver4"] = {
                FuelRate = 1.3107200000000005E-07,
                MaxPower = 3240000
            },
            ["SpaceEngineLargeMilitary3"] = {
                FuelRate = 3.6864E-07,
                MaxPower = 4665600
            },
            ["SpaceEngineLargeMilitary4"] = {
                FuelRate = 4.4236799999999995E-07,
                MaxPower = 5598719.999999999
            },
            ["SpaceEngineMediumSafe3"] = {
                FuelRate = 2.5925925925925925925925925925926E-7,
                MaxPower = 345600.00000000006
            },
            ["SpaceEngineLargeSafe3"] = {
                FuelRate = 2.0739026063100137174211248285322E-7,
                MaxPower = 2073600.0000000005
            },
            ["SpaceEngineMediumFreight3"] = {
                FuelRate = 1.8004115226337448559670781893004E-7,
                MaxPower = 540000
            },
            ["SpaceEngineMediumFreight4"] = {
                FuelRate = 1.3477366255144032921810699588477E-7,
                MaxPower = 540000
            },
            ["SpaceEngineMediumManeuver3"] = {
                FuelRate = 2.0480000000000003E-07,
                MaxPower = 540000
            },
            ["SpaceEngineMediumManeuver4"] = {
                FuelRate = 1.6384000000000004E-07,
                MaxPower = 540000
            },
            ["SpaceEngineMediumMilitary3"] = {
                FuelRate = 4.608E-07,
                MaxPower = 777600
            },
            ["SpaceEngineMediumMilitary4"] = {
                FuelRate = 5.529599999999999E-07,
                MaxPower = 933119.9999999999
            },
            ["SpaceEngineLargeSafe4"] = {
                FuelRate = 1.8664266117969821673525377229081E-7,
                MaxPower = 1658880.0000000005
            },
            ["SpaceEngineXtraLargeSafe3"] = {
                FuelRate = 1.658950617283950617283950617284E-7,
                MaxPower = 12441600.000000002
            },
            ["SpaceEngineXtraLargeSafe4"] = {
                FuelRate = 1.4930555555555555555555555555556E-7,
                MaxPower = 9953280.000000002
            },
            ["SpaceEngineXtraSmallFreight3"] = {
                FuelRate = 2.7777777777777777777777777777778E-7,
                MaxPower = 15000
            },
            ["SpaceEngineXtraSmallFreight4"] = {
                FuelRate = 2.037037037037037037037037037037E-7,
                MaxPower = 15000
            },
            ["SpaceEngineXtraSmallManeuver3"] = {
                FuelRate = 3.2000000000000006E-07,
                MaxPower = 15000
            },
            ["SpaceEngineXtraSmallManeuver4"] = {
                FuelRate = 2.5600000000000007E-07,
                MaxPower = 15000
            },
            ["SpaceEngineXtraSmallMilitary3"] = {
                FuelRate = 7.2E-07,
                MaxPower = 21600
            },
            ["SpaceEngineXtraSmallMilitary4"] = {
                FuelRate = 8.639999999999998E-07,
                MaxPower = 25919.999999999996
            },
            ["SpaceEngineXtraSmallSafe3"] = {
                FuelRate = 4.0740740740740740740740740740741E-7,
                MaxPower = 9600.000000000002
            },
            ["SpaceEngineXtraSmallSafe4"] = {
                FuelRate = 3.7037037037037037037037037037037E-7,
                MaxPower = 7680.000000000002
            },
            ["SpaceEngineLargeFreight"] = {
                FuelRate = 1.9195816186556927297668038408779E-7,
                MaxPower = 3240000
            },
            ["SpaceEngineLargeManeuver"] = {
                FuelRate = 2.0480000000000003E-07,
                MaxPower = 3240000
            },
            ["SpaceEngineLargeMilitary"] = {
                FuelRate = 3.072E-07,
                MaxPower = 3888000
            },
            ["SpaceEngineLargeSafe"] = {
                FuelRate = 2.3036694101508916323731138545953E-7,
                MaxPower = 2592000
            },
            ["SpaceEngineMediumFreight"] = {
                FuelRate = 2.4022633744855967078189300411523E-7,
                MaxPower = 540000
            },
            ["SpaceEngineMediumManeuver"] = {
                FuelRate = 2.56E-07,
                MaxPower = 540000
            },
            ["SpaceEngineMediumMilitary"] = {
                FuelRate = 3.84E-07,
                MaxPower = 648000
            },
            ["SpaceEngineMediumSafe"] = {
                FuelRate = 2.8806584362139917695473251028807E-7,
                MaxPower = 432000
            },
            ["SpaceEngineSmallFreight"] = {
                FuelRate = 2.9938271604938271604938271604938E-7,
                MaxPower = 90000
            },
            ["SpaceEngineSmallMilitary"] = {
                FuelRate = 4.8E-07,
                MaxPower = 108000
            },
            ["SpaceEngineSmallSafe"] = {
                FuelRate = 3.6111111111111111111111111111111E-7,
                MaxPower = 72000
            },
            ["SpaceEngineXtraLargeFreight"] = {
                FuelRate = 1.5360653863740283493369913123E-7,
                MaxPower = 19440000
            },
            ["SpaceEngineXtraLargeManeuver"] = {
                FuelRate = 1.6384000000000002E-07,
                MaxPower = 19440000
            },
            ["SpaceEngineXtraLargeMilitary"] = {
                FuelRate = 2.4576E-07,
                MaxPower = 23328000
            },
            ["SpaceEngineXtraLargeSafe"] = {
                FuelRate = 1.8429926840420667581161408321902E-7,
                MaxPower = 15552000
            },
            ["SpaceEngineXtraSmallFreight"] = {
                FuelRate = 3.7037037037037037037037037037037E-7,
                MaxPower = 15000
            },
            ["SpaceEngineXtraSmallManeuver"] = {
                FuelRate = 4E-07,
                MaxPower = 15000
            },
            ["SpaceEngineXtraSmallMilitary"] = {
                FuelRate = 6E-07,
                MaxPower = 18000
            },
            ["SpaceEngineXtraSmallSafe"] = {
                FuelRate = 4.4444444444444444444444444444444E-7,
                MaxPower = 12000
            },
            ["SpaceEngineSmallManeuver"] = {
                FuelRate = 3.2E-07,
                MaxPower = 90000
            },
            ["SpaceEngineLarge"] = {
                FuelRate = 2.56E-07,
                MaxPower = 3240000
            },
            ["SpaceEngineMedium"] = {
                FuelRate = 3.2E-07,
                MaxPower = 540000
            },
            ["SpaceEngineSmall"] = {
                FuelRate = 4E-07,
                MaxPower = 90000
            },
            ["SpaceEngineXtraLarge"] = {
                FuelRate = 2.048E-07,
                MaxPower = 19440000
            },
            ["SpaceEngineXtraSmall"] = {
                FuelRate = 5E-07,
                MaxPower = 15000
            }
        }
        
        worldZ = vec3(0,0,1)
        worldX = vec3(1,0,0)
        worldY = vec3(0,1,0)
        worldCardinals = {}
        worldCardinals[#worldCardinals+1] = worldZ
        worldCardinals[#worldCardinals+1] = worldX
        worldCardinals[#worldCardinals+1] = vec3(-1,0,0)
        worldCardinals[#worldCardinals+1] = worldY
        worldCardinals[#worldCardinals+1] = vec3(0,-1,0)
        worldCardinals[#worldCardinals+1] = (worldCardinals[3] + worldCardinals[5]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[2] + worldCardinals[5]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[2] + worldCardinals[4]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[3] + worldCardinals[4]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[3] + worldCardinals[6]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[6] + worldCardinals[5]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[7] + worldCardinals[5]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[2] + worldCardinals[7]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[8] + worldCardinals[2]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[8] + worldCardinals[4]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[4] + worldCardinals[9]):normalize()
        worldCardinals[#worldCardinals+1] = (worldCardinals[3] + worldCardinals[9]):normalize()
        for i = 2,17 do
            worldCardinals[#worldCardinals+1] = (worldCardinals[1] + worldCardinals[i]):normalize()
        end
        for i = 18,33 do
            worldCardinals[#worldCardinals+1] = (worldCardinals[1] + worldCardinals[i]):normalize()
        end
        for i = 2,17 do
            worldCardinals[#worldCardinals+1] = (worldCardinals[i] + worldCardinals[i+16]):normalize()
        end
        worldCardinals[#worldCardinals+1] = vec3(0,0,-1)
        for i = 2,17 do
            worldCardinals[#worldCardinals+1] = (worldCardinals[66] + worldCardinals[i]):normalize()
        end
        for i = 67,82 do
            worldCardinals[#worldCardinals+1] = (worldCardinals[66] + worldCardinals[i]):normalize()
        end
        for i = 2,17 do
            worldCardinals[#worldCardinals+1] = (worldCardinals[i] + worldCardinals[i+65]):normalize()
        end
        
        pitchInput = 0
        rollInput = 0
        yawInput = 0
        brakeInput = 0
        showHoverMessage = 0
        showMismatchMsg = 0
        hoverChange = 0.2
        brake_distance = 0
    
        showTalentMessage = 0
        pilotTalentSet = false
        calibrated = false
    
        autoHover = 1 
        hoverHeight = 0
        laltState = false
        shiftedState = false
        tickcounter = 1
        maxBrakeForce = 0
        perisPanelID = nil
        radarPanelID = nil
        waypoint_pos = nil
    
        toggleSpaceCompass = false
        spaceCompass = false
    
        rawaaltitude = 0
    
        lastFuelWarning = system.getUtcTime()
        playedLowFuelWarn = false
    
        playedShield75 = false
        playedShield50 = false
        playedShield25 = false
        lastShieldWarning = system.getUtcTime()
    
        dampen = true
    
        turntoBearing = nil
        turntoPitch = nil
    
        atlas = require("atlas")
        bodies=atlas[0]
        aegis = {
            id = 9999,
            name = { "Aegis", "Aegis", "Aegis" },
            type = { "Station", "Station", "Station" },
            biosphere = { "None", "None", "None" },
            classification = { "None", "None", "None" },
            habitability = { "Very High", "Très élevée", "Sehr hoch" },
            description = {
              [[Space Station]],
              [[Space Station]],
              [[Space Station]]
            },
            iconPath = "",
            hasAtmosphere = true,
            isSanctuary = false,
            isInSafeZone = false,
            systemId = 0,
            positionInSystem = 9,
            satellites = nil,
            center = { 13856701.7693,7386301.6554,-258251.0307 },
            gravity = 0,
            radius = 10000.00,
            atmosphereThickness = 0,
            atmosphereRadius = 0,
            GM = 0,
            surfaceArea = 0,
            surfaceAverageAltitude = 0,
            surfaceMaxAltitude = 0,
            surfaceMinAltitude = 0,
            ores = { },
            territories = 0
          }
        bodies[9999] = aegis
        
        brakeKey = false
        boostEngaged = true
        spaceThrust = 0

        hide_throttle = true
        ovd_throttle = true
        
        svgPipeName=''
        svgPipeDist=''
        svgPipeDist_unit=''
        svgPVPTitle=''
    
        dps = {}
        incoming = 0
        maxdps = 50000
        gunner = false
    
        autoMode = false
        gyroMode = 0
    
        body = nil
        closestpipe = 200000000
        pipe = ''
        pipepos = nil
        pipevec = nil
        pipevis = false
        
        AtmoFuelTankHandling = 0 
        SpaceFuelTankHandling = 0
        RocketFuelTankHandling = 0 
        FuelTankOptimization = 0 
        ContainerOptimization = 0
        SpaceEngineFuelEfficiency = 0 

        warnFlashColour = hudColour
        warnFlashCount = 15
    
        mouseStepScale = 10

        hud_alt = 0
        hud_alt_col = hudSecColour
        
        speedUnit = "KMH"
        
        showHints = true 
        
        brakeState = false
        brakeLocked = false
    
        svgPip = [[]]
        svgDmg = [[]]
        svgSettings = [[]]
        svgDmgRep = [[]]
        svgPer = [[]]
        damageMode=false
        settingMode=false
        showAtlasMarks=false
        showMarkRange=400
        showPipeMark=1
        showSafeZoneMark=true
    
        svgVector = [[None]]                
        svgGravity = [[Off]]                
        svgBrakes = [[Released]]
    
        svgAltitude = [[0 m]]
        svgMass = [[0 tons]]
        svgBrakeTime = 0
        svgBrakeDistance = 0
        svgSpeed = [[0 kmh]]
        svgThrottle = [[0 %]]
        svgCCS = [[100% HP]]

        svgFuelTimer=[[]]
    
        svgFuel = [[]]
        svgSpaceTanks = [[]]
        svgAtmoTanks = [[]]
        svgRocketTanks = [[]]
    
        maxKinematicSpaceFwdCruise = 0
        maxKinematicSpaceFwdCombat = 0
        maxKinematicSpaceFwd = 0
        combatEngines = false
        combatTht = -1
        goButton = false
    
        atmoFuelWeight = 4 
        spaceFuelWeight = 6 
        rocketFuelWeight = 0.8 
        
        usedAtmoFuel = 0
        usedSpaceFuel = 0
        usedRocketFuel = 0
        timeRemaining = 1000
        lowestTankID = 0
    
        alignmentTarget = nil
        alignmentName = nil
    
        szcenter = vec3({13771471,7435803,-128971})
        safeRadius = 18000000
        szradius = 500000
        szborder = nil
    
        pilotTalents = {}
        marks = {}
        track = {}
        tracking = false
    
        controls = {}
        controls[#controls+1] = {bind = system.getActionKeyName("option1"):upper(), func = "TOGGLE AUTO LEVEL", atmospace = "atmo", shift = false, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("option1"):upper(), func = "ENABLE SHIELDS", atmospace = "space", shift = false, shieldreq = true}
        controls[#controls+1] = {bind = system.getActionKeyName("option1"):upper(), func = "DISABLE SHIELDS", atmospace = "both", shift = true, shieldreq = true}
        controls[#controls+1] = {bind = system.getActionKeyName("option2"):upper(), func = "BALANCE RESISTS TO STRESS", atmospace = "both", shift = false, shieldreq = true}
        controls[#controls+1] = {bind = system.getActionKeyName("option3"):upper(), func = "CYCLE VECTOR LOCK", atmospace = "both", shift = false, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("option4"):upper(), func = "SHOW/HIDE ALLIES IN CONTACTS (GUNNER ONLY)", atmospace = "both", shift = false, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("option5"):upper(), func = "TOGGLE STATUS REPORT (REMOTE FREE MOVE)", atmospace = "both", shift = false, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("option6"):upper(), func = "CLEAR RADAR 'SELECTED' WIDGET (GUNNER ONLY)", atmospace = "space", shift = false, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("option6"):upper(), func = "CLEAR CURRENT TRACE (GUNNER ONLY)", atmospace = "space", shift = true, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("light"):upper(), func = "MARK TRACE POINT FOR SELECTED CONTACT (GUNNER ONLY)", atmospace = "space", shift = false, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("light"):upper(), func = "EXPORT TRACE (GUNNER ONLY)", atmospace = "space", shift = true, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("option7"):upper(), func = "SHOW/HIDE FLIGHT TRACK", atmospace = "both", shift = false, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("option8"):upper(), func = "HUD CONFIGURATION MODE", atmospace = "both", shift = false, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("option9"):upper(), func = "STOP SHIELD VENTING", atmospace = "both", shift = false, shieldreq = true}
        controls[#controls+1] = {bind = system.getActionKeyName("option9"):upper(), func = "TOGGLE SHIELD VENTING", atmospace = "both", shift = true, shieldreq = true}
        if system.getActionKeyName("option11"):len()>0 then controls[#controls+1] = {bind = system.getActionKeyName("option11"):upper(), func = "LOCK BRAKES", atmospace = "both", shift = false, shieldreq = false} end
        controls[#controls+1] = {bind = system.getActionKeyName("brake"):upper(), func = "LOCK BRAKES", atmospace = "both", shift = true, shieldreq = false}
        controls[#controls+1] = {bind = system.getActionKeyName("brake"):upper(), func = "BRAKE (UNLOCK BRAKES)", atmospace = "both", shift = false, shieldreq = false}
        if system.getActionKeyName("option10"):len()>0 then controls[#controls+1] = {bind = system.getActionKeyName("option10"):upper(), func = "TOGGLE ROTATION DAMPING", atmospace = "both", shift = false, shieldreq = false} end
        
        function splitstr (inputstr, sep)
            if sep == nil then
                    sep = "%s"
            end
            local t={}
            for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                    table.insert(t, str)
            end
            return t
        end
        
        codeType = "FOX"
    
        function short(n)
            if codeType=="FOX" then
                n = math.floor(n)
                b = 24
                local digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                local t = {}
                local sign = ""
                if n < 0 then
                    sign = "-"
                n = -n
                end
                repeat
                    local d = (n % b) + 1
                    n = math.floor(n / b)
                    table.insert(t, 1, digits:sub(d,d))
                until n == 0
                return string.sub(sign .. table.concat(t,""),-3)
            elseif codeType == "last" then
                return string.sub(tostring(n),-3)
            end
        end
        
        function f_pitch_roll()
            function unit.getPitch()
                local world=0
                if antigrav then
                    if antigrav.isActive() then 
                        world=(vec3(core.getWorldVertical())):normalize()
                    else 
                        world=(vec3(core.getWorldGravity())):normalize() 
                    end
                else 
                    world=(vec3(core.getWorldGravity())):normalize() 
                end
                local construct=vec3(construct.getWorldOrientationForward())
                local prod=math.asin(world:dot(construct)) * -constants.rad2deg
                return prod
            end
            pitch_hud=((unit.getPitch())*10)/10
        
            function unit.getRoll()
                local worldVertical=0
                if antigrav then
                    if antigrav.isActive() then 
                        worldVertical=vec3(core.getWorldVertical())
                    else 
                        worldVertical=vec3(core.getWorldGravity()) 
                    end
                else 
                    worldVertical=vec3(core.getWorldGravity()) 
                end
                local constructForward=vec3(construct.getWorldOrientationForward())
                local constructRight=vec3(construct.getWorldOrientationRight())
                local currentRollDeg=getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs=math.abs(currentRollDeg)
                local currentRollDegSign=utils.sign(currentRollDeg)
                return currentRollDeg
            end
            roll_hud=(unit.getRoll()*10)/10
        
            function compass()
                local up=-vec3(core.getWorldVertical())
                local forward=vec3(construct.getWorldOrientationForward())
                forward=forward - forward:project_on(up)
                local north=vec3(0, 0, 1)
                north=north - north:project_on(up)
                local east=north:cross(up)
                local angle=north:angle_between(forward) * constants.rad2deg
                if forward:dot(east)<0 then angle=((360-angle)*10)/10 end
                return angle
            end
            compass_hud=compass()
        end
        
        function get_angle(ref)
            local up=-vec3(core.getWorldVertical())
            local forward=vec3(construct.getWorldOrientationForward())
            forward=forward - forward:project_on(up)
            ref=ref - ref:project_on(up)
            local east=ref:cross(up)
            local angle=ref:angle_between(forward) * constants.rad2deg
            if forward:dot(east)>0.01 then 
                angle=angle*-1 
            end
            return angle
        end
        
        function getOrbit(position, vector, planet) 
            local pos = vec3(position)
            local v = vec3(vector)
            local center = vec3(planet.center)
            local r = pos - center
            local v2 = v:len2()
            local d = r:len()
            local mu = planet.GM
            local e = ((v2 - mu / d) * r - r:dot(v) * v) / mu
            local a = mu / (2 * mu / d - v2)
            local ecc = e:len()
            local dir = e:normalize()
            local pd = a * (1 - ecc)
            local ad = a * (1 + ecc)
            local atmo_surface = planet.atmosphereRadius
            if atmo_surface == 0 then 
                atmo_surface = planet.radius + planet.surfaceMaxAltitude
            end
            local per = pd * dir + center 
            local pera = pd - atmo_surface 
            local apo = nil
            local apoa = ad - atmo_surface
            if ecc < 1 then apo = -ad * dir + center end 
        
            local Period = nil
            if apo ~= nil then Period = 2 * math.pi * math.sqrt(a ^ 3 / mu) end
        
            local trueAnomaly = math.acos((e:dot(r)) / (ecc * d))
            if r:dot(v) < 0 then
                trueAnomaly = -(trueAnomaly - 2 * math.pi)
            end    
        
            local EccentricAnomaly = math.acos((math.cos(trueAnomaly) + ecc) / (1 + ecc * math.cos(trueAnomaly)))
        
            local timeTau = EccentricAnomaly
            if timeTau < 0 then
                timeTau = timeTau + 2 * math.pi
            end    
        
            local MeanAnomaly = timeTau - ecc * math.sin(timeTau)
            local TimeSincePeriapsis = 0
            local TimeToPeriapsis = 0
            local TimeToApoapsis = 0
            if Period ~= nil then
                TimeSincePeriapsis = MeanAnomaly / (2 * math.pi / Period)
        
                TimeToPeriapsis = Period - TimeSincePeriapsis
                TimeToApoapsis = TimeToPeriapsis + Period / 2
                
                if trueAnomaly - math.pi > 0 then 
                    TimeToPeriapsis = TimeSincePeriapsis
                    TimeToApoapsis = TimeToPeriapsis + Period / 2
                end
                if TimeToApoapsis > Period then
                    TimeToApoapsis = TimeToApoapsis - Period
                end
            else
                TimeToPeriapsis = (pos - per):len() / vec3(construct.getVelocity()):len()
            end    

            return {per,pera,apo,apoa,TimeToPeriapsis,TimeToApoapsis}
        end

        function getScreenPos(pointpos) 
            local width = 1920
            local height = 1080
            local vFov = system.getCameraVerticalFov()
            local near = 0.1
            local far = 120000000.0
            local aspectRatio = height/width
            local tanFov = 1.0/math.tan(math.rad(vFov)*0.5)
            local field = -far/(far-near)
            local af = aspectRatio*tanFov
            local nq = near*field
            local pos = system.getCameraWorldPos()
            local camX, camY, camZ = pos[1], pos[2], pos[3]
            local fwd = system.getCameraWorldForward()
            local camFwdX, camFwdY, camFwdZ = fwd[1], fwd[2], fwd[3]
            local rgt = system.getCameraWorldRight()
            local camRgtX, camRgtY, camRgtZ = rgt[1], rgt[2], rgt[3]
            local up = system.getCameraWorldUp()
            local camUpX, camUpY, camUpZ = up[1], up[2], up[3]
            local vx, vy, vz = pointpos:unpack() 

            vx = vx - camX
            vy = vy - camY
            vz = vz - camZ

            vxT, vyT, vzT = vx, vy, vz
            vx = vxT * camRgtX + vyT * camRgtY + vzT * camRgtZ
            vy = vxT * camFwdX + vyT * camFwdY + vzT * camFwdZ
            vz = vxT *  camUpX + vyT *  camUpY + vzT *  camUpZ

            vxT, vyT, vzT = vx, vy, vz
            vx = (af * vxT)/vyT
            vy = ( -tanFov * vzT)/vyT
            vz = ( -field * vyT + nq)/vyT
            vx = vx*1.10
            vy = vy*1.10
            if vx>-1 and vx<1 and vy>-1 and vy<1 and vz<1 then
                vx = vx*960+960
                vy = vy*540+540
            else
                vx = -1
                vy = -1
            end
            local screenpos = {vx,vy}
            return screenpos
        end
        
        function getScreenPosC(pointpos)
            local width = 1920
            local height = 1080
            local vFov = system.getCameraVerticalFov()
            local near = 0.1
            local far = 1000.0
            local aspectRatio = height/width
            local tanFov = 1.0/math.tan(math.rad(vFov)*0.5)
            local field = -far/(far-near)
            local af = aspectRatio*tanFov
            local nq = near*field
            local pos = system.getCameraPos()
            local camX, camY, camZ = pos[1], pos[2], pos[3]
            local fwd = system.getCameraForward()
            local camFwdX, camFwdY, camFwdZ = fwd[1], fwd[2], fwd[3]
            local rgt = system.getCameraRight()
            local camRgtX, camRgtY, camRgtZ = rgt[1], rgt[2], rgt[3]
            local up = system.getCameraUp()
            local camUpX, camUpY, camUpZ = up[1], up[2], up[3]
            local vx, vy, vz = pointpos:unpack() 
        
            vx = vx - camX
            vy = vy - camY
            vz = vz - camZ
        
            vxT, vyT, vzT = vx, vy, vz
            vx = vxT * camRgtX + vyT * camRgtY + vzT * camRgtZ
            vy = vxT * camFwdX + vyT * camFwdY + vzT * camFwdZ
            vz = vxT *  camUpX + vyT *  camUpY + vzT *  camUpZ
        
            vxT, vyT, vzT = vx, vy, vz
            vx = (af * vxT)/vyT
            vy = ( -tanFov * vzT)/vyT
            vz = ( -field * vyT + nq)/vyT
            vx = vx*1.10
            vy = vy*1.10
            if vx>-1 and vx<1 and vy>-1 and vy<1 and vz<1 then
                vx = vx*960+960
                vy = vy*540+540
            else
                vx = -1
                vy = -1
            end
            local screenpos = {vx,vy}
            return screenpos
        end
        
        function getPipeDistance(worldPos, origCenter, destCenter) 
            local pipeDistance
            local pipe = (destCenter - origCenter):normalize()
            local r = (worldPos -origCenter):dot(pipe) / pipe:dot(pipe)
            if r <= 0. then
            return {(worldPos-origCenter):len(),origCenter,pipe,false}
            elseif r >= (destCenter - origCenter):len() then
            return {(worldPos-destCenter):len(),destCenter,pipe,false}
            end
            local L = origCenter + (r * pipe)
            local visPipe = true
            if r < 400000 then visPipe = false end
            if (destCenter-origCenter):len() - r < 400000 then visPipe = false end
            pipeDistance =  (L - worldPos):len()
            return {pipeDistance,L,pipe,visPipe}
        end
        
        torqueEngines={}
        shieldHist = {}
        atmoTanks = {}
        spaceTanks = {}
        rocketTanks = {}
        spaceEngines = {}
        spaceEnginesGyro = {}
        surfaceEngine = {getDistance = function() return 0 end}
        screenInstalled=false
        shieldInstalled=false
        databankInstalled=false
        surfaceEngineInstalled=false
    
        totalBasePower = 0
        totalBasePowerGyro = 0
    
        maxccs = 0
    
        baseSVG = [[]]
        svgShieldBase = [[]]
        svgShield = [[]]
    
        c  = 299792458
        c2 = c*c
    
        function getForwardSpaceAccelerationFromThrottle(throttleCmd, combat)
            local axisThrottle = throttleCmd/100
            local axisWorldDirection = vec3(construct.getWorldOrientationForward())
            local maxKPAlongAxis = maxKinematicSpaceFwd--Cruise
            if combat then 
                maxKPAlongAxis = maxKinematicSpaceFwdCombat 
            elseif combatEngines then
                local totalE = 0
                local combatE = 0
                for k,v in pairs(spaceEngines) do
                    totalE = totalE + v.count
                    if v.combat then combatE = combatE + v.count end
                end
                local cruiseE = totalE - combatE
                maxKPAlongAxis = maxKinematicSpaceFwdCruise/cruiseE * totalE
            end
        
            local forceCorrespondingToThrottle = 0
            local maxSpaceForceForward = maxKPAlongAxis
            forceCorrespondingToThrottle = axisThrottle * maxSpaceForceForward
            local accelerationCommand = forceCorrespondingToThrottle / totalMass
            local finalAcceleration = accelerationCommand * axisWorldDirection 
            return finalAcceleration
        end
        
        
        function buildTanks()
            totalBasePower = 0
            totalBasePowerGyro = 0
        
            atmoTanks = {}
            spaceTanks = {}
            rocketTanks = {}
            spaceEngines = {}
            spaceEnginesGyro = {}
        
            local eMaxHitPoints = 0
            local eName = ''
            local eMass = 0
            local tankMass = 0
            local tankCapacity = 0
            local function classifySpaceEngine(eMaxHP, eTypeT)
                local seClass = {}
                seClass.tier = ""
                seClass.type = ""
                seClass.size = "XtraSmall"
                local basic = false

                if eTypeT:find("Uncommon") then
                    seClass.tier = ""
                elseif eTypeT:find("Advanced") then
                    seClass.tier = "3"
                elseif eTypeT:find("Rare") then
                    seClass.tier = "4"
                elseif eTypeT:find("Exotic") then
                    seClass.tier = "5"
                else
                    basic=true
                end
                if basic then
                    if eMaxHP>45000 then
                        seClass.size="XtraLarge"
                    elseif eMaxHP>9000 then
                        seClass.size="Large"
                    elseif eMaxHP>1580 then
                        seClass.size="Medium"
                    elseif eMaxHP>220 then
                        seClass.size="Small"
                    end
                else
                    if eMaxHP>195000 then
                        seClass.size="XtraLarge"
                    elseif eMaxHP>95000 then
                        seClass.size="Large"
                    elseif eMaxHP>45000 then
                        seClass.size="Medium"
                    elseif eMaxHP>20000 then
                        seClass.size="Small"
                    end
                end
                if eTypeT:find("Freight") then
                    seClass.type = "Freight"
                elseif eTypeT:find("Maneuver") then
                    seClass.type = "Maneuver"
                elseif eTypeT:find("Military") then
                    seClass.type = "Military"
                elseif eTypeT:find("Safe") then
                    seClass.type = "Safe"
                end
                return seClass
            end
        
            local constructForwardLocal = vec3(construct.getOrientationForward())
            local gyroForwardLocal = nil
            if gyro~=nil then gyroForwardLocal = vec3(gyro.getForward()) end
            local elements = core.getElementIdList()
            for i = 1,#elements,1 do
                local eType = core.getElementDisplayNameById(elements[i])

                if eType:find("Space Engine") then
                    local engineTags = core.getEngineTagsById(elements[i])
                    if engineTags:find("longitudinal") and vec3(core.getElementForwardById(elements[i])):dot(constructForwardLocal)>0 then
                        eMaxHitPoints = core.getElementMaxHitPointsById(elements[i])
                        local seClassification = classifySpaceEngine(eMaxHitPoints, eType)
                        local lookup = "SpaceEngine"..seClassification.size..seClassification.type..seClassification.tier
                        local fuelrate = sedata[lookup].FuelRate
                        local maxpower = sedata[lookup].MaxPower
                        totalBasePower=totalBasePower+maxpower
                        eName = core.getElementNameById(elements[i])
                        local combatengine = false
                        if engineTags:find("combat") then combatengine = true end
                        local spaceengine = {
                            count = 1,
                            fuelrate = fuelrate,
                            maxpower = maxpower,
                            combat = combatengine
                        }                   
                        if spaceEngines[lookup] ~= nil then
                            spaceEngines[lookup].count = spaceEngines[lookup].count+1
                        else
                            spaceEngines[lookup] = spaceengine
                        end
                    elseif gyro~=nil and engineTags:find("thrust") and vec3(core.getElementForwardById(elements[i])):dot(gyroForwardLocal)>0.4 then
                        eMaxHitPoints = core.getElementMaxHitPointsById(elements[i])
                        local seClassification = classifySpaceEngine(eMaxHitPoints, eType)
                        local lookup = "SpaceEngine"..seClassification.size..seClassification.type..seClassification.tier
                        local fuelrate = sedata[lookup].FuelRate
                        local maxpower = sedata[lookup].MaxPower
                        totalBasePowerGyro=totalBasePowerGyro+maxpower
                        eName = core.getElementNameById(elements[i])
                        local combatengine = false
                        if engineTags:find("combat") then combatengine = true end
                        local spaceengine = {
                            count = 1,
                            fuelrate = fuelrate,
                            maxpower = maxpower,
                            combat = combatengine
                        }                   
                        if spaceEnginesGyro[lookup] ~= nil then
                            spaceEnginesGyro[lookup].count = spaceEnginesGyro[lookup].count+1
                        else
                            spaceEnginesGyro[lookup] = spaceengine
                        end
                    end
                end
                if eType == "Atmospheric Fuel Tank" then
                    eMass = core.getElementMassById(elements[i])
                    eName = core.getElementNameById(elements[i])
                    eMaxHitPoints = core.getElementMaxHitPointsById(elements[i])
                    if eMaxHitPoints > 10460 then
                        tankMass = 5481.27
                        tankCapacity = 12800 * (1+(0.2*AtmoFuelTankHandling))
                    elseif eMaxHitPoints > 1300 then
                        tankMass = 988.67
                        tankCapacity = 1600 * (1+(0.2*AtmoFuelTankHandling))
                    elseif eMaxHitPoints > 160 then
                        tankMass = 182.67
                        tankCapacity = 400 * (1+(0.2*AtmoFuelTankHandling))
                    else
                        tankMass = 35.03
                        tankCapacity = 100 * (1+(0.2*AtmoFuelTankHandling))
                    end          
                    tankvalue = {
                        ID = elements[i],
                        name = eName,
                        tankMass = tankMass,
                        tankCapacity = tankCapacity,
                        tankFuel = (eMass-tankMass)/atmoFuelWeight,
                        lastFuel = (eMass-tankMass)/atmoFuelWeight,
                        tankTime = 0,
                        tankColour = hudColour
                    }  
                    atmoTanks[#atmoTanks + 1] = tankvalue
                end
                if eType == "Space Fuel Tank" then
                    eMass = core.getElementMassById(elements[i])
                    eName = core.getElementNameById(elements[i])
                    eMaxHitPoints = core.getElementMaxHitPointsById(elements[i])
                    if eMaxHitPoints > 10460 then
                        tankMass = 5481.27
                        tankCapacity = 12800 * (1+(0.2*SpaceFuelTankHandling))
                    elseif eMaxHitPoints > 1300 then
                        tankMass = 988.67
                        tankCapacity = 1600 * (1+(0.2*SpaceFuelTankHandling))
                    elseif eMaxHitPoints > 160 then
                        tankMass = 182.67
                        tankCapacity = 400 * (1+(0.2*SpaceFuelTankHandling))
                    else
                        tankMass = 35.03
                        tankCapacity = 100 * (1+(0.2*SpaceFuelTankHandling))
                    end            
                    tankvalue = {
                        ID = elements[i],
                        name = eName,
                        tankMass = tankMass,
                        tankCapacity = tankCapacity,
                        tankFuel = (eMass-tankMass)/spaceFuelWeight,
                        lastFuel = (eMass-tankMass)/spaceFuelWeight,
                        tankTime = 0,
                        tankColour = hudColour
                    }  
                    spaceTanks[#spaceTanks + 1] = tankvalue
                end
                if eType == "Rocket Fuel Tank" then
                    eMass = core.getElementMassById(elements[i])
                    eName = core.getElementNameById(elements[i])
                    eMaxHitPoints = core.getElementMaxHitPointsById(elements[i])
                    if eMaxHitPoints > 68800 then
                        tankMass = 25741.76
                        tankCapacity = 50000 * (1+(0.1*RocketFuelTankHandling))
                    elseif eMaxHitPoints > 6200 then
                        tankMass = 4724.43
                        tankCapacity = 6400 * (1+(0.1*RocketFuelTankHandling))
                    elseif eMaxHitPoints > 730 then
                        tankMass = 886.72
                        tankCapacity = 800 * (1+(0.1*RocketFuelTankHandling))
                    else
                        tankMass = 173.42
                        tankCapacity = 400 * (1+(0.1*RocketFuelTankHandling))
                    end            
                    tankvalue = {
                        ID = elements[i],
                        name = eName,
                        tankMass = tankMass,
                        tankCapacity = tankCapacity,
                        tankFuel = (eMass-tankMass)/rocketFuelWeight,
                        lastFuel = (eMass-tankMass)/rocketFuelWeight,
                        tankTime = 0,
                        tankColour = hudColour
                    }  
                    rocketTanks[#rocketTanks + 1] = tankvalue
                end
            end
        
            totalMass = construct.getMass()
            fuelBurnPerSecL = 0
            for k,v in pairs(spaceEngines) do
                local pctPower = ((v.maxpower*v.count)/totalBasePower)*maxKinematicSpaceFwd
                local fuelburn = (v.fuelrate*pctPower)*(1-(0.05*SpaceEngineFuelEfficiency))
                fuelBurnPerSecL=fuelBurnPerSecL+fuelburn
            end
            totalSpaceFuelCapacity = 0
            totalSpaceFuelRemaining = 0
            for i = 1,#spaceTanks,1 do
                totalSpaceFuelCapacity=totalSpaceFuelCapacity+spaceTanks[i].tankCapacity
                totalSpaceFuelRemaining=totalSpaceFuelRemaining+spaceTanks[i].tankFuel
            end
            maxDeltaV = (maxKinematicSpaceFwd/totalMass)*(totalSpaceFuelCapacity/fuelBurnPerSecL)
            DeltaV = (maxKinematicSpaceFwd/totalMass)*(totalSpaceFuelRemaining/fuelBurnPerSecL)
            if speedUnit=="KMH" then DeltaV=DeltaV*3.6 end
        
        end

        FOX_Flight_Local = {}
        FOX_Flight_Local.__index = FOX_Flight_Local;

        function FOX_Flight_Local.new(system, core, control, warpdrive, antigrav)
            local self = setmetatable({}, FOX_Flight_Local)
            self.system = system
            self.core = core
            self.unit = control
            self.construct = DUConstruct
            self.player = DUPlayer
            self.warpdrive = warpdrive
            self.antigrav = antigrav
            self.Nav = Navigator.new(system, core, control)
            return self
        end

        function FOX_Flight_Local.onStart(self)

            self.system.print(version)self.player.setHeadlightOn(false)if not self.unit.hasDRM()then self.system.print('!! DRM DISABLED !!')end;maxKinematicSpaceFwdCombat=self.construct.getMaxThrustAlongAxis("fueled space_engine longitudinal not_ground thrust combat",self.construct.getOrientationForward())[3]maxKinematicSpaceFwd=self.construct.getMaxThrustAlongAxis("fueled space_engine longitudinal not_ground thrust",self.construct.getOrientationForward())[3]maxKinematicSpaceFwdBoost=self.construct.getMaxThrustAlongAxis("rocket_engine",self.construct.getOrientationForward())[3]if maxKinematicSpaceFwdCombat>0 then maxKinematicSpaceFwdCruise=maxKinematicSpaceFwd-maxKinematicSpaceFwdCombat;combatEngines=true else maxKinematicSpaceFwdCruise=maxKinematicSpaceFwd end;if maxKinematicSpaceFwdBoost>0 then rocketEngines=true end;maxccs=self.core.getMaxCoreStress()for a,b in pairs(self.unit)do if type(b)=="table"and type(b.export)=="table"then if b.getClass then if string.sub(b.getClass(),1,11)=="SpaceEngine"then torqueEngines[#torqueEngines+1]=b elseif string.sub(b.getClass(),1,17)=="AtmosphericEngine"then torqueEngines[#torqueEngines+1]=b elseif string.sub(b.getClass(),1,6)=="Shield"then shield=b elseif b.getClass()=="DataBankUnit"then db=b elseif b.getClass()=="AtmoFuelContainer"then at=b elseif b.getClass()=="SpaceFuelContainer"then st=b elseif b.getClass()=="RocketFuelContainer"then rt=b elseif string.sub(b.getClass(),1,5)=="Hover"or string.sub(b.getClass(),1,19)=="AtmosphericVertical"then surfaceEngine=b;surfaceEngineInstalled=true end end end end;if at~=nil then atmoFuelWeight=at.getItemsMass()/at.getItemsVolume()local c=at.getMaxVolume()local d=at.getItemId()local e=self.system.getItem(d)["size"]if e=="xs"then AtmoFuelTankHandling=(c/100-1)/.2 elseif e=="s"then AtmoFuelTankHandling=(c/400-1)/.2 elseif e=="m"then AtmoFuelTankHandling=(c/1600-1)/.2 elseif e=="l"then AtmoFuelTankHandling=(c/12800-1)/.2 end end;if st~=nil then spaceFuelWeight=st.getItemsMass()/st.getItemsVolume()local c=st.getMaxVolume()local d=st.getItemId()local e=self.system.getItem(d)["size"]if e=="xs"then SpaceFuelTankHandling=(c/100-1)/.2 elseif e=="s"then SpaceFuelTankHandling=(c/400-1)/.2 elseif e=="m"then SpaceFuelTankHandling=(c/1600-1)/.2 elseif e=="l"then SpaceFuelTankHandling=(c/12800-1)/.2 end end;if rt~=nil then rocketFuelWeight=rt.getItemsMass()/rt.getItemsVolume()local c=rt.getMaxVolume()local d=rt.getItemId()local e=self.system.getItem(d)["size"]if e=="xs"then RocketFuelTankHandling=(c/400-1)/.1 elseif e=="s"then RocketFuelTankHandling=(c/800-1)/.1 elseif e=="m"then RocketFuelTankHandling=(c/6400-1)/.1 elseif e=="l"then RocketFuelTankHandling=(c/50000-1)/.1 end end;if db==nil then databankInstalled=false;self.system.print('No databank is linked to the flight controller')showTalentMessage=300 else databankInstalled=true;if db.hasKey("speedUnit")then speedUnit=db.getStringValue("speedUnit")end;if db.hasKey("showHints")then local f=db.getStringValue("showHints")if f=="true"then showHints=true else showHints=false end end;if db.hasKey("brakeLocked")then local f=db.getStringValue("brakeLocked")if f~="true"then brakeState=false;brakeLocked=false end end;if db.hasKey("showAtlasMarks")then local f=db.getStringValue("showAtlasMarks")if f=="true"then showAtlasMarks=true end end;if db.hasKey("showSafeZoneMark")then local f=db.getStringValue("showSafeZoneMark")if f=="true"then showSafeZoneMark=true else showSafeZoneMark=false end end;if db.hasKey("toggleSpaceCompass")then local f=db.getStringValue("toggleSpaceCompass")if f=="true"then toggleSpaceCompass=true end end;if db.hasKey("autoLevelLowSpeed")then local f=db.getStringValue("autoLevelLowSpeed")if f=="true"then autoLevelLowSpeed=true else autoLevelLowSpeed=false end end;if db.hasKey("showMarkRange")then showMarkRange=db.getFloatValue("showMarkRange")end;if db.hasKey("showPipeMark")then showPipeMark=db.getFloatValue("showPipeMark")end;if db.hasKey("maxdps")then maxdps=db.getFloatValue("maxdps")end;if db.hasKey("codeType")then codeType=db.getStringValue("codeType")end;if db.hasKey("savemarks")then local g=db.getStringValue("savemarks")marks=json.decode(g)for h=1,#marks do marks[h].pos=vec3(marks[h].pos.x,marks[h].pos.y,marks[h].pos.z)end end;if saveFlight and db.hasKey("track")then self.unit.setTimer('loadtrack',1)end;if db.hasKey("hudColour")then hudColour=db.getStringValue("hudColour")end;if db.hasKey("hudSecColour")then hudSecColour=db.getStringValue("hudSecColour")end;if db.hasKey("hudTerColour")then hudTerColour=db.getStringValue("hudTerColour")end;if db.hasKey("pilotTalents")then local i=db.getStringValue("pilotTalents")pilotTalents=json.decode(i)for h=1,#pilotTalents do if pilotTalents[h].pilot==self.player.getId()then SpaceEngineFuelEfficiency=pilotTalents[h].SpaceEngineFuelEfficiency;pilotTalentSet=true;break end;if not pilotTalentSet then showTalentMessage=300 end end else showTalentMessage=300 end end;if shield==nil then shieldInstalled=false else shieldInstalled=true;local j=shield.getShieldHitpoints()shieldHist={}for h=1,9,1 do shieldHist[#shieldHist+1]=j end;svgShieldBase=[[

                    <text text-anchor="start" alignment-baseline="top" x="50" y="10" style="font-size:10px;fill:#]]..hudColour..[[">SHIELD</text>
                    <rect style="stroke-opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="50" y="14" width="90" height="90" />
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="50,24 140,24"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="50,34 140,34"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="50,44 140,44"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="50,54 140,54"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="50,64 140,64"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="50,74 140,74"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="50,84 140,84"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="50,94 140,94"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="60,14 60,104"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="70,14 70,104"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="80,14 80,104"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="90,14 90,104"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="100,14 100,104"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="110,14 110,104"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="120,14 120,104"/>
                    <polyline style="opacity:0.6;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="130,14 130,104"/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="95,120 95,188"/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-dasharray:2;" points="61,154 129,154"/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;" points="90,120 100,120"/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;" points="90,188 100,188"/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;" points="61,149 61,159"/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;" points="129,149 129,159"/>
                ]]end;self.Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})self.Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()if self.antigrav~=nil then self.antigrav.showWidget()end;if self.warpdrive~=nil then self.warpdrive.showWidget()end;if gyro~=nil then gyro.hideWidget()end;if self.Nav.control.isRemoteControlled()then self.player.freeze(1)end;gearExtended=self.Nav.control.isAnyLandingGearDeployed()if gearExtended then self.Nav.control.deployLandingGears()else self.Nav.control.retractLandingGears()end;f_pitch_roll()body=bodies[1]local k=[[<path style="fill:black;fill-opacity:0.4;" d="M 500 0 L 1420 0 L 1420 1080 L 500 1080 Z"/>]]if LadderContainer=="circle"then k=[[<circle cx="960" cy="540" r="400" />]]end;local l=self.system.getScreenHeight()local m=self.system.getScreenWidth()local n=50;local o=l-100;local p=o*1.7777777777777777;local q=(m-p)/2;baseSVG=[[
                        <style> 
                            .blur {
                                filter: blur(5px) 
                                        brightness(.85)
                                        saturate(3);
                                opacity: 1;
                                position: absolute;
                                top: ]]..n..[[px;
                                left: ]]..q..[[px;
                                width: ]]..p..[[px;
                                height: ]]..o..[[px;
                            }
                            .shadow {
                                filter: drop-shadow(1px 1px 1px black);
                                position: absolute;
                                top: ]]..n..[[px;
                                left: ]]..q..[[px;
                                width: ]]..p..[[px;
                                height: ]]..o..[[px;
                            }
                            .main {
                                position: absolute;
                                top: ]]..n..[[px;
                                left: ]]..q..[[px;
                                width: ]]..p..[[px;
                                height: ]]..o..[[px;
                            }
                        </style>
                        <svg class="blur" viewBox="0 0 1920 1080">


                            <clipPath id="compassClip">
                                <path style="fill:black;fill-opacity:0.4;" d="M 660 0 L 960 0 L 960 27 L 945 27 L 945 43 L 975 43 L 975 27 L 960 27 L 960 0 L 1260 0 L 1260 130 L 660 130 Z"/>
                            </clipPath>
                            <clipPath id="ladderClip">
                                ]]..k..[[
                            </clipPath>
                            <clipPath id="alttapeClip">
                                <path style="fill:black;fill-opacity:0.4;" d="M 1520 360 L 1720 360 L 1720 520 L 1520 520 Z M 1520 560 L 1720 560 L 1720 720 L 1520 720 Z"/>
                            </clipPath>
                            <clipPath id="spdtapeClip">
                                <path style="fill:black;fill-opacity:0.4;" d="M 200 0 L 400 0 L 400 80 L 200 80 Z M 200 120 L 400 120 L 400 200 L 200 200 Z"/>
                            </clipPath>

                            <polyline style="opacity:1;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="1495,0 1500,0 1500,200 1495,200" />
                            <polygon style="opacity:1;stroke:none;fill:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="1491,97 1491,103 1487,100" />

                        ]]local r=baseSVG..[[
                </svg>
            ]]self.Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].throttleAtomicStepValue=0.01;self.Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].throttleMouseStepScale=mouseStepScale;self.system.showScreen(1)self.system.showHelper(0)self.system.setScreen(r)self.unit.setTimer('fuelRemain',3.12)self.unit.setTimer('pipUpdate',0.0001)self.unit.setTimer('updateHistory',30)self.unit.setTimer('closest',2.23)self.unit.setTimer('dps',3)self.unit.setTimer('track',trackInterval)self.unit.setTimer('calibrate',0.5)self.unit.hideWidget()
        end

        function FOX_Flight_Local.onStop(self)
            if self.antigrav~=nil then self.antigrav.hideWidget()end;if self.warpdrive~=nil then self.warpdrive.hideWidget()end;if gyro~=nil then gyro.hideWidget()end;self.core.hideWidget()if databankInstalled then if brakeLocked then db.setStringValue("brakeLocked","true")else db.setStringValue("brakeLocked","false")end;if saveFlight then db.setStringValue("track",json.encode(track))end end
        end

        function FOX_Flight_Local.onTimer(self,timerId)
            if timerId=="dps"then if dps[1]==nil then dps[1]=incoming else if#dps<26 then dps[#dps+1]=incoming else for a=2,#dps do dps[a-1]=dps[a]end;dps[26]=incoming end end;if databankInstalled then if db.hasKey("fGunner")then if self.system.getUtcTime()-db.getFloatValue("fGunner")<5 then gunner=true else gunner=false end else gunner=false end else gunner=false end elseif timerId=="config"then local b=560;local c=960;local d=0;if pilotTalentSet then d=SpaceEngineFuelEfficiency end;local e=[[none]]local f=[[none]]local g=[[none]]if showAtlasMarks then f=[[#]]..hudColour;g=[[none]]else f=[[none]]g=[[#]]..hudColour end;local h=[[none]]local i=[[none]]if showSafeZoneMark then h=[[#]]..hudColour;i=[[none]]else h=[[none]]i=[[#]]..hudColour end;local j=[[none]]local k=[[none]]local l=[[none]]if showPipeMark==0 then j=[[none]]k=[[#]]..hudColour;l=[[none]]elseif showPipeMark==1 then j=[[#]]..hudColour;k=[[none]]l=[[none]]else j=[[none]]k=[[none]]l=[[#]]..hudColour end;local m=[[none]]local n=[[none]]if autoLevelLowSpeed then m=[[#]]..hudColour;n=[[none]]else m=[[none]]n=[[#]]..hudColour end;local o=[[none]]local p=[[none]]if toggleSpaceCompass then o=[[#]]..hudColour;p=[[none]]else o=[[none]]p=[[#]]..hudColour end;local q=math.floor(showMarkRange)..[[ SU]]local r=200*showMarkRange/400;if showMarkRange==400 then q=[[MAX]]r=200 end;svgSettings=[[
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="250" style="font-size:20px;fill:#]]..hudColour..[[">HUD CONFIGURATION</text>
                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..e..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+200 ..[[" y="235" rx="4" ry="4" width="20" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+210 ..[[" y="245" style="font-size:11px;fill:#]]..hudColour..[[">X</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="300" style="font-size:16px;fill:#]]..hudColour..[[">]]..self.player.getName()..[[ SPACE ENGINE FUEL EFFICIENCY</text>
                ]]for a=0,5,1 do if d==a then e=[[#]]..hudColour else e=[[none]]end;svgSettings=svgSettings..[[
                        <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..e..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+25*a-10 ..[[" y="285" rx="4" ry="4" width="20" height="20" />
                        <text text-anchor="middle" alignment-baseline="middle" x="]]..c+25*a..[[" y="295" style="font-size:11px;fill:#]]..hudColour..[[">]]..a..[[</text>
                    ]]end;svgSettings=svgSettings..[[
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="330" style="font-size:16px;fill:#]]..hudColour..[[">SHOW ATLAS MARKS</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..f..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*0-12 ..[[" y="315" rx="4" ry="4" width="25" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+30*0 ..[[" y="325" style="font-size:11px;fill:#]]..hudColour..[[">ON</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..g..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*1-12 ..[[" y="315" rx="4" ry="4" width="25" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+30*1 ..[[" y="325" style="font-size:11px;fill:#]]..hudColour..[[">OFF</text>
        
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="360" style="font-size:16px;fill:#]]..hudColour..[[">SHOW MARKS RANGE</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c+200 ..[[" y="360" style="font-size:14px;fill:#]]..hudColour..[[">]]..q..[[</text>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..c-10 ..[[,365 ]]..c+190 ..[[,365" />
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..c-10 ..[[,345 ]]..c+190 ..[[,345" />
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:8;stroke-miterlimit:1;" points="]]..c-10 ..[[,355 ]]..c-10+r..[[,355" />

                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="390" style="font-size:16px;fill:#]]..hudColour..[[">SHOW NEAREST PIPE MARK</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..k..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*0-12 ..[[" y="375" rx="4" ry="4" width="25" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+30*0 ..[[" y="385" style="font-size:11px;fill:#]]..hudColour..[[">OFF</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..j..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*1-12 ..[[" y="375" rx="4" ry="4" width="25" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+30*1 ..[[" y="385" style="font-size:11px;fill:#]]..hudColour..[[">ON</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..l..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*2-12 ..[[" y="375" rx="4" ry="4" width="25" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+30*2 ..[[" y="385" style="font-size:11px;fill:#]]..hudColour..[[">PVP</text>

                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="420" style="font-size:16px;fill:#]]..hudColour..[[">SHOW SAFE ZONE BORDER MARKS</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..h..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*0-12 ..[[" y="405" rx="4" ry="4" width="25" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+30*0 ..[[" y="415" style="font-size:11px;fill:#]]..hudColour..[[">ON</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..i..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*1-12 ..[[" y="405" rx="4" ry="4" width="25" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+30*1 ..[[" y="415" style="font-size:11px;fill:#]]..hudColour..[[">OFF</text>

                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="450" style="font-size:16px;fill:#]]..hudColour..[[">SHIFT SHOWS SPACE COMPASS</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..o..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*0-12 ..[[" y="435" rx="4" ry="4" width="50" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+55*0+12 ..[[" y="445" style="font-size:11px;fill:#]]..hudColour..[[">TOGGLE</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..p..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+55*1-12 ..[[" y="435" rx="4" ry="4" width="50" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+55*1+12 ..[[" y="445" style="font-size:11px;fill:#]]..hudColour..[[">HOLD</text>

                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="480" style="font-size:16px;fill:#]]..hudColour..[[">AUTO LEVEL AT LOW SPEED</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..m..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*0-12 ..[[" y="465" rx="4" ry="4" width="25" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+30*0 ..[[" y="475" style="font-size:11px;fill:#]]..hudColour..[[">ON</text>

                    <rect style="opacity:0.8;fill-opacity:0.5;fill:]]..n..[[;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..c+30*1-12 ..[[" y="465" rx="4" ry="4" width="25" height="20" />
                    <text text-anchor="middle" alignment-baseline="middle" x="]]..c+30*1 ..[[" y="475" style="font-size:11px;fill:#]]..hudColour..[[">OFF</text>
                ]]elseif timerId=="dmgReport"then local s=self.core.getElementIdList()local t=0;local u=0;local v=0;local w=0;svgDmg=[[]]for a=1,#s,1 do local x=self.core.getElementMaxHitPointsById(s[a])local y=self.core.getElementHitPointsById(s[a])t=t+x;u=u+y;if y<x then local z="FFD700"if y==0 then z="C45A38"w=w+1 else v=v+1 end;if y/x>0.66 then z=hudColour end;local A=self.core.getElementItemIdById(s[a])local B=self.system.getItem(A)elemname=B.locDisplayNameWithSize;local pippos=vec3(self.core.getElementPositionById(s[a]))local piploc=getScreenPosC(pippos)if piploc[1]~=-1 then svgDmg=svgDmg..[[
                                <circle style="opacity:0.8;fill:none;stroke:#]]..z..[[;stroke-width:1;stroke-miterlimit:1;" cx="]]..piploc[1]..[[" cy="]]..piploc[2]..[[" r="10" />
                                <polyline style="opacity:0.8;fill:none;stroke:#]]..z..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..piploc[1]-10 ..[[,]]..piploc[2]-10 ..[[ ]]..piploc[1]-20 ..[[,]]..piploc[2]-20 ..[[ ]]..piploc[1]-50 ..[[,]]..piploc[2]-20 ..[["/>
                                <text text-anchor="end" alignment-baseline="bottom" x="]]..piploc[1]-25 ..[[" y="]]..piploc[2]-22 ..[[" style="font-size:11px;fill:#]]..z..[[">]]..elemname..[[</text>
                            ]]if y>1 then local C=y/x*359.99;local D=1;if C<180 then D=0 end;svgDmg=svgDmg..[[
                                    <path style="opacity:0.8;fill:none;stroke:#]]..z..[[;stroke-width:3;stroke-miterlimit:1;" d="M ]]..piploc[1]+7*math.cos((0-90)*math.pi/180)..[[ ]]..piploc[2]+7*math.sin((0-90)*math.pi/180)..[[ A ]]..7 ..[[ ]]..7 ..[[ 0 ]]..D..[[ 1 ]]..piploc[1]+7*math.cos((C-90)*math.pi/180)..[[ ]]..piploc[2]+7*math.sin((C-90)*math.pi/180)..[["/>
                                ]]end end end end;local b=560;local E=960;local c=760;local F=1160;local G=280;if self.unit.isRemoteControlled()and not self.player.isSeated()then b=1500;E=1500;c=1700;F=1700;G=560 end;local H=maxKinematicSpaceFwd/totalMass/9.8;local I=self.construct.getMaxBrake()/totalMass/9.8;svgDmg=svgDmg..[[
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="250" style="font-size:20px;fill:#]]..hudColour..[[">STATUS REPORT</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="280" style="font-size:16px;fill:#]]..hudColour..[[">DESTROYED ELEMENTS</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="280" style="font-size:16px;fill:#]]..hudColour..[[">]]..math.floor(w)..[[</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="300" style="font-size:16px;fill:#]]..hudColour..[[">DAMAGED ELEMENTS</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="300" style="font-size:16px;fill:#]]..hudColour..[[">]]..math.floor(v)..[[</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="320" style="font-size:16px;fill:#]]..hudColour..[[">TOTAL SHIP HP</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="320" style="font-size:16px;fill:#]]..hudColour..[[">]]..math.floor(u)..[[/]]..math.floor(t)..[[ (]]..tostring(math.floor(u/t*100))..[[%)</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="360" style="font-size:16px;fill:#]]..hudColour..[[">SHIP SHORT CODE</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="360" style="font-size:16px;fill:#]]..hudColour..[[">]]..short(self.construct.getId())..[[</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="380" style="font-size:16px;fill:#]]..hudColour..[[">SHIP MASS</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="380" style="font-size:16px;fill:#]]..hudColour..[[">]]..math.floor(totalMass)..[[ KG</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="400" style="font-size:16px;fill:#]]..hudColour..[[">DOCKED CONSTRUCTS</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="400" style="font-size:16px;fill:#]]..hudColour..[[">]]..#self.construct.getDockedConstructs()..[[</text>            
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="420" style="font-size:16px;fill:#]]..hudColour..[[">BOARDED PLAYERS</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="420" style="font-size:16px;fill:#]]..hudColour..[[">]]..#self.construct.getPlayersOnBoard()..[[</text>            
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="460" style="font-size:16px;fill:#]]..hudColour..[[">MAX SPACE ACCEL</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="460" style="font-size:16px;fill:#]]..hudColour..[[">]]..string.format("%.2f",H)..[[ G</text> 
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="480" style="font-size:16px;fill:#]]..hudColour..[[">MAX CURRENT BRAKE</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="480" style="font-size:16px;fill:#]]..hudColour..[[">]]..string.format("%.2f",I)..[[ G</text>    
                    <text text-anchor="start" alignment-baseline="bottom" x="]]..b..[[" y="520" style="font-size:16px;fill:#]]..hudColour..[[">PILOT TALENT</text>         
                ]]if pilotTalentSet then svgDmg=svgDmg..[[
                        <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="520" style="font-size:16px;fill:#]]..hudColour..[[">]]..SpaceEngineFuelEfficiency..[[</text>
                    ]]else svgDmg=svgDmg..[[
                        <text text-anchor="start" alignment-baseline="bottom" x="]]..c..[[" y="520" style="font-size:16px;fill:#]]..hudSecColour..[[">NOT SET (ALT+8)</text>
                    ]]end;if#atmoTanks>0 then svgDmg=svgDmg..[[
                        <text text-anchor="start" alignment-baseline="bottom" x="]]..E..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">NITRON TANKS</text>
                    ]]for a=1,#atmoTanks,1 do local C=atmoTanks[a].tankFuel/atmoTanks[a].tankCapacity*100;local J=atmoTanks[a].tankTime;local K=[[]]if J>60 then K=math.floor(J/60)..[[ MINS ]]K=K..math.floor(J-math.floor(J/60)*60)..[[ SECS]]elseif J>0 then K=math.floor(J)..[[ SECS]]end;svgDmg=svgDmg..[[
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..F..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">]]..string.format("%.2f",atmoTanks[a].tankFuel)..[[L</text>
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..F+100 ..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">]]..string.format("%.2f",C)..[[%</text>
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..F+180 ..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">]]..K..[[</text>
                        ]]G=G+20 end end;if#spaceTanks>0 then svgDmg=svgDmg..[[
                        <text text-anchor="start" alignment-baseline="bottom" x="]]..E..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">KERGON TANKS</text>
                    ]]for a=1,#spaceTanks,1 do local C=spaceTanks[a].tankFuel/spaceTanks[a].tankCapacity*100;local J=spaceTanks[a].tankTime;local K=[[]]if J>60 then K=math.floor(J/60)..[[ MINS ]]K=K..math.floor(J-math.floor(J/60)*60)..[[ SECS]]elseif J>0 then K=math.floor(J)..[[ SECS]]end;svgDmg=svgDmg..[[
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..F..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">]]..string.format("%.2f",spaceTanks[a].tankFuel)..[[L</text>
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..F+100 ..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">]]..string.format("%.2f",C)..[[%</text>
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..F+180 ..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">]]..K..[[</text>
                        ]]G=G+20 end end;if#rocketTanks>0 then svgDmg=svgDmg..[[
                        <text text-anchor="start" alignment-baseline="bottom" x="]]..E..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">XERON TANKS</text>
                    ]]for a=1,#rocketTanks,1 do local C=rocketTanks[a].tankFuel/rocketTanks[a].tankCapacity*100;local J=rocketTanks[a].tankTime;local K=[[]]if J>60 then K=math.floor(J/60)..[[ MINS ]]K=K..math.floor(J-math.floor(J/60)*60)..[[ SECS]]elseif J>0 then K=math.floor(J)..[[ SECS]]end;svgDmg=svgDmg..[[
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..F..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">]]..string.format("%.2f",rocketTanks[a].tankFuel)..[[L</text>
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..F+100 ..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">]]..string.format("%.2f",C)..[[%</text>
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..F+180 ..[[" y="]]..G..[[" style="font-size:16px;fill:#]]..hudColour..[[">]]..K..[[</text>
                        ]]G=G+20 end end elseif timerId=="pipUpdate"then local L=vec3(self.construct.getWorldPosition())local M=false;if self.unit.getAtmosphereDensity()>0 then M=true end;svgPip=[[]]for a=1,#marks do local N=marks[a].pos;local O=N-L;local P=O:len()if showMarkRange==400 or showMarkRange*200000>P then local Q=1-P/200000000+0.004;if Q>1 then Q=1 end;if Q<0.5 then Q=0.5 end;local R=Q-0.2;local S=''if P>100000 then P=P/200000;S=' SU'P=string.format("%.2f",P)..S elseif P>1000 then P=P/1000;S=' KM'P=string.format("%.1f",P)..S else S=' M'P=string.format("%.0f",P)..S end;local T=getScreenPos(N)if T[1]>950 and T[1]<970 and T[2]>530 and T[2]<550 then Q=1;R=0.9 end;if T[1]~=-1 then svgPip=svgPip..[[
                                <g transform="translate(]]..T[1]..[[,]]..T[2]..[[) scale(]]..Q..[[) translate(-]]..T[1]..[[,-]]..T[2]..[[)">
                                <rect style="stroke-opacity:]]..R..[[;stroke:#]]..marks[a].colour..[[;fill:none;stroke-width:2;stroke-miterlimit:1;" transform="rotate(45,]]..T[1]..[[,]]..T[2]..[[)" x="]]..T[1]-10 ..[[" y="]]..T[2]-10 ..[[" width="20" height="20" />
                                <text text-anchor="middle" alignment-baseline="bottom" x="]]..T[1]..[[" y="]]..T[2]-18 ..[[" style="fill-opacity:]]..R..[[;font-size:12px;fill:#]]..marks[a].colour..[[">]]..string.upper(marks[a].name)..[[</text>
                                <text text-anchor="middle" alignment-baseline="top" x="]]..T[1]..[[" y="]]..T[2]+27 ..[[" style="fill-opacity:]]..R..[[;font-size:12px;fill:#]]..marks[a].colour..[[">]]..P..[[</text>
                                </g>
                            ]]end end end;if fixPoint~=nil then local fixloc=getScreenPos(fixPoint)if fixloc[1]~=-1 then local U=fixPoint-L;local V=U:len()local W=''if V>100000 then V=V/200000;W=' SU'V=string.format("%.2f",V)..W elseif V>1000 then V=V/1000;W=' KM'V=string.format("%.1f",V)..W else W=' M'V=string.format("%.0f",V)..W end;local X=vec3(self.system.getCameraWorldRight()):normalize()local Y=fixRange*200000;local Z=Y*X+fixPoint;local _=getScreenPos(Z)if _[1]==-1 then Z=-Y*X+fixPoint;_=getScreenPos(Z)end;local a0=math.abs(fixloc[1]-_[1])svgPip=svgPip..[[
                            <g transform="translate(]]..fixloc[1]..[[,]]..fixloc[2]..[[) translate(-]]..fixloc[1]..[[,-]]..fixloc[2]..[[)">
                            <rect style="stroke-opacity:0.8;stroke:#0599FF;fill:none;stroke-width:2;stroke-miterlimit:1;" transform="rotate(45,]]..fixloc[1]..[[,]]..fixloc[2]..[[)" x="]]..fixloc[1]-10 ..[[" y="]]..fixloc[2]-10 ..[[" width="20" height="20" />
                            <circle style="stroke-opacity:0.8;stroke:#0599FF;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..fixloc[1]..[[" cy="]]..fixloc[2]..[[" r="]]..a0 ..[[" />
                            <text text-anchor="middle" alignment-baseline="bottom" x="]]..fixloc[1]..[[" y="]]..fixloc[2]-18 ..[[" style="fill-opacity:0.8;font-size:12px;fill:#0599FF">< ]]..fixRange..[[ SU RAD ></text>
                            <text text-anchor="middle" alignment-baseline="top" x="]]..fixloc[1]..[[" y="]]..fixloc[2]+27 ..[[" style="fill-opacity:0.8;font-size:12px;fill:#0599FF">]]..V..[[</text>
                            </g>
                        ]]end end;if(shiftedState or toggleSpaceCompass and spaceCompass)and not M and self.system.getCameraMode()==2 then local a1=self.construct.getBoundingBoxSize()local a2=0;for a=1,#a1 do if a1[a]>a2 then a2=a1[a]end end;a2=a2/2;local a3=L;local a4={}a4.points={}a4.inner={}for a=1,17 do local a5=2;if a==1 then a5=3 elseif a<=5 then a5=2.5 end;a4.points[#a4.points+1]=worldCardinals[a]*(a2+a5)+a3;a4.inner[#a4.inner+1]=worldCardinals[a]*a2+a3 end;for a=1,#a4.points do fixloc=getScreenPos(a4.points[a])local a6=getScreenPos(a4.inner[a])local a7=2;local a8=hudColour;local a9=0.6;if a<=5 then a7=4;a9=0.9;if a==1 or a==4 then a8=[[ffd700]]end elseif a<=9 then a7=3 end;if fixloc[1]~=-1 then svgPip=svgPip..[[
                                <circle style="stroke-opacity:]]..a9 ..[[;stroke:#]]..a8 ..[[;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..fixloc[1]..[[" cy="]]..fixloc[2]..[[" r="]]..a7 ..[[" />
                                <polyline style="opacity:]]..a9 ..[[;fill:none;stroke:#]]..a8 ..[[;stroke-width:]]..a7 ..[[;stroke-miterlimit:1;" points="]]..fixloc[1]..[[,]]..fixloc[2]..[[ ]]..a6[1]..[[,]]..a6[2]..[["/>
                            ]]end end end;if szborder~=nil and showSafeZoneMark then local fixloc=getScreenPos(szborder.center)local aa=[[ffd700]]if svgPVPTitle==[[SAFE ZONE]]then aa=hudTerColour end;local U=szborder.center-L;local V=U:len()local Q=1-V/200000000+0.004;if Q>1 then Q=1 end;if Q<0.5 then Q=0.5 end;local R=Q-0.2;if fixloc[1]~=-1 then local W=''if V>100000 then V=V/200000;W=' SU'V=string.format("%.2f",V)..W elseif V>1000 then V=V/1000;W=' KM'V=string.format("%.1f",V)..W else W=' M'V=string.format("%.0f",V)..W end;svgPip=svgPip..[[
                            <g transform="translate(]]..fixloc[1]..[[,]]..fixloc[2]..[[) scale(]]..Q..[[) translate(-]]..fixloc[1]..[[,-]]..fixloc[2]..[[)">
                            <circle style="stroke-opacity:]]..R..[[;stroke:#]]..aa..[[;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..fixloc[1]..[[" cy="]]..fixloc[2]..[[" r="7" />
                            <text text-anchor="middle" alignment-baseline="bottom" x="]]..fixloc[1]..[[" y="]]..fixloc[2]-18 ..[[" style="fill-opacity:]]..R..[[;font-size:12px;fill:#]]..aa..[[">]]..svgPVPTitle..[[</text>
                            <text text-anchor="middle" alignment-baseline="top" x="]]..fixloc[1]..[[" y="]]..fixloc[2]+27 ..[[" style="fill-opacity:]]..R..[[;font-size:12px;fill:#]]..aa..[[">]]..V..[[</text>
                            </g>
                        ]]end;if szborder.szrad==500000 and szPoints~=nil then for a=1,#szPoints.points do fixloc=getScreenPos(szPoints.points[a])V=(szPoints.points[a]-L):len()if V>=1000000 then R=0.4 else R=0.4+0.6*(1000000-V)/1000000 end;Q=R;if fixloc[1]~=-1 then svgPip=svgPip..[[
                                    <g transform="translate(]]..fixloc[1]..[[,]]..fixloc[2]..[[) scale(]]..Q..[[) translate(-]]..fixloc[1]..[[,-]]..fixloc[2]..[[)">
                                    <circle style="stroke-opacity:]]..R..[[;stroke:#]]..aa..[[;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..fixloc[1]..[[" cy="]]..fixloc[2]..[[" r="7" />
                                    </g>
                                ]]end end elseif szborder.szrad>500000 then for a=1,4 do local ab=200000*a;local ac=-ab*szborder.y+szborder.center;ac=(ac-szborder.szsource):normalize()ac=szborder.szrad*ac+szborder.szsource;local ad=ab*szborder.y+szborder.center;ad=(ad-szborder.szsource):normalize()ad=szborder.szrad*ad+szborder.szsource;local ae=-ab*szborder.x+szborder.center;ae=(ae-szborder.szsource):normalize()ae=szborder.szrad*ae+szborder.szsource;local af=ab*szborder.x+szborder.center;af=(af-szborder.szsource):normalize()af=szborder.szrad*af+szborder.szsource;fixloc=getScreenPos(ac)if fixloc[1]~=-1 then svgPip=svgPip..[[
                                    <g transform="translate(]]..fixloc[1]..[[,]]..fixloc[2]..[[) scale(]]..Q..[[) translate(-]]..fixloc[1]..[[,-]]..fixloc[2]..[[)">
                                    <circle style="stroke-opacity:]]..R..[[;stroke:#]]..aa..[[;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..fixloc[1]..[[" cy="]]..fixloc[2]..[[" r="3" />
                                    </g>
                                ]]end;fixloc=getScreenPos(ad)if fixloc[1]~=-1 then svgPip=svgPip..[[
                                    <g transform="translate(]]..fixloc[1]..[[,]]..fixloc[2]..[[) scale(]]..Q..[[) translate(-]]..fixloc[1]..[[,-]]..fixloc[2]..[[)">
                                    <circle style="stroke-opacity:]]..R..[[;stroke:#]]..aa..[[;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..fixloc[1]..[[" cy="]]..fixloc[2]..[[" r="3" />
                                    </g>
                                ]]end;fixloc=getScreenPos(ae)if fixloc[1]~=-1 then svgPip=svgPip..[[
                                    <g transform="translate(]]..fixloc[1]..[[,]]..fixloc[2]..[[) scale(]]..Q..[[) translate(-]]..fixloc[1]..[[,-]]..fixloc[2]..[[)">
                                    <circle style="stroke-opacity:]]..R..[[;stroke:#]]..aa..[[;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..fixloc[1]..[[" cy="]]..fixloc[2]..[[" r="3" />
                                    </g>
                                ]]end;fixloc=getScreenPos(af)if fixloc[1]~=-1 then svgPip=svgPip..[[
                                    <g transform="translate(]]..fixloc[1]..[[,]]..fixloc[2]..[[) scale(]]..Q..[[) translate(-]]..fixloc[1]..[[,-]]..fixloc[2]..[[)">
                                    <circle style="stroke-opacity:]]..R..[[;stroke:#]]..aa..[[;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..fixloc[1]..[[" cy="]]..fixloc[2]..[[" r="3" />
                                    </g>
                                ]]end end end end;if showAtlasMarks then for ag,ah in pairs(bodies)do local N=vec3(ah.center)local O=N-L;local P=O:len()if(ah.id<400 or ah.id>=400 and P<400000 or ah.id==9999)and(showMarkRange==400 or showMarkRange*200000>P)then local Q=1-P/200000000+0.004;if Q>1 then Q=1 end;if Q<0.5 then Q=0.5 end;local R=Q-0.2;local S=''if P>100000 then P=P/200000;S=' SU'P=string.format("%.2f",P)..S elseif P>1000 then P=P/1000;S=' KM'P=string.format("%.1f",P)..S else S=' M'P=string.format("%.0f",P)..S end;if ah.systemId>0 then Q=0.4 end;local T=getScreenPos(N)if T[1]>950 and T[1]<970 and T[2]>530 and T[2]<550 then Q=1;R=0.9 end;local ai=string.upper(ah.name[1])if Q<0.5 then ai=[[]]P=[[]]end;if T[1]~=-1 then svgPip=svgPip..[[
                                    <g transform="translate(]]..T[1]..[[,]]..T[2]..[[) scale(]]..Q..[[) translate(-]]..T[1]..[[,-]]..T[2]..[[)">
                                    <circle style="stroke-opacity:]]..R..[[;stroke:#05998C;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..T[1]..[[" cy="]]..T[2]..[[" r="7" />
                                    <text text-anchor="middle" alignment-baseline="bottom" x="]]..T[1]..[[" y="]]..T[2]-18 ..[[" style="fill-opacity:]]..R..[[;font-size:12px;fill:#05998C">]]..ai..[[</text>
                                    <text text-anchor="middle" alignment-baseline="top" x="]]..T[1]..[[" y="]]..T[2]+27 ..[[" style="fill-opacity:]]..R..[[;font-size:12px;fill:#05998C">]]..P..[[</text>
                                    </g>
                                ]]end end end end;if pipepos and pipevis and(showPipeMark==1 or showPipeMark==2 and svgPVPTitle==[[SAFE ZONE]])then local N=pipepos;local P=closestpipe;local Q=1-P/200000000+0.004;if Q>1 then Q=1 end;if Q<0.5 then Q=0.5 end;local R=Q-0.2;local S=''if P>100000 then P=P/200000;S=' SU'P=string.format("%.2f",P)..S elseif P>1000 then P=P/1000;S=' KM'P=string.format("%.1f",P)..S else S=' M'P=string.format("%.0f",P)..S end;local T=getScreenPos(N)if T[1]>950 and T[1]<970 and T[2]>530 and T[2]<550 then Q=1;R=0.9 end;local ai=string.upper(pipe)if Q<0.5 then ai=[[]]P=[[]]end;if T[1]~=-1 then svgPip=svgPip..[[
                            <g transform="translate(]]..T[1]..[[,]]..T[2]..[[) scale(]]..Q..[[) translate(-]]..T[1]..[[,-]]..T[2]..[[)">
                            <circle style="stroke-opacity:]]..R..[[;stroke:#0599FF;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..T[1]..[[" cy="]]..T[2]..[[" r="7" />
                            <text text-anchor="middle" alignment-baseline="bottom" x="]]..T[1]..[[" y="]]..T[2]-18 ..[[" style="fill-opacity:]]..R..[[;font-size:12px;fill:#0599FF">]]..ai..[[</text>
                            <text text-anchor="middle" alignment-baseline="top" x="]]..T[1]..[[" y="]]..T[2]+27 ..[[" style="fill-opacity:]]..R..[[;font-size:12px;fill:#0599FF">]]..P..[[</text>
                            </g>
                        ]]end;for a=1,8 do local aj=pipepos+pipevec*50000*a;T=getScreenPos(aj)if T[1]~=-1 then svgPip=svgPip..[[
                                <circle style="stroke-opacity:]]..R..[[;stroke:#0599FF;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..T[1]..[[" cy="]]..T[2]..[[" r="3" />
                            ]]end;aj=pipepos-pipevec*50000*a;T=getScreenPos(aj)if T[1]~=-1 then svgPip=svgPip..[[
                                <circle style="stroke-opacity:]]..R..[[;stroke:#0599FF;fill:none;stroke-width:2;stroke-miterlimit:1;" cx="]]..T[1]..[[" cy="]]..T[2]..[[" r="3" />
                            ]]end end end;if tracking then for a=1,#track do local N=track[a].pos;local ak=a/#track;if ak<0.2 then ak=0.2 end;local L=vec3(self.construct.getWorldPosition())local O=N-L;local P=O:len()if P<1 then P=1 end;P=800000-P;if P>=1 then P=P/800000 else P=0 end;if P<0.2 then P=0.2 end;P=P*4;local T=getScreenPos(N)if T[1]~=-1 then svgPip=svgPip..[[
                                <rect style="stroke-opacity:]]..ak..[[;stroke:#FFD700;fill:none;stroke-width:2;stroke-miterlimit:1;" x="]]..T[1]-P/2 ..[[" y="]]..T[2]-P/2 ..[[" width="]]..P..[[" height="]]..P..[[" />
                            ]]end end end;local al=vec3(self.construct.getWorldOrientationForward())local am=vec3(self.construct.getWorldVelocity()):normalize()if M then pippos=10000*am+L else pippos=100000*am+L;rpippos=-100000*am+L;rpiploc=getScreenPos(rpippos)end;piploc=getScreenPos(pippos)if piploc[1]~=-1 and forwardV>1 then if M then svgPip=svgPip..[[
                            <circle style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" cx="]]..piploc[1]..[[" cy="]]..piploc[2]..[[" r="10" />
                        ]]else local an=am-am:project_on(worldCardinals[1])local ao=worldCardinals[4]:angle_between(an)*constants.rad2deg;local ap=am:angle_between(an)*constants.rad2deg;if an:dot(worldCardinals[2])<0 then ao=(360-ao)*10/10 end;if am:dot(worldCardinals[1])<0 then ap=ap*-1 end;if not pcall(function()ao=string.format("%01d",math.floor(ao))end)then ao=''end;if not pcall(function()ap=string.format("%01d",math.floor(ap))end)then ap=''end;svgPip=svgPip..[[
                            <circle style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" cx="]]..piploc[1]..[[" cy="]]..piploc[2]..[[" r="10" />
                            <circle style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" cx="]]..piploc[1]..[[" cy="]]..piploc[2]..[[" r="2" />
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..piploc[1]-10 ..[[,]]..piploc[2]-10 ..[[ ]]..piploc[1]-20 ..[[,]]..piploc[2]-20 ..[[ ]]..piploc[1]-50 ..[[,]]..piploc[2]-20 ..[["/>
                            <text text-anchor="end" alignment-baseline="bottom" x="]]..piploc[1]-25 ..[[" y="]]..piploc[2]-22 ..[[" style="font-size:10px;fill:#]]..hudColour..[[">]]..ao..[[ BRG</text>
                            <text text-anchor="end" alignment-baseline="bottom" x="]]..piploc[1]-25 ..[[" y="]]..piploc[2]-12 ..[[" style="font-size:10px;fill:#]]..hudColour..[[">]]..ap..[[ PCH</text>

                        ]]if brakeState then svgPip=svgPip..[[
                                <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..piploc[1]-10 ..[[,]]..piploc[2]-10 ..[[ ]]..piploc[1]-4 ..[[,]]..piploc[2]-4 ..[["/>
                                <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..piploc[1]+10 ..[[,]]..piploc[2]+10 ..[[ ]]..piploc[1]+4 ..[[,]]..piploc[2]+4 ..[["/>
                                <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..piploc[1]-10 ..[[,]]..piploc[2]+10 ..[[ ]]..piploc[1]-4 ..[[,]]..piploc[2]+4 ..[["/>
                                <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..piploc[1]+10 ..[[,]]..piploc[2]-10 ..[[ ]]..piploc[1]+4 ..[[,]]..piploc[2]-4 ..[["/>
                            ]]end end end;if not M then if rpiploc[1]~=-1 and forwardV>1 then svgPip=svgPip..[[
                            
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..rpiploc[1]-12 ..[[,]]..rpiploc[2]-12 ..[[ ]]..rpiploc[1]-5 ..[[,]]..rpiploc[2]-5 ..[["/>
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..rpiploc[1]+12 ..[[,]]..rpiploc[2]+12 ..[[ ]]..rpiploc[1]+5 ..[[,]]..rpiploc[2]+5 ..[["/>
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..rpiploc[1]-12 ..[[,]]..rpiploc[2]+12 ..[[ ]]..rpiploc[1]-5 ..[[,]]..rpiploc[2]+5 ..[["/>
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..rpiploc[1]+12 ..[[,]]..rpiploc[2]-12 ..[[ ]]..rpiploc[1]+5 ..[[,]]..rpiploc[2]-5 ..[["/>

                        ]]end end;if M then pippos=10000*al+L else pippos=100000*al+L end;piploc=getScreenPos(pippos)if shiftedState and self.system.getCameraMode()==2 and not M and not(piploc[1]>860 and piploc[1]<1060 and piploc[2]>440 and piploc[2]<640)then local aq=vec3(self.system.getCameraWorldForward())local an=aq-aq:project_on(worldCardinals[1])local ao=worldCardinals[4]:angle_between(an)*constants.rad2deg;local ap=aq:angle_between(an)*constants.rad2deg;if an:dot(worldCardinals[2])<0 then ao=(360-ao)*10/10 end;if aq:dot(worldCardinals[1])<0 then ap=ap*-1 end;rayangle=ao;raypitch=ap;svgPip=svgPip..[[
                        <text text-anchor="end" alignment-baseline="bottom" x="935" y="536" style="font-size:11px;fill:#ffffff">]]..string.format("%01d",math.floor(ao))..[[</text>
                        <text text-anchor="end" alignment-baseline="top" x="935" y="552" style="font-size:10px;fill:#ffffff">BRG</text>
                        <text text-anchor="start" alignment-baseline="bottom" x="985" y="536" style="font-size:11px;fill:#ffffff">]]..string.format("%01d",math.floor(ap))..[[</text>
                        <text text-anchor="start" alignment-baseline="bottom" x="985" y="552" style="font-size:10px;fill:#ffffff">PCH</text>
                    ]]end;if piploc[1]~=-1 and M then svgPip=svgPip..[[
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..piploc[1]..[[,]]..piploc[2]-10 ..[[ ]]..piploc[1]..[[,]]..piploc[2]-2 ..[["/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..piploc[1]..[[,]]..piploc[2]+10 ..[[ ]]..piploc[1]..[[,]]..piploc[2]+2 ..[["/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..piploc[1]-20 ..[[,]]..piploc[2]..[[ ]]..piploc[1]-2 ..[[,]]..piploc[2]..[["/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..piploc[1]+20 ..[[,]]..piploc[2]..[[ ]]..piploc[1]+2 ..[[,]]..piploc[2]..[["/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..piploc[1]-65 ..[[,]]..piploc[2]..[[ ]]..piploc[1]-42 ..[[,]]..piploc[2]..[["/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..piploc[1]+65 ..[[,]]..piploc[2]..[[ ]]..piploc[1]+42 ..[[,]]..piploc[2]..[["/>
                        <text text-anchor="end" alignment-baseline="bottom" x="]]..piploc[1]-45 ..[[" y="]]..piploc[2]-4 ..[[" style="font-size:11px;fill:#]]..hudColour..[[">]]..string.format("%01d",math.floor(hud_spd))..[[</text>
                        <text text-anchor="end" alignment-baseline="top" x="]]..piploc[1]-45 ..[[" y="]]..piploc[2]+12 ..[[" style="font-size:10px;fill:#]]..hudColour..[[">]]..speedUnit..[[</text>
                        <text text-anchor="start" alignment-baseline="bottom" x="]]..piploc[1]+45 ..[[" y="]]..piploc[2]-4 ..[[" style="font-size:11px;fill:#]]..hud_alt_col..[[">]]..string.format("%01d",math.floor(hud_alt))..[[</text>
                        <text text-anchor="start" alignment-baseline="bottom" x="]]..piploc[1]+45 ..[[" y="]]..piploc[2]+12 ..[[" style="font-size:10px;fill:#]]..hud_alt_col..[["> M</text>
                        <g style="opacity:1;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" transform="rotate(]]..-roll_hud..[[,]]..piploc[1]..[[,]]..piploc[2]..[[) translate(0 ]]..pitch_hud..[[)">
                            <polyline style="opacity:1;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..piploc[1]-40 ..[[,]]..piploc[2]..[[ ]]..piploc[1]-22 ..[[,]]..piploc[2]..[["/>
                            <polyline style="opacity:1;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..piploc[1]+40 ..[[,]]..piploc[2]..[[ ]]..piploc[1]+22 ..[[,]]..piploc[2]..[["/>
                        </g>
                    ]]if brakeState then svgPip=svgPip..[[
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..piploc[1]-10 ..[[,]]..piploc[2]-10 ..[[ ]]..piploc[1]-4 ..[[,]]..piploc[2]-4 ..[["/>
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..piploc[1]+10 ..[[,]]..piploc[2]+10 ..[[ ]]..piploc[1]+4 ..[[,]]..piploc[2]+4 ..[["/>
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..piploc[1]-10 ..[[,]]..piploc[2]+10 ..[[ ]]..piploc[1]-4 ..[[,]]..piploc[2]+4 ..[["/>
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:3;stroke-miterlimit:1;" points="]]..piploc[1]+10 ..[[,]]..piploc[2]-10 ..[[ ]]..piploc[1]+4 ..[[,]]..piploc[2]-4 ..[["/>
                        ]]end elseif piploc[1]~=-1 then svgPip=svgPip..[[
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..piploc[1]..[[,]]..piploc[2]-10 ..[[ ]]..piploc[1]..[[,]]..piploc[2]-2 ..[["/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..piploc[1]..[[,]]..piploc[2]+10 ..[[ ]]..piploc[1]..[[,]]..piploc[2]+2 ..[["/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..piploc[1]-10 ..[[,]]..piploc[2]..[[ ]]..piploc[1]-2 ..[[,]]..piploc[2]..[["/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..piploc[1]+10 ..[[,]]..piploc[2]..[[ ]]..piploc[1]+2 ..[[,]]..piploc[2]..[["/>
                    ]]if(shiftedState or toggleSpaceCompass and spaceCompass)and self.system.getCameraMode()==2 then local an=al-al:project_on(worldCardinals[1])local ao=worldCardinals[4]:angle_between(an)*constants.rad2deg;local ap=al:angle_between(an)*constants.rad2deg;if an:dot(worldCardinals[2])<0 then ao=(360-ao)*10/10 end;if al:dot(worldCardinals[1])<0 then ap=ap*-1 end;svgPip=svgPip..[[
                            <text text-anchor="end" alignment-baseline="bottom" x="]]..piploc[1]-25 ..[[" y="]]..piploc[2]-4 ..[[" style="font-size:11px;fill:#]]..hudColour..[[">]]..string.format("%01d",math.floor(ao))..[[</text>
                            <text text-anchor="end" alignment-baseline="top" x="]]..piploc[1]-25 ..[[" y="]]..piploc[2]+12 ..[[" style="font-size:10px;fill:#]]..hudColour..[[">BRG</text>
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..piploc[1]+25 ..[[" y="]]..piploc[2]-4 ..[[" style="font-size:11px;fill:#]]..hudColour..[[">]]..string.format("%01d",math.floor(ap))..[[</text>
                            <text text-anchor="start" alignment-baseline="bottom" x="]]..piploc[1]+25 ..[[" y="]]..piploc[2]+12 ..[[" style="font-size:10px;fill:#]]..hudColour..[[">PCH</text>
                        ]]end end elseif timerId=="updateHistory"then if shieldInstalled then local ar=shield.getShieldHitpoints()local as={shieldHist[2],shieldHist[3],shieldHist[4],shieldHist[5],shieldHist[6],shieldHist[7],shieldHist[8],shieldHist[9],ar}shieldHist=as end elseif timerId=="fuelRemain"then for a=1,#atmoTanks do eMass=self.core.getElementMassById(atmoTanks[a].ID)atmoTanks[a].tankFuel=(eMass-atmoTanks[a].tankMass)/atmoFuelWeight end;for a=1,#spaceTanks do eMass=self.core.getElementMassById(spaceTanks[a].ID)spaceTanks[a].tankFuel=(eMass-spaceTanks[a].tankMass)/spaceFuelWeight end;for a=1,#rocketTanks do eMass=self.core.getElementMassById(rocketTanks[a].ID)rocketTanks[a].tankFuel=(eMass-rocketTanks[a].tankMass)/rocketFuelWeight end;timeRemaining=1000;for a=1,#atmoTanks do local au=atmoTanks[a].lastFuel-atmoTanks[a].tankFuel;if au>0 then usedAtmoFuel=usedAtmoFuel+au;local J=atmoTanks[a].tankFuel/au*3;atmoTanks[a].tankTime=J;if J<timeRemaining then timeRemaining=J;lowestTankID=atmoTanks[a].ID end;if J<600 then atmoTanks[a].tankColour=hudSecColour else atmoTanks[a].tankColour=hudColour end else atmoTanks[a].tankColour=hudColour;atmoTanks[a].tankTime=0 end;atmoTanks[a].lastFuel=atmoTanks[a].tankFuel end;totalSpaceFuelRemaining=0;for a=1,#spaceTanks do local au=spaceTanks[a].lastFuel-spaceTanks[a].tankFuel;if au>0 then usedSpaceFuel=usedSpaceFuel+au;local J=spaceTanks[a].tankFuel/au*3;spaceTanks[a].tankTime=J;if J<timeRemaining then timeRemaining=J;lowestTankID=spaceTanks[a].ID end;if J<600 then spaceTanks[a].tankColour=hudSecColour else spaceTanks[a].tankColour=hudColour end else spaceTanks[a].tankColour=hudColour;spaceTanks[a].tankTime=0 end;spaceTanks[a].lastFuel=spaceTanks[a].tankFuel;totalSpaceFuelRemaining=totalSpaceFuelRemaining+spaceTanks[a].tankFuel end;for a=1,#rocketTanks do local au=rocketTanks[a].lastFuel-rocketTanks[a].tankFuel;if au>0 then usedRocketFuel=usedRocketFuel+au;local J=rocketTanks[a].tankFuel/au*3;rocketTanks[a].tankTime=J;if J<timeRemaining then timeRemaining=J;lowestTankID=rocketTanks[a].ID end;if J<600 then rocketTanks[a].tankColour=hudSecColour else rocketTanks[a].tankColour=hudColour end else rocketTanks[a].tankColour=hudColour;rocketTanks[a].tankTime=0 end;rocketTanks[a].lastFuel=rocketTanks[a].tankFuel end;DeltaV=maxKinematicSpaceFwd/totalMass*totalSpaceFuelRemaining/fuelBurnPerSecL;if speedUnit=="KMH"then DeltaV=DeltaV*3.6 end elseif timerId=="closest"then local av=self.construct.getWorldPosition()local aw=vec3(av)local ax=20e+30;closestpipe=20e+30;for ag,ah in pairs(bodies)do if ah.hasAtmosphere then for ay,az in pairs(bodies)do if az.hasAtmosphere and ay>ag then local aA=getPipeDistance(aw,vec3(ah.center),vec3(az.center))local aB=aA[1]if aB<closestpipe then closestpipe=aB;pipepos=aA[2]pipevec=aA[3]pipevis=aA[4]pipe=ah.name[1]..'-'..az.name[1]end end end end;local aC={x=ah.center[1],y=ah.center[2],z=ah.center[3]}local aD=(aC-aw):len2()if(not body or aD<ax)and ah.name[1]~="Space"and(ah.id<400 or ah.id>=400 and aD<30000)then body=ah;ax=aD end end;if body.isInSafeZone==false and(szPoints==nil or szPoints.id~=body.id)then local aE=vec3(body.center)local aF={}aF.id=body.id;aF.points={}for a=1,#worldCardinals do aF.points[#aF.points+1]=worldCardinals[a]*500000+aE end;szPoints=aF elseif body.isInSafeZone or(vec3(body.center)-aw):len()>20000000 then szPoints=nil end elseif timerId=="calibrate"then if at~=nil then atmoFuelWeight=at.getItemsMass()/at.getItemsVolume()local aG=at.getMaxVolume()local aH=at.getItemId()local aI=self.system.getItem(aH)["size"]if aI=="xs"then AtmoFuelTankHandling=(aG/100-1)/.2 elseif aI=="s"then AtmoFuelTankHandling=(aG/400-1)/.2 elseif aI=="m"then AtmoFuelTankHandling=(aG/1600-1)/.2 elseif aI=="l"then AtmoFuelTankHandling=(aG/12800-1)/.2 end end;if st~=nil then spaceFuelWeight=st.getItemsMass()/st.getItemsVolume()local aG=st.getMaxVolume()local aH=st.getItemId()local aI=self.system.getItem(aH)["size"]if aI=="xs"then SpaceFuelTankHandling=(aG/100-1)/.2 elseif aI=="s"then SpaceFuelTankHandling=(aG/400-1)/.2 elseif aI=="m"then SpaceFuelTankHandling=(aG/1600-1)/.2 elseif aI=="l"then SpaceFuelTankHandling=(aG/12800-1)/.2 end end;if rt~=nil then rocketFuelWeight=rt.getItemsMass()/rt.getItemsVolume()local aG=rt.getMaxVolume()local aH=rt.getItemId()local aI=self.system.getItem(aH)["size"]if aI=="xs"then RocketFuelTankHandling=(aG/400-1)/.1 elseif aI=="s"then RocketFuelTankHandling=(aG/800-1)/.1 elseif aI=="m"then RocketFuelTankHandling=(aG/6400-1)/.1 elseif aI=="l"then RocketFuelTankHandling=(aG/50000-1)/.1 end end;maxKinematicSpaceFwdCombat=self.construct.getMaxThrustAlongAxis("fueled space_engine longitudinal not_ground thrust combat",self.construct.getOrientationForward())[3]maxKinematicSpaceFwd=self.construct.getMaxThrustAlongAxis("fueled space_engine longitudinal not_ground thrust",self.construct.getOrientationForward())[3]maxKinematicSpaceFwdBoost=self.construct.getMaxThrustAlongAxis("rocket_engine",self.construct.getOrientationForward())[3]if maxKinematicSpaceFwdCombat>0 then maxKinematicSpaceFwdCruise=maxKinematicSpaceFwd-maxKinematicSpaceFwdCombat;combatEngines=true else maxKinematicSpaceFwdCruise=maxKinematicSpaceFwd end;self.unit.setTimer('calibrate2',1.5)self.unit.stopTimer('calibrate')elseif timerId=="calibrate2"then buildTanks()self.unit.stopTimer('calibrate2')calibrated=true elseif timerId=="loadtrack"then local aJ=db.getStringValue("track")track=json.decode(aJ)for a=1,#track do track[a].pos=vec3(track[a].pos.x,track[a].pos.y,track[a].pos.z)end;self.unit.stopTimer('loadtrack')elseif timerId=="track"then local aK={}aK.pos=vec3(self.construct.getWorldPosition())aK.time=self.system.getUtcTime()if vec3(self.construct.getVelocity()):len()>=20 then if#track==100 then for a=2,#track do track[a-1]=track[a]end;track[100]=aK else track[#track+1]=aK end end end
        end

        function FOX_Flight_Local.onFlush(self)
            if brakeState==true then brakeInput=1 else brakeInput=0 end;local a=0.8;local b=1;local c=1.5;local d=4;local e=pitchInput+self.system.getControlDeviceForwardInput()-self.system.getAxisValue(1)local f=rollInput+self.system.getControlDeviceYawInput()-self.system.getAxisValue(2)local g=yawInput-self.system.getControlDeviceLeftRightInput()+self.system.getAxisValue(0)local h=brakeInput;local i=vec3(self.core.getWorldGravity())if self.antigrav then if self.antigrav.isActive()then i=vec3(self.core.getWorldVertical())end end;local j=vec3(self.construct.getWorldOrientationUp())local k=vec3(self.construct.getWorldOrientationForward())local l=vec3(self.construct.getWorldOrientationRight())local m=vec3(self.construct.getWorldVelocity())local n=vec3(self.construct.getWorldVelocity()):normalize()local o=getRoll(i,k,l)local p=math.abs(o)local q=utils.sign(o)local r=vec3(self.construct.getWorldAngularVelocity())local s=e*a*l+f*c*k+g*b*j;local t=a;local u=b;local v=c;if laltState==false then if autoMode=="level"or(self.unit.getAtmosphereDensity()>0 or self.unit.getAtmosphereDensity()==0 and surfaceDistance~=-1 and surfaceDistance<10 and surfaceEngineInstalled)and vec3(self.construct.getWorldVelocity()):len()<15 and self.Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal)==0 and f==0 and e==0 and autoLevelLowSpeed and roidTrack==0 and autoMode==false and dampen then if rollPID==nil then rollPID=pid.new(.04,0,.4)end;if pitchPID==nil then pitchPID=pid.new(.04,0,.4)end;rollPID:inject(0-roll_hud)local w=rollPID:get()pitchPID:inject(0-pitch_hud)local x=pitchPID:get()s=s+x*l+w*k elseif autoMode=="radialout"then s=i:cross(k)+e*t*l+f*v*k+g*u*j elseif autoMode=="radialin"then s=-i:cross(k)+e*t*l+f*v*k+g*u*j elseif autoMode=="retro"then local n=vec3(self.construct.getWorldVelocity()):normalize()s=n:cross(k)+e*t*l+f*v*k+g*u*j elseif autoMode=="pro"then local n=vec3(self.construct.getWorldVelocity()):normalize()s=-n:cross(k)+e*t*l+f*v*k+g*u*j elseif autoMode=="tokyoleft"then local n=vec3(self.construct.getWorldVelocity()):normalize()s=-n:cross(l)+e*t*l+f*v*k+g*u*j elseif autoMode=="tokyoright"then local n=vec3(self.construct.getWorldVelocity()):normalize()s=n:cross(l)+e*t*l+f*v*k+g*u*j elseif autoMode=="WP"then if self.unit.getAtmosphereDensity()>0 then local y=vec3(self.construct.getWorldPosition())local z=alignmentTarget-y;local A=-vec3(self.core.getWorldVertical())local B=vec3(self.construct.getWorldOrientationForward())B=B-B:project_on(A)z=z-z:project_on(A)local C=z:cross(A)local D=z:angle_between(B)if B:dot(C)<0.000001 then D=D*-1 end;if rollPID==nil then rollPID=pid.new(.04,0,.4)end;if pitchPID==nil then pitchPID=pid.new(.04,0,.4)end;if yawPID==nil then yawPID=pid.new(.04,0,.4)end;rollPID:inject(0-roll_hud)local w=rollPID:get()pitchPID:inject(0-pitch_hud)local x=pitchPID:get()yawPID:inject(0-D)local E=yawPID:get()s=s+x*l+D*j+w*k else local y=vec3(self.construct.getWorldPosition())local F=alignmentTarget;local G=(alignmentTarget-y):len()if self.construct.getMaxSpeed()-vec3(self.construct.getVelocity()):len()<1 then combatTht=0;self.Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if G-20000<brake_distance then combatTht=0;self.Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)brakeState=true;brakeLocked=true;h=1 end;local H=(F-y):normalize()local n=vec3(self.construct.getWorldVelocity())if n:len()>50 and spaceThrust>10 then local function I(J,K,L)K=K:project_on_plane(J)L=L:project_on_plane(J)return math.atan(K:cross(L):dot(J),K:dot(L))end;if yPID==nil then yPID=pid.new(0.02,0,0.2)end;if pPID==nil then pPID=pid.new(0.02,0,0.2)end;local M=utils.clamp(math.deg(I(j,n:normalize(),H))*n:len()/500,-90,90)local N=utils.clamp(math.deg(I(l,n:normalize(),H))*n:len()/500,-90,90)local O=-math.deg(I(j,k,n:normalize()))local P=-math.deg(I(l,k,n:normalize()))if math.abs(M)<5 and math.abs(N)<5 and not travelMode then travelPoint=alignmentTarget;travelMode=true end;if math.abs(M)<20 and math.abs(N)<20 then M=M*2;N=N*2 end;if math.abs(M)<2 and math.abs(N)<2 then M=M*2;N=N*2 end;pPID:inject(N-P)yPID:inject(M-O)local Q=utils.clamp(pPID:get(),-1,1)local R=utils.clamp(yPID:get(),-1,1)e=utils.clamp(e+Q,-1,1)g=utils.clamp(g+R,-1,1)s=e*a*l+f*c*k+g*b*j else s=-H:cross(k)+e*t*l+f*v*k+g*u*j end end elseif roidTrack>0 then local y=vec3(self.construct.getWorldPosition())local F=nextRoidPos;local G=(nextRoidPos-y):len()if self.construct.getMaxSpeed()-vec3(self.construct.getVelocity()):len()<1 then combatTht=0;self.Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)end;if G-2000<brake_distance then combatTht=0;self.Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)brakeState=true;brakeLocked=true;h=1 elseif vec3(self.construct.getVelocity()):len()<1000 and G>10000 then self.Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,100)if combatEngines then combatTht=100 end;brakeState=false;brakeLocked=false;h=0 end;local H=(F-y):normalize()local n=vec3(self.construct.getWorldVelocity())if n:len()>50 and spaceThrust>10 then local function I(J,K,L)K=K:project_on_plane(J)L=L:project_on_plane(J)return math.atan(K:cross(L):dot(J),K:dot(L))end;if yPID==nil then yPID=pid.new(0.02,0,0.2)end;if pPID==nil then pPID=pid.new(0.02,0,0.2)end;local M=utils.clamp(math.deg(I(j,n:normalize(),H))*n:len()/500,-90,90)local N=utils.clamp(math.deg(I(l,n:normalize(),H))*n:len()/500,-90,90)local O=-math.deg(I(j,k,n:normalize()))local P=-math.deg(I(l,k,n:normalize()))if math.abs(M)<5 and math.abs(N)<5 and not travelMode then travelPoint=nextRoidPos;travelMode=true end;if math.abs(M)<20 and math.abs(N)<20 then M=M*2;N=N*2 end;if math.abs(M)<2 and math.abs(N)<2 then M=M*2;N=N*2 end;pPID:inject(N-P)yPID:inject(M-O)local Q=utils.clamp(pPID:get(),-1,1)local R=utils.clamp(yPID:get(),-1,1)e=utils.clamp(e+Q,-1,1)g=utils.clamp(g+R,-1,1)s=e*a*l+f*c*k+g*b*j else s=-H:cross(k)+e*t*l+f*v*k+g*u*j end elseif turntoBearing~=nil and turntoPitch~=nil then local S=360-turntoBearing+90;if S>360 then S=S-360 end;S=S*constants.deg2rad;if turntoPitch<0 then turntoPitch=360+turntoPitch end;local T=turntoPitch*constants.deg2rad;local U=vec3(math.cos(S)*math.cos(T),math.sin(S)*math.cos(T),math.sin(T))s=-U:cross(k)+e*t*l+f*v*k+g*u*j end end;local V=1;local W=0;local X=1;local Y=false;if g~=0 or e~=0 or f~=0 or dampen then angularAcceleration=d*(s-r)Y=true elseif autoMode=="level"and not dampen then local Z=r:dot(j)s=s+Z*j;angularAcceleration=d*(s-r)Y=true elseif autoMode~=false and not dampen then angularAcceleration=d*(s-r)else local _=r:dot(k)local Z=r:dot(j)local a0=r:dot(l)if math.abs(_)>0.001 then s=vec3(0,0,0)-_*k;Y=true else s=vec3(0,0,0)end;angularAcceleration=d*s end;local a1=vec3(self.construct.getWorldAirFrictionAngularAcceleration())angularAcceleration=angularAcceleration-a1;local a2=vec3(0.,0.,0.)self.unit.setEngineCommand('torque',{a2:unpack()},{angularAcceleration:unpack()},W,1,'torque','','',X)local a3=''local a4=vec3()local a5=false;local a6='rocket_engine'local a7=self.unit.getEngineThrust(a6)[1]~=0;if a7 and self.construct.getMaxSpeed()>bestRocketSpeed then bestRocketSpeed=self.construct.getMaxSpeed()end;if rocketsEngaged and not firingRockets then firingRockets=true;rocketMatch=true;self.unit.setEngineThrust(a6,1)firstRocketCommand=self.system.getUtcTime()elseif not rocketsEngaged and firingRockets then firingRockets=false;self.unit.setEngineThrust(a6,0)end;if rocketsEngaged and firingRockets and a7==rocketMatch and self.unit.getAtmosphereDensity()==0 and self.system.getUtcTime()-firstRocketCommand>2 then local a8=1;if rocketMatch and bestRocketSpeed>0 and bestRocketSpeed-vec3(self.construct.getVelocity()):len()<100 then a8=0;rocketMatch=false else rocketMatch=true end;self.unit.setEngineThrust(a6,a8)end;local a9='thrust analog longitudinal'local aa=self.Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if aa==axisCommandType.byThrottle then local ab=self.Nav.axisCommandManager:composeAxisAccelerationFromThrottle(a9,axisCommandId.longitudinal)if self.unit.getAtmosphereDensity()>0 then self.Nav:setEngineForceCommand(a9,ab,V)end;if self.unit.getAtmosphereDensity()<10 then a9='fueled space_engine longitudinal not_ground thrust'ab=getForwardSpaceAccelerationFromThrottle(self.Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal)*100,false)local angularAcceleration=vec3(0.,0.,0.)if combatEngines and spaceThrust>0 and not goButton then local ac='fueled space_engine longitudinal not_ground thrust combat'local ad=self.unit.getEngineThrust(ac)if combatTht<=0 and ad[1]==0 then self.unit.setEngineCommand(a9,{ab:unpack()},{angularAcceleration:unpack()},V,1,'','','',1)ab=getForwardSpaceAccelerationFromThrottle(0,true)self.unit.setEngineCommand(ac,{ab:unpack()},{angularAcceleration:unpack()},V,1,'','','',1)else ab=getForwardSpaceAccelerationFromThrottle(combatTht,true)self.unit.setEngineCommand(ac,{ab:unpack()},{angularAcceleration:unpack()},V,1,'','','',1)end else goButton=false;self.unit.setEngineCommand(a9,{ab:unpack()},{angularAcceleration:unpack()},V,1,'','','',1)end end elseif aa==axisCommandType.byTargetSpeed then local ab=self.Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)a3=a3 ..' , '..a9;a4=a4+ab;if self.Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or-self.Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-self.Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then a5=true end end;local ae='thrust analog lateral'local af=self.Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if af==axisCommandType.byThrottle then local ag=self.Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ae,axisCommandId.lateral)self.Nav:setEngineForceCommand(ae,ag,V)elseif af==axisCommandType.byTargetSpeed then local ah=self.Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)a3=a3 ..' , '..ae;a4=a4+ah end;surfaceDistance=surfaceEngine.getDistance()if surfaceDistance==-1 or surfaceDistance>0.001 then lastGoodSurfaceReading=surfaceDistance;sinceLastGood=0 else surfaceDistance=lastGoodSurfaceReading;sinceLastGood=sinceLastGood+1 end;if sinceLastGood>20 then underWater=true else underWater=false end;local ai='thrust analog vertical'local aj=self.Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if aj==axisCommandType.byThrottle then local ak=self.Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ai,axisCommandId.vertical)local al=ak;local am=self.Nav.axisCommandManager:getThrottleCommand(axisCommandId.vertical)local an=self.Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal)local ao=self.Nav.axisCommandManager:getThrottleCommand(axisCommandId.lateral)if surfaceDistance<0 and hoverHeight==0 and am==0 and sinceLastGood<20 and Landing then al=vec3()elseif am==0 and an==0 and dampen and(self.unit.getAtmosphereDensity()~=0 or self.unit.getAtmosphereDensity()==0 and surfaceEngineInstalled and surfaceDistance>0)then local ap=hoverHeight;local aq=vec3(self.construct.getWorldOrientationUp())local ar=vec3(self.core.getWorldGravity())local as=ar:normalize()*-1;local at=as:cross(l)local au=as:cross(at)local av=-ar:len()local aw=vec3(self.construct.getWorldVelocity())local ax=aw:dot(as)local ay=aw:dot(au)local az=aw:dot(at)local aA=0;if underWater then aA=ap elseif Landing then aA=-0.3-15*surfaceDistance/50 end;if hPID==nil then hPID=pid.new(10,0,10)end;hPID:inject(aA-ax)if sPID==nil then sPID=pid.new(10,0,10)end;sPID:inject(0-ay)if dPID==nil then dPID=pid.new(10,0,10)end;dPID:inject(0-az)local aB=hPID:get()local aC=sPID:get()local aD=dPID:get()local aE=(aB-av)*aq;al=vec3(self.core.getWorldGravity())*-1+aB*as+aC*au+aD*at elseif am==0 and ao==0 and an~=0 and dampen and self.unit.getAtmosphereDensity()~=0 then local aw=vec3(self.construct.getWorldVelocity()):normalize()local aF=aw:dot(j)local az=aw:dot(l)local aG=vec3()if i:normalize():dot(k)<i:normalize():dot(aw)then aG=vec3(self.core.getWorldGravity())*-1 end;if hcPID==nil then hcPID=pid.new(0.05,0,0.5)end;hcPID:inject(0-aF)if dcPID==nil then dcPID=pid.new(0.05,0,0.5)end;dcPID:inject(0-az)local aH=hcPID:get()local aI=dcPID:get()al=al+aG+aH*j+aI*l;ai=ai..', thrust analog lateral'end;if am~=0 then self.Nav:setEngineForceCommand('brake',vec3(),V)self.Nav:setEngineForceCommand(ai,al,V,'airfoil','ground','',X)else self.Nav:setEngineForceCommand(ai,vec3(),V)self.Nav:setEngineForceCommand('airfoil vertical',al,V,'airfoil','','',X)if an==0 and ao==0 and vec3(self.construct.getWorldVelocity()):len()<10 and dampen then local angularAcceleration=vec3(0.,0.,0.)self.unit.setEngineCommand('analog thrust vertical, longitudinal analog thrust atmospheric_engine, brake',{al:unpack()},{angularAcceleration:unpack()},W,1,'ground','','',X)else self.Nav:setEngineForceCommand('brake',vec3(),V)self.Nav:setEngineForceCommand(ai,al,V,'ground','vertical','',X)end end elseif aj==axisCommandType.byTargetSpeed then local aJ=self.Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)a3=a3 ..' , '..ai;a4=a4+aJ end;if h~=0 then local aK=-h*(3*m+1*n)self.Nav:setEngineForceCommand('brake',aK)end;if a4:len()>constants.epsilon then if brakeInput~=0 or a5 or math.abs(n:dot(k))<0.95 then a3=a3 ..', brake'else self.Nav:setEngineForceCommand('brake',vec3(),V)end;self.Nav:setEngineForceCommand(a3,a4,W,'','','',X)end
        end

        function FOX_Flight_Local.onUpdate(self)
            self.Nav:update()totalMass=self.construct.getMass()local a=self.construct.getDockedConstructs()for b=1,#a do totalMass=totalMass+self.construct.getDockedConstructMass(a[b])end;local d=self.construct.getPlayersOnBoard()local e=0;for b=1,#d do e=e+self.construct.getBoardedPlayerMass(d[b])end;if e>20000 then totalMass=totalMass+e end;self.Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].mass=totalMass;local f=self.unit.getWidgetData()maxBrakeForce=tonumber(f:match('"maxBrake":([0-9]*)'))spaceThrust=tonumber(f:match('"spaceThrust":([0-9]*)'))if spaceThrust==nil then spaceThrust=0 end;local g=self.system.getAxisValue(3)local h=self.system.getAxisValue(4)local i=self.system.getAxisValue(5)if g~=0 then self.Nav.axisCommandManager:setThrottleCommand(axisCommandId.lateral,g)end;if h~=0 then self.Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical,h)end;if i~=0 then self.Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,i)end;warnFlashCount=warnFlashCount-1;if warnFlashCount<=0 then warnFlashCount=15;if warnFlashColour==hudColour then warnFlashColour=hudSecColour else warnFlashColour=hudColour end end;if shieldInstalled then local j={shieldInstalled=1,shieldState=shield.isActive(),shieldHP=shield.getShieldHitpoints(),shieldMaxHP=shield.getMaxShieldHitpoints(),shieldIsVenting=shield.isVenting(),shieldVentingCooldown=shield.getVentingCooldown(),shieldVentingMaxCooldown=shield.getVentingMaxCooldown(),shieldResistances=shield.getResistances(),shieldResistancesCooldown=shield.getResistancesCooldown(),shieldResistancesMaxCooldown=shield.getResistancesMaxCooldown(),shieldResistancesPool=shield.getResistancesPool(),shieldResistancesRemaining=shield.getResistancesRemaining(),shieldStressRatio=shield.getStressRatioRaw(),shipName=self.construct.getName(),AtmoFuelTankHandling=AtmoFuelTankHandling,SpaceFuelTankHandling=SpaceFuelTankHandling,RocketFuelTankHandling=RocketFuelTankHandling,FuelTankOptimization=FuelTankOptimization,ContainerOptimization=ContainerOptimization,SpaceEngineFuelEfficiency=SpaceEngineFuelEfficiency,hudColour=hudColour,hudSecColour=hudSecColour,hudTerColour=hudTerColour,lastTime=self.system.getArkTime()}local barColour=hudColour;sf=j.shieldHP/j.shieldMaxHP;if sf<=0.75 then if not playedShield75 then playedShield75=true;if self.system.isPlayingSound()then self.system.stopSound()end;self.system.playSound('fox/shield75.mp3')end;if sf<=0.5 then barColour=hudSecColour;if not playedShield50 then playedShield50=true;if self.system.isPlayingSound()then self.system.stopSound()end;self.system.playSound('fox/shield50.mp3')end;if sf<=0.25 then if not playedShield25 then playedShield25=true;if self.system.isPlayingSound()then self.system.stopSound()end;self.system.playSound('fox/shield25.mp3')end else playedShield25=false end else playedShield50=false end else playedShield75=false end;if j.shieldState then shield_status="ONLINE"barAlpha=0.8 else shield_status="OFFLINE"barAlpha=0.4 end;if j.shieldIsVenting then shield_status=shield_status.." - VENTING"else if j.shieldVentingCooldown>0 then shield_status=shield_status.." - VENT "..tostring(math.ceil(j.shieldVentingCooldown))end end;local k=j.shieldResistancesPool*100+10;local l=j.shieldResistances[1]*100+10;local m=j.shieldResistances[2]*100+10;local n=j.shieldResistances[3]*100+10;local o=j.shieldResistances[4]*100+10;local p=j.shieldStressRatio[1]local q=j.shieldStressRatio[2]local r=j.shieldStressRatio[3]local s=j.shieldStressRatio[4]svgShield=[[]]if gunner then local t={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}local u=20;local v=[[]]for b=#dps,2,-1 do local w,x=0,0;w=dps[b]if dps[b-5]==nil then x=0 else x=dps[b-5]end;adps=(w-x)/18;t[u]=adps;u=u-1;if u<1 then break end end;local y=0;for b=1,20 do local z=t[b]/maxdps;if z>1 then z=1 end;local A=1070+10*(b-1)local B=200-90*z;y=y+t[b]v=v..A..[[,]]..B..[[ ]]svgShield=svgShield..[[
                            <circle style="fill-opacity:0.8;fill:#]]..hudSecColour..[[;stroke:none;stroke-width:1;stroke-miterlimit:1;" cx="]]..A..[[" cy="]]..B..[[" r="1"/>
                        ]]end;if y>0 then y=y/20;local C=y/maxdps;if C>1 then C=1 end;svgShield=svgShield..[[
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..v..[[" />
                            <polyline style="opacity:0.6;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:1;stroke-dasharray:1 3;" points="1070,]]..200-90*C..[[ 1260,]]..200-90*C..[[" />
                            <text text-anchor="end" alignment-baseline="top" x="1065" y="]]..200-90*C..[[" style="fill-opacity:0.7;font-size:10px;fill:#]]..hudSecColour..[[">]]..string.format("%.1f",y/1000)..[[K</text>
                        ]]if t[20]>0 then local z=t[20]/maxdps;if z>1 then z=1 end;svgShield=svgShield..[[
                                <text text-anchor="start" alignment-baseline="top" x="1265" y="]]..200-90*z..[[" style="font-size:10px;fill:#]]..hudSecColour..[[">]]..string.format("%.1f",t[20]/1000)..[[K DPS</text>
                            ]]end end end;local D=hudColour;if showMismatchMsg>0 then showMismatchMsg=showMismatchMsg-1;D=warnFlashColour;svgShield=svgShield..[[
                        <text text-anchor="middle" alignment-baseline="bottom" x="95" y="220" style="font-size:14px;fill:#]]..warnFlashColour..[[">MISMATCH</text>
                    ]]end;svgShield=svgShieldBase..svgShield..[[

                    <text text-anchor="end" alignment-baseline="top" x="140" y="10" style="font-size:10px;fill:#]]..hudColour..[[">]]..math.floor(100*sf)..[[%</text>
                    <polygon style="opacity:]]..barAlpha..[[;stroke:none;fill:#]]..barColour..[[;stroke-width:1;stroke-miterlimit:1;" points="140,104 50,104 50,]]..104-90*shieldHist[1]/j.shieldMaxHP..[[ 60,]]..104-90*shieldHist[2]/j.shieldMaxHP..[[ 70,]]..104-90*shieldHist[3]/j.shieldMaxHP..[[ 80,]]..104-90*shieldHist[4]/j.shieldMaxHP..[[ 90,]]..104-90*shieldHist[5]/j.shieldMaxHP..[[ 100,]]..104-90*shieldHist[6]/j.shieldMaxHP..[[ 110,]]..104-90*shieldHist[7]/j.shieldMaxHP..[[ 120,]]..104-90*shieldHist[8]/j.shieldMaxHP..[[ 130,]]..104-90*shieldHist[9]/j.shieldMaxHP..[[ 140,]]..104-90*sf..[[" />
                    <text text-anchor="start" alignment-baseline="bottom" x="150" y="104" style="font-size:10px;fill:#]]..hudColour..[[" transform="rotate(-90,150,104)">]]..shield_status..[[</text>
                    <text text-anchor="middle" alignment-baseline="top" x="95" y="115" style="font-size:10px;fill:#]]..D..[[">AM - ]]..tostring(math.ceil(l))..[[%</text>
                    <text text-anchor="middle" alignment-baseline="top" x="57" y="150" style="font-size:10px;fill:#]]..D..[[" transform="rotate(-90,57,150)">EM - ]]..tostring(math.ceil(m))..[[%</text>
                    <text text-anchor="middle" alignment-baseline="bottom" x="95" y="200" style="font-size:10px;fill:#]]..D..[[">KN - ]]..tostring(math.ceil(n))..[[%</text>
                    <text text-anchor="middle" alignment-baseline="top" x="140" y="150" style="font-size:10px;fill:#]]..D..[[" transform="rotate(-90,140,150)">TH - ]]..tostring(math.ceil(o))..[[%</text>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:5;stroke-miterlimit:1;" points="95,154 95,]]..154-34*p..[["/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:5;stroke-miterlimit:1;" points="95,154 ]]..95+34*s..[[,154"/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:5;stroke-miterlimit:1;" points="95,154 95,]]..154+34*r..[["/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:5;stroke-miterlimit:1;" points="95,154 ]]..95-34*q..[[,154"/>
                    <polygon style="stroke-opacity:0.6;fill-opacity:0.4;fill:#]]..hudColour..[[;stroke:#]]..D..[[;stroke-width:1;stroke-miterlimit:1;" points="95,]]..154-34*l/k..[[ ]]..95+34*o/k..[[,154 95,]]..154+34*n/k..[[ ]]..95-34*m/k..[[,154"/>
                ]]else svgShield=[[]]end;retrobrake=''ccs=maxccs-self.core.getCoreStress()ccsf=ccs/maxccs;if ccsf<0.5 then barColour=hudSecColour else barColour=hudColour end;svgCCS=[[
                <text text-anchor="start" alignment-baseline="top" x="8" y="10"  style="font-size:10px;fill:#]]..hudColour..[[">CCS</text>
                <text text-anchor="middle" alignment-baseline="bottom" x="18" y="200"  style="font-size:10px;fill:#]]..hudColour..[[">]]..math.floor(100*ccsf)..[[%</text>
                <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="11,14 11,190"/>
                <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="25,14 25,190"/>
                <polyline style="opacity:0.8;fill:none;stroke:#]]..barColour..[[;stroke-width:6;stroke-miterlimit:1;" points="18,190 18,]]..190-176*ccsf..[["/>
                <text text-anchor="middle" alignment-baseline="top" x="8" y="50" style="font-size:10px;fill:#]]..hudColour..[[" transform="rotate(-90,8,50)">]]..string.format("%.1f",ccs/1000000)..[[M / ]]..string.format("%.1f",maxccs/1000000)..[[M</text>    
            ]]if self.warpdrive~=nil then if self.warpdrive.getWidgetData():find('"destination":"Unknown"')then self.warpdrive.hideWidget()else self.warpdrive.showWidget()end end;f_pitch_roll()local E=self.construct.getWorldVelocity()local F=vec3(E)forwardV=F:len()local G=0;local H='S'local I=0;local J='M'if forwardV>0 then local K=maxBrakeForce;if maxBrakeForce==nil then K=0.00001 end;if autoMode=="retro"and laltState==false then K=K+self.Nav:maxForceForward()retrobrake='BURN+'end;local L=K*-1/totalMass;local M=0;local N=c*math.asin(forwardV/c)local O=c2*math.cos(N/c)/L;local P=(c*math.asin(0/c)-N)/L;local Q=O-c2*math.cos((L*P+N)/c)/L;I=I+Q;M=M+P;local R=math.floor(M/60)M=M-60*R;local S=math.floor(M+0.5)local T='00'..S;local U='00'..R;if R>0 then G=string.format("%01d",R)..':'..string.format("%02d",S)H=[[M:S]]else if S<1 then S=1 end;G=string.format("%01d",S)H=[[S]]end;brake_distance=I;if I>100000 then I=I/200000;J='SU'svgBrakeDistance=string.format("%.2f",I)elseif I>1000 then I=I/1000;J='KM'svgBrakeDistance=string.format("%.1f",I)else J='M'svgBrakeDistance=string.format("%.0f",I)end;svgBrakeTime=[[]]..G..[[ M:S]]end;local F=vec3(self.construct.getWorldVelocity())local V=vec3(self.core.getWorldGravity())local W=math.floor(F:dot(-V:normalize()))local X=self.core.getAltitude()local Y=self.construct.getWorldPosition()local Z=vec3(Y)local _={x=body.center[1],y=body.center[2],z=body.center[3]}if pipe~=''then svgPipeName=pipe;if closestpipe>100000 then svgPipeDist=string.format("%.1f",closestpipe/200000)svgPipeDist_unit='SU'elseif closestpipe>1000 then svgPipeDist=string.format("%.1f",closestpipe/1000)svgPipeDist_unit='KM'else svgPipeDist_unit='M'svgPipeDist=string.format("%.0f",closestpipe)end end;svgPVPTitle=[[PVP SPACE]]local a0=math.abs((Z-szcenter):len()-safeRadius)local a1=math.abs((Z-_):len()-szradius)local a2=0;local a3=0;local a4=0;local a5=''local a6=nil;if self.unit.getAtmosphereDensity()==0 then if(Z-szcenter):len()<safeRadius then a6=(Z-szcenter):normalize()a2=a0;a3=szcenter;a4=safeRadius else if(Z-_):len()<szradius then a6=(Z-_):normalize()a2=a1;a3=_;a4=szradius else svgPVPTitle=[[SAFE ZONE]]if a0<a1 then a6=(szcenter-Z):normalize()a2=a0;a3=szcenter;a4=safeRadius else a6=(_-Z):normalize()a2=a1;a3=_;a4=szradius end end end;if a2<=20000000 then local a7={}local a8=vec3(0,0,1)local a9=a6:cross(a8):normalize()local aa=a6:cross(a9):normalize()szborder=a2*a6+Z;a7.center=szborder;a7.x=a9;a7.y=aa;a7.szsource=a3;a7.szrad=a4;szborder=a7 else szborder=nil end else szborder=nil end;local ab=(Z-_):len()-(body.radius+body.surfaceAverageAltitude)local ac=''local ad=body.name[1]local ae=body.hasAtmosphere;local af=0;local ag=''if ae then rawaaltitude=(Z-_):len()-body.atmosphereRadius;if rawaaltitude>100000 then af=rawaaltitude/200000;af=string.format("%.1f",af)ag='SU'elseif rawaaltitude>1000 then af=rawaaltitude/1000;af=string.format("%.1f",af)ag='KM'else ag='M'af=string.format("%.0f",rawaaltitude)end else rawaaltitude=ab end;if X==0 then X=ab end;if ab>100000 then ab=ab/200000;ab=string.format("%.1f",ab)ac='SU'elseif ab>1000 then ab=ab/1000;ab=string.format("%.1f",ab)ac='KM'else ac='M'ab=string.format("%.0f",ab)end;if a2>100000 then a2=a2/200000;a2=string.format("%.1f",a2)a5='SU'elseif a2>1000 then a2=a2/1000;a2=string.format("%.1f",a2)a5='KM'else a5='M'a2=string.format("%.0f",a2)end;if X<0 then hud_alt=X;hud_alt_t=math.floor(X/1000)+1;hud_alt_h=math.abs(math.floor(X-hud_alt_t*1000))hud_alt_col=hudSecColour else hud_alt=math.floor(X)hud_alt_t=math.floor(X/1000)hud_alt_h=math.floor(X-hud_alt_t*1000)hud_alt_col=hudColour end;hud_spd=vec3(self.construct.getVelocity()):len()if speedUnit=="KMH"then hud_spd=hud_spd*3.6 end;hud_tht=math.floor(self.unit.getThrottle())if math.abs(hud_tht)<0 then self.Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)end;if laltState==false and hud_tht==100 and combatEngines then if combatTht>-1 then local ah=self.system.getMouseWheel()if ah<0 then combatTht=combatTht-10;if combatTht<0 then combatTht=0 end elseif ah>0 then combatTht=combatTht+10;if combatTht>100 then combatTht=100 end end else combatTht=0 end elseif laltState==false and hud_tht<100 and combatEngines then combatTht=-1 end;if combatTht>0 then self.Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].throttleMouseStepScale=0 elseif not laltState then self.Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].throttleMouseStepScale=mouseStepScale end;if X>100000 then X=X/200000;altitude_unit='su'elseif X>1000 then X=X/1000;altitude_unit='km'else altitude_unit='m'end;svgAltitude=[[]]..string.format("%.2f",X)..[[ ]]..altitude_unit..[[]]local ai=self.Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ai==1 then svgThrottle=[[CRS]]if speedUnit=="M/S"then hud_tht=math.floor(self.Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)/3.6)else hud_tht=math.floor(self.Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal))end;hide_throttle=true else svgThrottle=[[THR]]if hud_tht<0 then tht_clr=hudSecColour;hud_tht=math.abs(math.floor(self.Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal)*100))svgThrottle=[[REV]]else hud_tht=math.abs(math.floor(self.Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal)*100))tht_clr=hudColour end;hide_throttle=ovd_throttle end;svgFuel=[[
                <text text-anchor="start" alignment-baseline="top" x="170" y="10" style="font-size:10px;fill:#]]..hudColour..[[">FUEL</text>
                <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="170,14 170,190"/>
            ]]svgSpaceTanks=[[]]svgAtmoTanks=[[]]svgRocketTanks=[[]]local aj=0;local ak=0.9;if#atmoTanks>0 then svgAtmoTanks=svgAtmoTanks..[[
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="184,14 184,190"/>
                    <text text-anchor="middle" alignment-baseline="bottom" x="177" y="200"  style="font-size:10px;fill:#]]..hudColour..[[">N</text>
                ]]aj=190;ak=0.9;for b=1,#atmoTanks,1 do local al=atmoTanks[b].tankFuel/atmoTanks[b].tankCapacity;local barColour=atmoTanks[b].tankColour;if al>0 then svgAtmoTanks=svgAtmoTanks..[[
                            <polyline style="opacity:]]..ak..[[;fill:none;stroke:#]]..barColour..[[;stroke-width:6;stroke-miterlimit:1;" points="177,]]..aj..[[ 177,]]..aj-177/#atmoTanks*al..[["/>
                        ]]end;if al<0.2 then svgAtmoTanks=svgAtmoTanks..[[
                            <rect style="opacity:1;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:1;stroke-miterlimit:1;" x="174" y="]]..aj-177/#atmoTanks*0.2 ..[[" width="6" height="]]..177/#atmoTanks*0.2 ..[[" />
                        ]]aj=aj-177/#atmoTanks*0.2 else aj=aj-177/#atmoTanks*al end;if ak==0.9 then ak=0.7 else ak=0.9 end end end;if#spaceTanks>0 then local am=0;if#atmoTanks>0 then am=am+1 end;svgSpaceTanks=svgSpaceTanks..[[
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..184+14*am..[[,14 ]]..184+14*am..[[,190"/>
                    <text text-anchor="middle" alignment-baseline="bottom" x="]]..177+14*am..[[" y="200"  style="font-size:10px;fill:#]]..hudColour..[[">K</text>
                ]]aj=190;ak=0.9;for b=1,#spaceTanks,1 do local al=spaceTanks[b].tankFuel/spaceTanks[b].tankCapacity;local barColour=spaceTanks[b].tankColour;if al>0 then svgSpaceTanks=svgSpaceTanks..[[
                            <polyline style="opacity:]]..ak..[[;fill:none;stroke:#]]..barColour..[[;stroke-width:6;stroke-miterlimit:1;" points="]]..177+14*am..[[,]]..aj..[[ ]]..177+14*am..[[,]]..aj-177/#spaceTanks*al..[["/>
                        ]]end;if al<0.2 then svgSpaceTanks=svgSpaceTanks..[[
                            <rect style="opacity:1;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..174+14*am..[[" y="]]..aj-177/#spaceTanks*0.2 ..[[" width="6" height="]]..177/#spaceTanks*0.2 ..[[" />
                        ]]aj=aj-177/#spaceTanks*0.2 else aj=aj-177/#spaceTanks*al end;if ak==0.9 then ak=0.7 else ak=0.9 end end end;if#rocketTanks>0 then local am=0;if#atmoTanks>0 then am=am+1 end;if#spaceTanks>0 then am=am+1 end;svgRocketTanks=svgRocketTanks..[[
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..184+14*am..[[,14 ]]..184+14*am..[[,190"/>
                    <text text-anchor="middle" alignment-baseline="bottom" x="]]..177+14*am..[[" y="200"  style="font-size:10px;fill:#]]..hudColour..[[">X</text>
                ]]aj=190;ak=0.9;for b=1,#rocketTanks,1 do local al=rocketTanks[b].tankFuel/rocketTanks[b].tankCapacity;local barColour=rocketTanks[b].tankColour;if al>0 then svgRocketTanks=svgRocketTanks..[[
                            <polyline style="opacity:]]..ak..[[;fill:none;stroke:#]]..barColour..[[;stroke-width:6;stroke-miterlimit:1;" points="]]..177+14*am..[[,]]..aj..[[ ]]..177+14*am..[[,]]..aj-177/#rocketTanks*al..[["/>
                        ]]end;if al<0.2 then svgRocketTanks=svgRocketTanks..[[
                            <rect style="opacity:1;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..174+14*am..[[" y="]]..aj-177/#rocketTanks*0.2 ..[[" width="6" height="]]..177/#rocketTanks*0.2 ..[[" />
                        ]]aj=aj-177/#rocketTanks*0.2 else aj=aj-177/#rocketTanks*al end;if ak==0.9 then ak=0.7 else ak=0.9 end end end;svgFuel=svgFuel..svgAtmoTanks..svgSpaceTanks..svgRocketTanks;svgGear=[[]]if self.unit.isAnyLandingGearDeployed()then svgGear=[[GEAR]]end;local an=self.unit.getAtmosphereDensity()>0;if an then svgBrakes=[[<text text-anchor="end" alignment-baseline="middle" x="540" y="60" style="font-size:10px;fill:#]]..hudColour..[[">BRAKES</text>]]if brakeState==true then if brakeLocked==true then svgBrakes=svgBrakes..[[<text text-anchor="end" alignment-baseline="middle" x="540" y="80" style="font-size:15px;fill:#]]..hudSecColour..[[">LOCKED</text>]]else svgBrakes=svgBrakes..[[<text text-anchor="end" alignment-baseline="middle" x="540" y="80" style="font-size:15px;fill:#]]..hudColour..[[">ENGAGED</text>]]end else svgBrakes=svgBrakes..[[<text text-anchor="end" alignment-baseline="middle" x="540" y="80" style="font-size:15px;fill:#]]..hudColour..[[">RELEASED</text>]]end;svgBrakes=svgBrakes..[[
                    <text text-anchor="end" alignment-baseline="middle" x="540" y="110" style="font-size:10px;fill:#]]..hudColour..[[">]]..retrobrake..[[BRK DST</text>
                    <text text-anchor="end" alignment-baseline="middle" x="540" y="130" style="font-size:30px;fill:#]]..hudColour..[[">]]..svgBrakeDistance..[[</text>
                    <text text-anchor="start" alignment-baseline="top" x="540" y="139" style="font-size:10px;fill:#]]..hudColour..[[">]]..J..[[</text>

                    <text text-anchor="end" alignment-baseline="middle" x="540" y="160" style="font-size:10px;fill:#]]..hudColour..[[">]]..retrobrake..[[BRK TME</text>
                    <text text-anchor="end" alignment-baseline="middle" x="540" y="180" style="font-size:30px;fill:#]]..hudColour..[[">]]..G..[[</text>
                    <text text-anchor="start" alignment-baseline="top" x="540" y="189" style="font-size:10px;fill:#]]..hudColour..[[">]]..H..[[</text>                        
                ]]svgComp=[[
                    <text text-anchor="middle" alignment-baseline="top" x="960" y="40" style="font-size:15px;fill:#]]..hudColour..[[">]]..math.floor(compass_hud)..[[</text>
                    <rect style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="945" y="28" width="30" height="15" />
                    <g style="clip-path: url(#compassClip);">
                ]]local ao=math.floor(compass_hud/10)*10;svgComp=svgComp..[[
                    <text text-anchor="middle" alignment-baseline="top" x="]]..960-(compass_hud-ao)*10 ..[[" y="40" style="font-size:12px;fill:#]]..hudColour..[[">]]..ao..[[</text>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..1010-(compass_hud-ao)*10 ..[[,40 ]]..1010-(compass_hud-ao)*10 ..[[,30"/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..1035-(compass_hud-ao)*10 ..[[,38 ]]..1035-(compass_hud-ao)*10 ..[[,32"/>
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..985-(compass_hud-ao)*10 ..[[,38 ]]..985-(compass_hud-ao)*10 ..[[,32"/>
                ]]for b=1,3,1 do local ap=ao-10*b;local c2=ao+10*b;local aq,ar=ap,c2;if aq<0 then aq=aq+360 end;if ar>359 then ar=ar-360 end;svgComp=svgComp..[[
                        <text text-anchor="middle" alignment-baseline="top" x="]]..960-(compass_hud-ap)*10 ..[[" y="40" style="font-size:12px;fill:#]]..hudColour..[[">]]..aq..[[</text>
                        <text text-anchor="middle" alignment-baseline="top" x="]]..960-(compass_hud-c2)*10 ..[[" y="40" style="font-size:12px;fill:#]]..hudColour..[[">]]..ar..[[</text>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..1010-(compass_hud-ap)*10 ..[[,40 ]]..1010-(compass_hud-ap)*10 ..[[,30"/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..1035-(compass_hud-ap)*10 ..[[,38 ]]..1035-(compass_hud-ap)*10 ..[[,32"/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..985-(compass_hud-ap)*10 ..[[,38 ]]..985-(compass_hud-ap)*10 ..[[,32"/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..1010-(compass_hud-c2)*10 ..[[,40 ]]..1010-(compass_hud-c2)*10 ..[[,30"/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..1035-(compass_hud-c2)*10 ..[[,38 ]]..1035-(compass_hud-c2)*10 ..[[,32"/>
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..985-(compass_hud-c2)*10 ..[[,38 ]]..985-(compass_hud-c2)*10 ..[[,32"/>

                    ]]end;for b=1,#marks do local as=marks[b].pos;local at=vec3(self.construct.getWorldPosition())local au=as-at;local av=au:len()local aw=''if av>100000 then av=av/200000;aw=' SU'av=string.format("%.2f",av)..aw elseif av>1000 then av=av/1000;aw=' KM'av=string.format("%.1f",av)..aw else aw=' M'av=string.format("%.0f",av)..aw end;local ax=get_angle(au)if math.abs(ax)<30 then svgComp=svgComp..[[
                            <text text-anchor="middle" alignment-baseline="bottom" x="]]..960+ax*10 ..[[" y="20" style="font-size:12px;fill:#]]..marks[b].colour..[[">]]..string.upper(marks[b].name)..[[</text>
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..marks[b].colour..[[;stroke-width:2;stroke-miterlimit:1;" points="]]..956+ax*10 ..[[,23 ]]..960+ax*10 ..[[,27 ]]..964+ax*10 ..[[,23"/>
                            <text text-anchor="middle" alignment-baseline="top" x="]]..960+ax*10 ..[[" y="55" style="font-size:12px;fill:#]]..marks[b].colour..[[">]]..av..[[</text>
                        ]]end end;svgComp=svgComp..[[</g>]]svgFuelTimer=[[]]if timeRemaining<600 then svgFuelTimer=[[FUEL WARNING ]]if timeRemaining>60 then svgFuelTimer=svgFuelTimer..math.floor(timeRemaining/60)..[[ MINS]]else svgFuelTimer=svgFuelTimer..math.floor(timeRemaining)..[[ SECS]]end end else svgBrakes=[[<text text-anchor="end" alignment-baseline="middle" x="360" y="10" style="font-size:10px;fill:#]]..hudColour..[[">BRAKES</text>]]if brakeState==true then if brakeLocked==true then svgBrakes=svgBrakes..[[
                            <text text-anchor="end" alignment-baseline="middle" x="360" y="30" style="font-size:15px;fill:#]]..hudSecColour..[[">LOCKED</text>
                            <text text-anchor="middle" x="960" y="290" style="font-size:30px;fill:#]]..hudTerColour..[["><tspan alignment-baseline="top">BRAKES LOCKED</tspan></text>
                        ]]else svgBrakes=svgBrakes..[[
                            <text text-anchor="end" alignment-baseline="middle" x="360" y="30" style="font-size:15px;fill:#]]..hudColour..[[">ENGAGED</text>
                            <text text-anchor="middle" x="960" y="290" style="font-size:30px;fill:#]]..hudSecColour..[["><tspan alignment-baseline="top">BRAKES</tspan></text>
                            ]]end else svgBrakes=svgBrakes..[[<text text-anchor="end" alignment-baseline="middle" x="360" y="30" style="font-size:15px;fill:#]]..hudColour..[[">RELEASED</text>]]end;svgBrakes=svgBrakes..[[
                    <text text-anchor="end" alignment-baseline="middle" x="360" y="60" style="font-size:10px;fill:#]]..hudColour..[[">]]..retrobrake..[[BRK DST</text>
                    <text text-anchor="end" alignment-baseline="middle" x="360" y="80" style="font-size:30px;fill:#]]..hudColour..[[">]]..svgBrakeDistance..[[</text>
                    <text text-anchor="start" alignment-baseline="top" x="360" y="89" style="font-size:10px;fill:#]]..hudColour..[[">]]..J..[[</text>

                    <text text-anchor="end" alignment-baseline="middle" x="360" y="110" style="font-size:10px;fill:#]]..hudColour..[[">]]..retrobrake..[[BRK TME</text>
                    <text text-anchor="end" alignment-baseline="middle" x="360" y="130" style="font-size:30px;fill:#]]..hudColour..[[">]]..G..[[</text>
                    <text text-anchor="start" alignment-baseline="top" x="360" y="139" style="font-size:10px;fill:#]]..hudColour..[[">]]..H..[[</text>                        
                ]]svgComp=[[]]local ay=self.construct.getMaxSpeed()local az=ay;local aA=ay>65000;local aB=hudColour;if speedUnit=="KMH"then ay=ay*3.6 end;if not aA and calibrated then if DeltaV<ay*2 then if not self.system.isPlayingSound()and playedLowFuelWarn==false then playedLowFuelWarn=true;self.system.playSound('fox/dv low.mp3')end;aB=hudSecColour else playedLowFuelWarn=false end;if DeltaV+hud_spd<ay then if not self.system.isPlayingSound()and self.system.getUtcTime()-lastFuelWarning>60 then lastFuelWarning=self.system.getUtcTime()self.system.playSound('fox/dv low min.mp3')end;svgFuelTimer=[[FUEL WARNING ]]..math.floor(DeltaV)..[[ ]]..speedUnit..[[ △V]]else svgFuelTimer=[[]]end end;local aC=totalMass;aC=50000/3.6-10713*(aC-10000)/(853926+aC-10000)if aC>50000/3.6 then aC=50000/3.6 end;if az/aC<0.9 then svgFuelTimer=[[STASIS WARNING ]]..math.floor(az/aC*100)..[[% MAX SPEED ]]..math.floor(ay)..[[ ]]..speedUnit end;svgFuel=svgFuel..[[
                    <text text-anchor="end" alignment-baseline="middle" x="360" y="160" style="font-size:10px;fill:#]]..aB..[[">△V</text>
                    <text text-anchor="end" alignment-baseline="middle" x="360" y="180" style="font-size:30px;fill:#]]..aB..[[">]]..math.floor(DeltaV)..[[</text>
                    <text text-anchor="start" alignment-baseline="top" x="360" y="189" style="font-size:10px;fill:#]]..aB..[[">]]..speedUnit..[[</text>                        
                    
                ]]end;svgPVP=[[
                <text text-anchor="start" alignment-baseline="middle" x="1380" y="10" style="font-size:10px;fill:#]]..hudColour..[[">]]..svgPVPTitle..[[</text>
                <text text-anchor="start" alignment-baseline="bottom" x="1380" y="38" style="font-size:30px;fill:#]]..hudColour..[[">]]..a2 ..[[
                <tspan alignment-baseline="top" style="font-size:10px;fill:#]]..hudColour..[[">]]..a5 ..[[</tspan></text>
            ]]svgPipe=[[
                <text text-anchor="start" alignment-baseline="middle" x="1380" y="60" style="font-size:10px;fill:#]]..hudColour..[[">]]..string.upper(svgPipeName)..[[</text>
                <text text-anchor="start" alignment-baseline="bottom" x="1380" y="88" style="font-size:30px;fill:#]]..hudColour..[[">]]..svgPipeDist..[[
                <tspan alignment-baseline="top" style="font-size:10px;fill:#]]..hudColour..[[">]]..svgPipeDist_unit..[[</tspan></text>
            ]]svgPer=[[]]if an or rawaaltitude<20000 then svgPVP=[[
                    <text text-anchor="start" alignment-baseline="middle" x="1380" y="10" style="font-size:10px;fill:#]]..hudColour..[[">ALTITUDE</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="1380" y="38" style="font-size:30px;fill:#]]..hudColour..[[">]]..string.format("%01d",math.floor(hud_alt))..[[
                    <tspan alignment-baseline="top" style="font-size:10px;fill:#]]..hudColour..[[">M</tspan></text>
                ]]svgPipe=[[
                    <text text-anchor="start" alignment-baseline="middle" x="1380" y="60" style="font-size:10px;fill:#]]..hudColour..[[">V SPEED</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="1380" y="88" style="font-size:30px;fill:#]]..hudColour..[[">]]..W..[[
                    <tspan alignment-baseline="top" style="font-size:10px;fill:#]]..hudColour..[[">M/S</tspan></text>
                ]]atmo_str=string.format("%.1f",self.unit.getAtmosphereDensity()*100)else atmo_str="NONE"end;if an==false then local ay=self.construct.getMaxSpeed()if speedUnit=="KMH"then ay=ay*3.6 end;local al=hud_spd/ay*196;local aD,aE='',''local aF,aG='',''perloc=getOrbit(Y,E,body)if perloc[2]>0 and perloc[2]<=150000 then local aH=getScreenPos(perloc[1])if aH[1]~=-1 then local aI=perloc[2]if aI>1000 then aD=string.format("%.1f",aI/1000)aE="KM"else aD=string.format("%.0f",aI)aE="M"end;svgPer=[[
                            <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..aH[1]..[[,]]..aH[2]+10 ..[[ ]]..aH[1]-9 ..[[,]]..aH[2]-7 ..[[ ]]..aH[1]+9 ..[[,]]..aH[2]-7 ..[[ ]]..aH[1]..[[,]]..aH[2]+10 ..[[" />
                            <text text-anchor="middle" alignment-baseline="top" x="]]..aH[1]..[[" y="]]..aH[2]+21 ..[[" style="font-size:10px;fill:#]]..hudColour..[[">]]..aD..[[ ]]..aE..[[</text>
                            <text text-anchor="middle" alignment-baseline="top" x="]]..aH[1]..[[" y="]]..aH[2]-13 ..[[" style="font-size:10px;fill:#]]..hudColour..[[">]]..math.floor(perloc[5])..[[ s</text>
                        ]]end;if perloc[3]~=nil then local aJ=getScreenPos(perloc[3])if aJ[1]~=-1 then local aK=perloc[4]if aK>1000 then aF=string.format("%.1f",aK/1000)aG="KM"else aF=string.format("%.0f",aK)aG="M"end;svgPer=svgPer..[[
                                <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="]]..aJ[1]..[[,]]..aJ[2]-10 ..[[ ]]..aJ[1]-9 ..[[,]]..aJ[2]+7 ..[[ ]]..aJ[1]+9 ..[[,]]..aJ[2]+7 ..[[ ]]..aJ[1]..[[,]]..aJ[2]-10 ..[[" />
                                <text text-anchor="middle" alignment-baseline="top" x="]]..aJ[1]..[[" y="]]..aJ[2]+21 ..[[" style="font-size:10px;fill:#]]..hudColour..[[">]]..aF..[[ ]]..aG..[[</text>
                                <text text-anchor="middle" alignment-baseline="top" x="]]..aJ[1]..[[" y="]]..aJ[2]-13 ..[[" style="font-size:10px;fill:#]]..hudColour..[[">]]..math.floor(perloc[6])..[[ s</text>
                            ]]end end end end;local aL=[[
                <text text-anchor="start" alignment-baseline="middle" x="1380" y="110" style="font-size:10px;fill:#]]..hudColour..[[">ATMOSPHERE</text>
                <text text-anchor="start" alignment-baseline="bottom" x="1380" y="138" style="font-size:30px;fill:#]]..hudColour..[[">]]..atmo_str..[[</text>
            ]]if ae==true and rawaaltitude>0 then aL=[[
                    <text text-anchor="start" alignment-baseline="middle" x="1380" y="110" style="font-size:10px;fill:#]]..hudColour..[[">]]..string.upper(ad)..[[ ATMO</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="1380" y="138" style="font-size:30px;fill:#]]..hudColour..[[">]]..af..[[
                    <tspan alignment-baseline="top" style="font-size:10px;fill:#]]..hudColour..[[">]]..ag..[[</tspan></text>
                ]]end;local aM=[[]]local aN=[[]]if autoMode=="level"then svgGravity=[[On]]aM=[[AUTO LEVEL]]else svgGravity=[[Off]]end;if autoMode=="radialout"then svgVector=[[RADIAL OUT]]elseif autoMode=="radialin"then svgVector=[[RADIAL IN]]elseif autoMode=="retro"then svgVector=[[RETROGRADE]]elseif autoMode=="pro"then svgVector=[[PROGRADE]]elseif autoMode=="tokyoleft"then svgVector=[[TOKYO LEFT]]elseif autoMode=="tokyoright"then svgVector=[[TOKYO RIGHT]]elseif autoMode=="WP"then svgVector=alignmentName else svgVector=[[OFF]]end;if svgVector~=[[OFF]]then aM=[[VECTOR LOCK]]aN=svgVector elseif roidTrack>0 then aM=[[TRACKING ROID]]aN=[[POINT ]]..roidTrack..[[/4]]else if laltState==true then aM=[[VECTOR LOCK]]aN=svgVector end end;if showTalentMessage>0 then showTalentMessage=showTalentMessage-1;if not pilotTalentSet then aM=[[PILOT TALENT NOT SET]]aN=[[SPACE ENGINE FUEL EFFICIENCY NEEDS SETTING (ALT+8)]]else aM=[[SPACE ENGINE FUEL EFFICIENCY]]aN=self.player.getName()..[[ TALENT LEVEL ]]..SpaceEngineFuelEfficiency end end;if showHoverMessage>0 then showHoverMessage=showHoverMessage-1;if underWater then aM=[[UNDER WATER]]aN=[[DEPTH CHANGE ]]..math.floor(hoverHeight)..[[ M/S]]elseif Landing then if surfaceDistance>10 then showHoverMessage=90 end;aM=[[LANDING]]aN=math.floor(surfaceDistance)..[[ M]]else aM=[[HOVER HEIGHT]]if hoverHeight<30 then aN=math.floor(hoverHeight)else aN=[[MAX]]end end end;if travelMode then local at=vec3(self.construct.getWorldPosition())local aO=vec3(self.construct.getWorldVelocity())local aP=travelPoint-at;local aQ=aP:angle_between(aO)*constants.rad2deg;local aR=aP:len()local aS=vec3(self.construct.getVelocity()):len()local aT=aR/aS;local aU=math.floor(aT/60)local aV=string.format("%.0f",(aT/60-aU)*60)if aV:len()==1 then aV=[[0]]..aV end;svgTravelMsg=[[ETA ]]..aU..[[:]]..aV;svgTravelSubMsg=string.format("%.2f",aR/1000)..[[ KM TO GO]]if aS<0.01 then svgTravelMsg=[[ETA NEVER]]end;if aR<2000 then travelMode=false end;if aS>300 and aQ>5 then travelMode=false end else svgTravelMsg=[[]]svgTravelSubMsg=[[]]end;if laltState==false then msgColour=hudSecColour else msgColour=hudColour end;hud_spd_h=math.floor(hud_spd/100)local aW=[[]]if an then local aX=self.construct.getFrictionBurnSpeed()if aX==nil then aX=292 end;if speedUnit=="KMH"then aX=aX*3.6 end;local aY=hudColour;if hud_spd_h*100>=aX then aY=hudSecColour end;aW=[[
                    <polyline style="opacity:1;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="425,0 420,0 420,200 425,200" />
                    <polygon style="opacity:1;stroke:none;fill:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="429,97 429,103 434,100" />
                    <g style="clip-path: url(#spdtapeClip);">
                    <text text-anchor="end" alignment-baseline="middle" x="400" y="]]..100+hud_spd-hud_spd_h*100 ..[[" style="font-size:15px;fill:#]]..aY..[[">]]..hud_spd_h*100 ..[[</text>    
                ]]if aX<hud_spd+300 and aX>hud_spd-300 then aW=aW..[[
                        <polyline style="opacity:0.8;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:2;stroke-miterlimit:1;" points="310,]]..100+hud_spd-aX..[[ 410,]]..100+hud_spd-aX..[[" />
                    ]]end;for b=1,6 do if hud_spd_h*100+50*b>=aX then aY=hudSecColour else aY=hudColour end;aW=aW..[[
                        <text text-anchor="end" alignment-baseline="middle" x="400" y="]]..100+hud_spd-(hud_spd_h*100+50*b)..[[" style="font-size:15px;fill:#]]..aY..[[">]]..hud_spd_h*100+50*b..[[</text>
                    ]]if hud_spd_h*100-50*b>=0 then if hud_spd_h*100-50*b>=aX then aY=hudSecColour else aY=hudColour end;aW=aW..[[
                            <text text-anchor="end" alignment-baseline="middle" x="400" y="]]..100+hud_spd-(hud_spd_h*100-50*b)..[[" style="font-size:15px;fill:#]]..aY..[[">]]..hud_spd_h*100-50*b..[[</text>
                        ]]end end;if hud_spd>=aX then aY=hudSecColour else aY=hudColour end;aW=aW..[[
                    </g>
                    <rect style="opacity:0.8;fill:none;stroke:#]]..aY..[[;stroke-width:1;stroke-miterlimit:1;" x="310" y="80" width="100" height="40" />
                    <text text-anchor="end" alignment-baseline="middle" x="405" y="100" style="font-size:30px;fill:#]]..aY..[[">]]..string.format("%01d",math.floor(hud_spd))..[[</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="312" y="118" style="font-size:8px;fill:#]]..aY..[[">]]..speedUnit..[[</text>
                    <text text-anchor="end" alignment-baseline="middle" x="540" y="10" style="font-size:10px;fill:#]]..tht_clr..[[">]]..svgThrottle..[[</text>
                    <text text-anchor="end" alignment-baseline="middle" x="540" y="30" style="font-size:30px;fill:#]]..tht_clr..[[">]]..hud_tht..[[</text>
                ]]else local ay=self.construct.getMaxSpeed()local aZ=vec3(self.construct.getAcceleration()):len()if speedUnit=="KMH"then ay=ay*3.6 end;local al=hud_spd/ay;aW=[[
                    <polyline style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:3;stroke-miterlimit:1;" points="424,198 424,]]..198-186*al..[[" />
                ]]if svgThrottle==[[CRS]]then aW=aW..[[
                        <text text-anchor="start" alignment-baseline="top" x="420" y="10"  style="font-size:10px;fill:#]]..hudColour..[[">MAX ]]..math.floor(ay)..[[ ]]..speedUnit..[[</text>
                        <polyline style="opacity:1;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="425,14 420,14 420,200 425,200" />
                        <polygon style="opacity:1;stroke:none;fill:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="429,]]..195-183*al..[[ 429,]]..201-183*al..[[ 434,]]..198-183*al..[[" />
                        <text text-anchor="start" alignment-baseline="middle" x="440" y="]]..200-178*al..[[" style="font-size:24px;fill:#]]..hudColour..[[">]]..string.format("%01d",math.floor(hud_spd))..[[</text>
                        <text text-anchor="start" alignment-baseline="middle" x="440" y="]]..215-178*al..[[" style="font-size:10px;fill:#]]..tht_clr..[[">]]..svgThrottle..[[ ]]..hud_tht..[[ ]]..speedUnit..[[</text>
                        <text text-anchor="start" alignment-baseline="middle" x="440" y="]]..225-178*al..[[" style="font-size:10px;fill:#]]..tht_clr..[[">]]..string.format("%.1f",aZ/9.8)..[[G</text>
                        <text text-anchor="start" alignment-baseline="bottom" x="415" y="200" style="font-size:10px;fill:#]]..hudColour..[[" transform="rotate(-90,415,200)">SPEED - ]]..speedUnit..[[</text>
                    ]]else local a_=hud_tht/100;local b0=spaceThrust/maxKinematicSpaceFwdCruise;local b1=[[MAX]]local b2=hudColour;if rocketsEngaged then b1=[[BOOST]]b2=hudTerColour end;if b0>1.01 and not combatEngines then b0=1;tht_clr=hudTerColour elseif b0>1 then b0=1 end;if b0<0 then b0=0 end;aW=aW..[[
                        <text text-anchor="start" alignment-baseline="top" x="420" y="10"  style="font-size:10px;fill:#]]..b2 ..[[">]]..b1 ..[[ ]]..math.floor(ay)..[[ ]]..speedUnit..[[</text>
                        <polyline style="opacity:1;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="425,14 420,14 420,200 425,200" />
                        <polygon style="opacity:1;stroke:none;fill:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="429,]]..195-183*al..[[ 429,]]..201-183*al..[[ 434,]]..198-183*al..[[" />
                        <text text-anchor="start" alignment-baseline="middle" x="440" y="]]..200-178*al..[[" style="font-size:24px;fill:#]]..hudColour..[[">]]..string.format("%01d",math.floor(hud_spd))..[[</text>
                        <text text-anchor="start" alignment-baseline="middle" x="440" y="]]..215-178*al..[[" style="font-size:10px;fill:#]]..hudColour..[[">]]..speedUnit..[[</text>
                        <text text-anchor="start" alignment-baseline="middle" x="440" y="]]..225-178*al..[[" style="font-size:10px;fill:#]]..hudColour..[[">]]..string.format("%.1f",aZ/9.8)..[[G</text>
                        <text text-anchor="start" alignment-baseline="bottom" x="405" y="200" style="font-size:12px;fill:#]]..tht_clr..[[" transform="rotate(-90,405,200)">]]..svgThrottle..[[ - ]]..hud_tht..[[</text>
                        <polyline style="opacity:1;fill:none;stroke:#]]..tht_clr..[[;stroke-width:2;" points="415,]]..199-185*a_..[[ 410,]]..199-185*a_..[[ 410,200" />
                        <rect style="opacity:1;fill:#]]..tht_clr..[[;stroke:none;stroke-width:0;" x="413" y="]]..199-185*b0 ..[[" width="4" height="]]..185*b0 ..[[" />
                        
                    ]]if combatEngines and combatTht>=0 then a_=combatTht/100;local b3=spaceThrust-maxKinematicSpaceFwdCruise;local b4=b3/maxKinematicSpaceFwdCombat;if b4<0 then b4=0 end;if b4>1 then b4=1 end;aW=aW..[[
                            <text text-anchor="start" alignment-baseline="bottom" x="405" y="100" style="font-size:12px;fill:#]]..hudSecColour..[[" transform="rotate(-90,405,100)">COMBAT - ]]..combatTht..[[</text>
                            <polyline style="opacity:1;fill:none;stroke:#]]..hudSecColour..[[;stroke-width:2;" points="415,]]..199-185*a_..[[ 410,]]..199-185*a_..[[ 410,200" />
                            <rect style="opacity:1;fill:#]]..hudSecColour..[[;stroke:none;stroke-width:0;" x="413" y="]]..199-185*b4 ..[[" width="4" height="]]..185*b4 ..[[" />
                        ]]end end end;local b5=[[]]local b6=0;if laltState==true and showHints==true then for b=1,#controls do if controls[b].atmospace=="atmo"and an or controls[b].atmospace=="space"and not an or controls[b].atmospace=="both"then if controls[b].shieldreq and shieldInstalled or controls[b].shieldreq==false then local b7=splitstr(controls[b].bind,"+")local b8=0;if controls[b].shift then b5=b5 ..[[
                                    <rect style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="0" y="]]..230+b6*22 ..[[" rx="4" ry="4" width="35" height="20" />
                                    <text text-anchor="middle" alignment-baseline="middle" x="17" y="]]..240+b6*22 ..[[" style="font-size:11px;fill:#]]..hudColour..[[">SHIFT</text>
                                ]]b8=37 end;if b7[1]:find("ALT")then b5=b5 ..[[
                                    <rect style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..b8 ..[[" y="]]..230+b6*22 ..[[" rx="4" ry="4" width="30" height="20" />
                                    <text text-anchor="middle" alignment-baseline="middle" x="]]..b8+15 ..[[" y="]]..240+b6*22 ..[[" style="font-size:11px;fill:#]]..hudColour..[[">ALT</text>
                                ]]b8=b8+32;b5=b5 ..[[
                                    <rect style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..b8 ..[[" y="]]..230+b6*22 ..[[" rx="4" ry="4" width="20" height="20" />
                                    <text text-anchor="middle" alignment-baseline="middle" x="]]..b8+10 ..[[" y="]]..240+b6*22 ..[[" style="font-size:11px;fill:#]]..hudColour..[[">]]..b7[2]..[[</text>
                                ]]else local b9=20;if b7[1]:len()>2 then b9=30 end;b5=b5 ..[[
                                    <rect style="opacity:0.8;fill:none;stroke:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" x="]]..b8 ..[[" y="]]..230+b6*22 ..[[" rx="4" ry="4" width="]]..b9 ..[[" height="20" />
                                    <text text-anchor="middle" alignment-baseline="middle" x="]]..b8+b9/2 ..[[" y="]]..240+b6*22 ..[[" style="font-size:11px;fill:#]]..hudColour..[[">]]..b7[1]..[[</text>
                                ]]end;b5=b5 ..[[
                                <text text-anchor="start" alignment-baseline="middle" x="91" y="]]..240+b6*22 ..[[" style="font-size:11px;fill:#]]..hudColour..[[">]]..controls[b].func..[[</text>
                            ]]b6=b6+1 end end end;b5=b5 ..[[
                    <text text-anchor="start" alignment-baseline="middle" x="0" y="]]..240+b6*22 ..[[" style="font-size:11px;fill:#]]..hudColour..[[">Type "help" in LUA chat for additional controls</text>
                ]]end;svgDampen=[[]]if not dampen then svgDampen=[[
                    <text text-anchor="end" x="360" y="210" style="font-size:15px;fill:#]]..hudSecColour..[["><tspan alignment-baseline="top">DAMPING OFF</tspan></text>
                ]]end;local ba=0;if gunner then ba=80 end;svgMouse=[[]]if settingMode then local bb=math.floor(self.system.getMousePosX()/self.system.getScreenWidth()*1920)local bc=math.floor(self.system.getMousePosY()/self.system.getScreenHeight()*1080)svgMouse=[[
                    <polyline style="opacity:1;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;" points="]]..bb..[[,]]..bc..[[ ]]..bb..[[,]]..bc+14 ..[[ ]]..bb+10 ..[[,]]..bc+10 ..[[ ]]..bb..[[,]]..bc..[["/>
                ]]end;local bd=[[]]if ac=="SU"and tonumber(ab)>2000 then svgPVP=[[]]svgPipe=[[]]aL=[[]]else bd=[[
                    <text text-anchor="start" alignment-baseline="middle" x="1380" y="160" style="font-size:10px;fill:#]]..hudColour..[[">]]..string.upper(ad)..[[ GND</text>
                    <text text-anchor="start" alignment-baseline="bottom" x="1380" y="188" style="font-size:30px;fill:#]]..hudColour..[[">]]..ab..[[
                    <tspan alignment-baseline="top" style="font-size:10px;fill:#]]..hudColour..[[">]]..ac..[[</tspan></text>
                ]]end;local be=[[


                ]]..b5 ..[[
                ]]..aW..[[
                ]]..svgShield..[[
                ]]..svgCCS..[[
                ]]..svgFuel..[[

                ]]..svgComp..[[


                <text text-anchor="middle" x="960" y="200" style="font-size:20px;fill:#]]..msgColour..[["><tspan alignment-baseline="bottom">]]..aM..[[</tspan></text>
                <text text-anchor="middle" x="960" y="215" style="font-size:15px;fill:#]]..hudColour..[["><tspan alignment-baseline="top">]]..aN..[[</tspan></text>
                <text text-anchor="middle" x="960" y="240" style="font-size:20px;fill:#]]..msgColour..[["><tspan alignment-baseline="bottom">]]..svgTravelMsg..[[</tspan></text>
                <text text-anchor="middle" x="960" y="255" style="font-size:15px;fill:#]]..hudColour..[["><tspan alignment-baseline="top">]]..svgTravelSubMsg..[[</tspan></text>
                <text text-anchor="middle" x="960" y="]]..170+ba..[[" style="font-size:20px;fill:#]]..hudSecColour..[["><tspan alignment-baseline="bottom">]]..svgFuelTimer..[[</tspan></text>
                <text text-anchor="middle" x="960" y="710" style="font-size:20px;fill:#]]..hudSecColour..[["><tspan alignment-baseline="top">]]..svgGear..[[</tspan></text>


                ]]..bd..[[

                ]]..svgPVP..[[

                ]]..svgPipe..[[
                ]]..aL..[[
                ]]..svgDmg..[[
                ]]..svgSettings..[[
                ]]..svgPip..[[
                ]]..svgBrakes..[[
                ]]..svgPer..[[
                ]]..svgDampen..[[   
                ]]..svgMouse..[[             

            ]]blurSVG=[[
                <svg class="blur" viewBox="0 0 1920 1080">

                </svg>
            ]]blurTopSVG=[[
                <svg class="shadow" viewBox="0 0 1920 1080">
                    <polyline style="opacity:1;fill:none;stroke:#]]..hudColour..[[;stroke-width:2;stroke-miterlimit:1;" points="1495,0 1500,0 1500,200 1495,200" />
                    <polygon style="opacity:1;stroke:none;fill:#]]..hudColour..[[;stroke-width:1;stroke-miterlimit:1;" points="1491,97 1491,103 1487,100" />
                    ]]..be..[[
                </svg>
            ]]local bf=baseSVG..be..[[
            </svg>
            ]]..blurTopSVG;self.system.setScreen(bf)
        end

        function FOX_Flight_Local.onInputText(self,text)
            if string.lower(text)=="help"then self.system.print('')self.system.print(version..' - LUA Chat Commands')self.system.print('========================================')self.system.print('Shield')self.system.print('---------------')self.system.print('a ....... Equalize shield resistances')self.system.print('c ....... Spread shield resists for cannon fire')self.system.print('l ....... Spread shield resists for laser fire')self.system.print('m ....... Spread shield resists for missile fire')self.system.print('r ....... Spread shield resists for railgun fire')self.system.print('')self.system.print('Navigation')self.system.print('---------------')self.system.print('mark ::pos{} name colour...... Set a marker at pos called name. colour is 1, 2 or 3 for hud colours, or 6 character hex code for any other')self.system.print('lock <mark name> ....... Add the marker to the vector lock menu (cycle with alt+3)')self.system.print('unmark <mark name> ....... Remove the marker called name')self.system.print('unmark all ....... Remove all markers')self.system.print('print <mark name> ....... Print the coordinates of the marker to LUA chat')self.system.print('print all ....... Print the coordinates of all markers to LUA chat')self.system.print('tt <distance in SU> ....... Calculate ETA to that distance at current velocity')self.system.print('tt <mark name> ....... Calculate ETA to marker at current velocity')self.system.print('')self.system.print('Settings')self.system.print('---------------')self.system.print('hint ....... Toggle the hints showing while alt is held')self.system.print('unit ....... Switch speed units between kmh and m/s')self.system.print('maxdps n ..... Set dps chart max, in n thousands')self.system.print('agg n ..... Set AGG target height in meters')self.system.print('')self.system.print('Targeting (FOX gunner)')self.system.print('---------------')self.system.print('code ....... Switch the contact short code generation type to match other gunner scripts')self.system.print('owner ....... Toggle the display of construct owners on friendly contacts')self.system.print('<3 chars> ....... Enter a contact Short Code to add directly to the "Selected" widget and pin to the top')self.system.print('anchor <3 chars> ....... Enter an allys short code to keep them marked in the hud')self.system.print('unanchor <3 chars> ....... Enter an allys short code to remove the anchor mark')self.system.print('kills ....... Produce a report in LUA chat of all kills made by the ship')self.system.print('rep all ....... Produce a combat report in LUA chat of the entire flight since start')self.system.print('rep <3 chars> ....... Produce a combat report in LUA chat specific to the target code')self.system.print('')elseif string.lower(text)=="hint"then if showHints==true then showHints=false;self.system.print('Hints disabled')else showHints=true;self.system.print('Hints enabled')end;if databankInstalled then if showHints then db.setStringValue("showHints","true")else db.setStringValue("showHints","false")end end elseif string.lower(text)=="unit"then if speedUnit=="KMH"then speedUnit="M/S"else speedUnit="KMH"end;self.system.print('Speed units set to '..speedUnit)if databankInstalled then db.setStringValue("speedUnit",speedUnit)end elseif string.lower(text)=="a"then if shieldInstalled then if shield.getResistancesCooldown()==0 then local a=shield.getResistancesPool()shield.setResistances(0.25*a,0.25*a,0.25*a,0.25*a)self.system.print('Resistances Equalized')if not self.system.isPlayingSound()then self.system.playSound('fox/res eq.mp3')end elseif shield.getResistancesCooldown()>0 then self.system.print('Resistances in cooldown, '..tostring(math.ceil(shield.getResistancesCooldown()))..' secs')if not self.system.isPlayingSound()then self.system.playSound('fox/res cd.mp3')end end end elseif string.lower(text)=="c"then if shieldInstalled then if shield.getResistancesCooldown()==0 then local a=shield.getResistancesPool()shield.setResistances(0,0,0.5*a,0.5*a)self.system.print('Resistances Set for Cannon')if not self.system.isPlayingSound()then self.system.playSound('fox/res cannon.mp3')end elseif shield.getResistancesCooldown()>0 then self.system.print('Resistances in cooldown, '..tostring(math.ceil(shield.getResistancesCooldown()))..' secs')if not self.system.isPlayingSound()then self.system.playSound('fox/res cd.mp3')end end end elseif string.lower(text)=="r"then if shieldInstalled then if shield.getResistancesCooldown()==0 then local a=shield.getResistancesPool()shield.setResistances(0.5*a,0.5*a,0,0)self.system.print('Resistances Set for Railgun')if not self.system.isPlayingSound()then self.system.playSound('fox/res railgun.mp3')end elseif shield.getResistancesCooldown()>0 then self.system.print('Resistances in cooldown, '..tostring(math.ceil(shield.getResistancesCooldown()))..' secs')if not self.system.isPlayingSound()then self.system.playSound('fox/res cd.mp3')end end end elseif string.lower(text)=="m"then if shieldInstalled then if shield.getResistancesCooldown()==0 then local a=shield.getResistancesPool()shield.setResistances(0.5*a,0,0.5*a,0)self.system.print('Resistances Set for Missile')if not self.system.isPlayingSound()then self.system.playSound('fox/res missile.mp3')end elseif shield.getResistancesCooldown()>0 then self.system.print('Resistances in cooldown, '..tostring(math.ceil(shield.getResistancesCooldown()))..' secs')if not self.system.isPlayingSound()then self.system.playSound('fox/res cd.mp3')end end end elseif string.lower(text)=="l"then if shieldInstalled then if shield.getResistancesCooldown()==0 then local a=shield.getResistancesPool()shield.setResistances(0,0.5*a,0,0.5*a)self.system.print('Resistances Set for Laser')if not self.system.isPlayingSound()then self.system.playSound('fox/res laser.mp3')end elseif shield.getResistancesCooldown()>0 then self.system.print('Resistances in cooldown, '..tostring(math.ceil(shield.getResistancesCooldown()))..' secs')if not self.system.isPlayingSound()then self.system.playSound('fox/res cd.mp3')end end end elseif string.sub(string.lower(text),1,5)=='roid 'then if self.unit.getAtmosphereDensity()>0 then self.system.print('Leave atmosphere to begin tracking an asteroid')else local b={}for c in string.gmatch(text,"([^%s]+)")do table.insert(b,c)end;if#b==2 then autoMode=false;local d=0;if string.sub(string.lower(b[2]),1,5)=='::pos'then local e=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local f='::pos{'..e..','..e..','..e..','..e..','..e..'}'local g,h,i,j,k=string.match(text,f)roidTrack=1;if g=="0"and h=="0"then d=vec3(tonumber(i),tonumber(j),tonumber(k))else j=math.rad(j)i=math.rad(i)local l=atlas[tonumber(g)][tonumber(h)]local m=math.cos(i)local n=vec3(m*math.cos(j),m*math.sin(j),math.sin(i))local o=vec3(l.center)+(l.radius+k)*n;local p='::pos{0, 0, '..o.x..', '..o.y..', '..o.z..'}'d=vec3(tonumber(o.x),tonumber(o.y),tonumber(o.z))end;self.system.print('Tracking asteroid position 1 - aligning...')if not self.system.isPlayingSound()then self.system.playSound('fox/new wp.mp3')end;nextRoidPos=d elseif string.sub(string.lower(b[2]),1,3)=='off'then roidTrack=0;nextRoidPos=nil end end end elseif string.sub(string.lower(text),1,5)=='::pos'then local e=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local f='::pos{'..e..','..e..','..e..','..e..','..e..'}'local g,h,i,j,k=string.match(text,f)if roidTrack>0 then local d=0;if g=="0"and h=="0"then d=vec3(tonumber(i),tonumber(j),tonumber(k))else j=math.rad(j)i=math.rad(i)local l=atlas[tonumber(g)][tonumber(h)]local m=math.cos(i)local n=vec3(m*math.cos(j),m*math.sin(j),math.sin(i))local o=vec3(l.center)+(l.radius+k)*n;local p='::pos{0, 0, '..o.x..', '..o.y..', '..o.z..'}'d=vec3(tonumber(o.x),tonumber(o.y),tonumber(o.z))end;roidTrack=roidTrack+1;if roidTrack>4 then roidTrack=0;alignmentTarget=d;nextRoidPos=d;alignmentName='TRACKED ROID'self.system.print('Waypoint TRACKED ROID Set - use alt+3 to align')if not self.system.isPlayingSound()then self.system.playSound('fox/new wp.mp3')end else self.system.print('Tracking asteroid position '..roidTrack..' - aligning...')if not self.system.isPlayingSound()then self.system.playSound('fox/new wp.mp3')end;nextRoidPos=d end end elseif string.sub(string.lower(text),1,5)=='lock 'then local b={}for c in string.gmatch(text,"([^%s]+)")do table.insert(b,c)end;if#b==2 then local q=false;for r=1,#marks do if string.lower(b[2])==string.lower(marks[r].name)then alignmentTarget=marks[r].pos;alignmentName=marks[r].name:upper()self.system.print('Waypoint '..marks[r].name..' Set - use alt+3 to align')if not self.system.isPlayingSound()then self.system.playSound('fox/new wp.mp3')end;q=true;break end end;if q==false then self.system.print('No mark set for "'..b[2]..'".  Use the mark command (see help).')end end elseif string.sub(string.lower(text),1,5)=='mark 'then local b={}for c in string.gmatch(text,"([^%s]+)")do table.insert(b,c)end;if#b==4 then local s={}local d=0;if string.sub(string.lower(b[2]),1,5)=='::pos'then local e=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local f='::pos{'..e..','..e..','..e..','..e..','..e..'}'local g,h,i,j,k=string.match(text,f)if g=="0"and h=="0"then d=vec3(tonumber(i),tonumber(j),tonumber(k))else j=math.rad(j)i=math.rad(i)local l=atlas[tonumber(g)][tonumber(h)]local m=math.cos(i)local n=vec3(m*math.cos(j),m*math.sin(j),math.sin(i))local o=vec3(l.center)+(l.radius+k)*n;local p='::pos{0, 0, '..o.x..', '..o.y..', '..o.z..'}'d=vec3(tonumber(o.x),tonumber(o.y),tonumber(o.z))end;s.pos=d;s.name=b[3]if b[4]=='2'then s.colour=hudSecColour elseif b[4]=='3'then s.colour=hudTerColour elseif b[4]:len()==6 then s.colour=b[4]else s.colour=hudColour end;local t=true;for r=1,#marks do if string.lower(marks[r].name)==string.lower(s.name)then marks[r]=s;t=false;self.system.print(s.name..' updated')break end end;if t then marks[#marks+1]=s;self.system.print(s.name..' marked')end;if databankInstalled then local u=json.encode(marks)db.setStringValue("savemarks",u)end end end elseif string.sub(string.lower(text),1,7)=='unmark 'then local b={}for c in string.gmatch(text,"([^%s]+)")do table.insert(b,c)end;if#b==2 then if string.lower(b[2])=='all'then marks={}else for r=1,#marks do if string.lower(marks[r].name)==string.lower(b[2])then table.remove(marks,r)self.system.print(b[2]..' unmarked')break end end end;if databankInstalled then local u=json.encode(marks)db.setStringValue("savemarks",u)end end elseif string.sub(string.lower(text),1,6)=='print 'then local b={}for c in string.gmatch(text,"([^%s]+)")do table.insert(b,c)end;if#b==2 then if string.lower(b[2])=='all'then for r=1,#marks do self.system.print(marks[r].name..' ::pos{0,0,'..marks[r].pos.x..','..marks[r].pos.y..','..marks[r].pos.z..'}')end else for r=1,#marks do if string.lower(marks[r].name)==string.lower(b[2])then self.system.print(marks[r].name..' ::pos{0,0,'..marks[r].pos.x..','..marks[r].pos.y..','..marks[r].pos.z..'}')break end end end end elseif string.sub(string.lower(text),1,7)=='maxdps 'then local b={}for c in string.gmatch(text,"([^%s]+)")do table.insert(b,c)end;if tonumber(b[2])~=nil then maxdps=tonumber(b[2])*1000;self.system.print('Maximum dps scale set to '..maxdps)if databankInstalled then db.setFloatValue("maxdps",maxdps)end end elseif string.sub(string.lower(text),1,4)=='agg 'then local b={}for c in string.gmatch(text,"([^%s]+)")do table.insert(b,c)end;if self.antigrav and tonumber(b[2])~=nil then local v=tonumber(b[2])if v<1000 then v=1000 end;self.antigrav.setTargetAltitude(v)self.system.print('AGG height set to '..v)end elseif string.lower(text):find("/")then local b={}for c in string.gmatch(text,"([-0-9]+)")do table.insert(b,c)end;if tonumber(b[1])~=nil and tonumber(b[2])~=nil then if self.unit.getAtmosphereDensity()==0 then turntoBearing=tonumber(b[1])turntoPitch=tonumber(b[2])end end elseif string.lower(text)=="code"then if codeType=="FOX"then codeType="last"else codeType="FOX"end elseif string.sub(string.lower(text),1,3)=='tt 'then local b={}for c in string.gmatch(text,"([^%s]+)")do table.insert(b,c)end;if tonumber(b[2])~=nil then local w=b[2]*200000;local x=vec3(self.construct.getWorldPosition())local y=vec3(self.construct.getVelocity()):len()local z=vec3(self.construct.getWorldOrientationForward()):normalize()if y>300 then z=vec3(self.construct.getWorldVelocity()):normalize()end;travelPoint=w*z+x;travelMode=true elseif string.lower(b[2])=="off"then travelMode=false;travelPoint=nil else for r=1,#marks do if string.lower(marks[r].name)==string.lower(b[2])then travelPoint=marks[r].pos;travelMode=true;break end end end elseif string.sub(string.lower(text),1,4)=='fix 'then local b={}for c in string.gmatch(text,"([^%s]+)")do table.insert(b,c)end;local A=30;if tonumber(b[2])~=nil then A=tonumber(b[2])end;if tonumber(b[3])~=nil then fixRange=tonumber(b[3])end;A=A*200000;local x=vec3(self.construct.getWorldPosition())local z=vec3(self.construct.getWorldOrientationForward()):normalize()fixPoint=A*z+x;self.system.print('Fix - ::pos{0,0,'..fixPoint.x..','..fixPoint.y..','..fixPoint.z..'}')end
        end

        function FOX_Flight_Local.onActionStart(self,actionName)
            if actionName=="gear"then gearExtended=not gearExtended;if gearExtended then self.Nav.control.deployLandingGears()else self.Nav.control.retractLandingGears()end elseif actionName=="light"then if self.Nav.control.isAnyHeadlightSwitchedOn()then self.Nav.control.switchOffHeadlights()else self.Nav.control.switchOnHeadlights()end elseif actionName=="forward"then pitchInput=pitchInput-1;turntoBearing=nil;turntoPitch=nil elseif actionName=="backward"then pitchInput=pitchInput+1;turntoBearing=nil;turntoPitch=nil elseif actionName=="left"then rollInput=rollInput-1;turntoBearing=nil;turntoPitch=nil elseif actionName=="right"then rollInput=rollInput+1;turntoBearing=nil;turntoPitch=nil elseif actionName=="straferight"then for a,b in pairs(torqueEngines)do b.enableTorque(false)b.setTags('',false)end;self.Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif actionName=="strafeleft"then for a,b in pairs(torqueEngines)do b.enableTorque(false)b.setTags('',false)end;self.Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif actionName=="up"then if gearExtended and dampen then self.Nav.control.retractLandingGears()gearExtended=false end;Landing=false;for a,b in pairs(torqueEngines)do b.enableTorque(false)b.setTags('',false)end;self.Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()self.Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif actionName=="down"then Landing=false;for a,b in pairs(torqueEngines)do b.enableTorque(false)b.setTags('',false)end;self.Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()self.Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif actionName=="groundaltitudeup"then if not underWater and surfaceEngineInstalled then Landing=false elseif underWater and surfaceEngineInstalled then hoverHeight=hoverHeight+1;if hoverHeight>7 then hoverHeight=7 end;showHoverMessage=90 end elseif actionName=="groundaltitudedown"then if not underWater and surfaceEngineInstalled then if surfaceDistance~=-1 and dampen then if not gearExtended then self.Nav.control.deployLandingGears()gearExtended=true end;Landing=true;showHoverMessage=90 end elseif surfaceEngineInstalled then hoverHeight=hoverHeight-1;if hoverHeight<-5 then hoverHeight=-5 end;showHoverMessage=90 end elseif actionName=="yawright"then yawInput=yawInput-1;turntoBearing=nil;turntoPitch=nil elseif actionName=="yawleft"then yawInput=yawInput+1;turntoBearing=nil;turntoPitch=nil elseif actionName=="option1"then if self.unit.getAtmosphereDensity()>0 or rawaaltitude>0 and rawaaltitude<20000 then if autoMode=="level"then autoMode=false else autoMode="level"end elseif shieldInstalled then if shiftedState==true then shield.deactivate()else shield.activate()end;if autoMode=="level"then autoMode=false end else if autoMode=="level"then autoMode=false end end elseif actionName=="option2"then if shieldInstalled then local c=shield.getStressRatioRaw()local d=c[1]+c[2]+c[3]+c[4]local e=shield.getResistancesPool()if d<1 and d>0 then local f=1-d;local g=math.max(c[1],c[2],c[3],c[4])for h=1,4 do if c[h]==g then c[h]=c[h]+f;break end end else self.system.print('No Current Stress')end;if d>0.5 and d<=1 and shield.getResistancesCooldown()==0 then shield.setResistances(c[1]*e,c[2]*e,c[3]*e,c[4]*e)self.system.print('Resistances Balanced to Stress')if not self.system.isPlayingSound()then self.system.playSound('fox/res stress.mp3')end elseif shield.getResistancesCooldown()>0 then self.system.print('Resistances in cooldown, '..tostring(math.ceil(shield.getResistancesCooldown()))..' secs')if not self.system.isPlayingSound()then self.system.playSound('fox/res cd.mp3')end end end elseif actionName=="option3"then if shiftedState==true then autoMode=false elseif roidTrack==0 then if autoMode=="radialout"then autoMode="radialin"elseif autoMode=="radialin"then autoMode=false elseif autoMode=="pro"then autoMode="retro"elseif autoMode=="retro"then if self.unit.getAtmosphereDensity()>0 or rawaaltitude>0 and rawaaltitude<20000 then autoMode="radialout"else autoMode=false end elseif autoMode=="WP"then autoMode="pro"else if alignmentTarget~=nil then autoMode="WP"else autoMode="pro"end end end elseif actionName=="option12"then if autoMode=="tokyoleft"then autoMode="tokyoright"else autoMode="tokyoleft"end elseif actionName=="option4"then if gyro~=nil then if not gyro.isActive()then gyro.activate()maxKinematicSpaceFwdCombat=self.construct.getMaxThrustAlongAxis("fueled space_engine longitudinal not_ground thrust combat",gyro.getForward())[3]maxKinematicSpaceFwd=self.construct.getMaxThrustAlongAxis("fueled space_engine longitudinal not_ground thrust",gyro.getForward())[3]maxKinematicSpaceFwdBoost=self.construct.getMaxThrustAlongAxis("rocket_engine",gyro.getForward())[3]if maxKinematicSpaceFwdCombat>0 then maxKinematicSpaceFwdCruise=maxKinematicSpaceFwd-maxKinematicSpaceFwdCombat;combatEngines=true else maxKinematicSpaceFwdCruise=maxKinematicSpaceFwd end;totalMass=self.construct.getMass()fuelBurnPerSecL=0;for i,j in pairs(spaceEnginesGyro)do local k=j.maxpower*j.count/totalBasePowerGyro*maxKinematicSpaceFwd;local l=j.fuelrate*k*(1-0.05*SpaceEngineFuelEfficiency)fuelBurnPerSecL=fuelBurnPerSecL+l end else gyro.deactivate()maxKinematicSpaceFwdCombat=self.construct.getMaxThrustAlongAxis("fueled space_engine longitudinal not_ground thrust combat",self.construct.getOrientationForward())[3]maxKinematicSpaceFwd=self.construct.getMaxThrustAlongAxis("fueled space_engine longitudinal not_ground thrust",self.construct.getOrientationForward())[3]maxKinematicSpaceFwdBoost=self.construct.getMaxThrustAlongAxis("rocket_engine",self.construct.getOrientationForward())[3]if maxKinematicSpaceFwdCombat>0 then maxKinematicSpaceFwdCruise=maxKinematicSpaceFwd-maxKinematicSpaceFwdCombat;combatEngines=true else maxKinematicSpaceFwdCruise=maxKinematicSpaceFwd end;totalMass=self.construct.getMass()fuelBurnPerSecL=0;for i,j in pairs(spaceEngines)do local k=j.maxpower*j.count/totalBasePower*maxKinematicSpaceFwd;local l=j.fuelrate*k*(1-0.05*SpaceEngineFuelEfficiency)fuelBurnPerSecL=fuelBurnPerSecL+l end end end elseif actionName=="option5"then if damageMode then damageMode=false;self.unit.stopTimer('dmgReport')svgDmg=[[]]self.player.freeze(1)self.system.showHelper(0)elseif not settingMode then damageMode=true;self.unit.setTimer('dmgReport',0.0001)if self.unit.isRemoteControlled()and not self.player.isSeated()then self.player.freeze(0)end;self.system.showHelper(1)end elseif actionName=="speedup"then self.Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,5.0)elseif actionName=="speeddown"then self.Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-5.0)elseif actionName=="option10"then if dampen then dampen=false else dampen=true end elseif actionName=="option11"then if brakeLocked then brakeLocked=false;brakeState=false else brakeLocked=true;brakeState=true end elseif actionName=="option7"then if tracking then tracking=false else tracking=true end elseif actionName=="option8"then if not damageMode and not settingMode then settingMode=true;self.unit.setTimer('config',0.05)self.system.lockView(1)else settingMode=false;self.unit.stopTimer('config')svgSettings=[[]]self.system.lockView(0)end elseif actionName=="leftmouse"and shiftedState and not atmoPips and self.system.getCameraMode()==2 then self.system.print('BEARING: '..string.format("%01d",math.floor(rayangle))..' degrees /  PITCH: '..string.format("%01d",math.floor(raypitch))..' degrees')elseif actionName=="leftmouse"and settingMode then local m=math.floor(self.system.getMousePosX()/self.system.getScreenWidth()*1920)local n=math.floor(self.system.getMousePosY()/self.system.getScreenHeight()*1080)if m>950 and m<1095 and n>285 and n<305 then local o=math.floor((m-950)/24.2)pilotTalentSet=true;SpaceEngineFuelEfficiency=o;buildTanks()if databankInstalled then local p=false;for h=1,#pilotTalents do if pilotTalents[h].pilot==self.player.getId()then pilotTalents[h].SpaceEngineFuelEfficiency=SpaceEngineFuelEfficiency;p=true;break end end;if not p then local q={}q.pilot=self.player.getId()q.SpaceEngineFuelEfficiency=SpaceEngineFuelEfficiency;pilotTalents[#pilotTalents+1]=q end;local r=json.encode(pilotTalents)db.setStringValue("pilotTalents",r)end;showTalentMessage=90 end;if m>948 and m<1003 and n>315 and n<335 then local s=math.floor((m-948)/27.5)if s==0 then showAtlasMarks=true else showAtlasMarks=false end;if databankInstalled then if showAtlasMarks then db.setStringValue("showAtlasMarks","true")else db.setStringValue("showAtlasMarks","false")end end end;if m>948 and m<1033 and n>375 and n<395 then local s=math.floor((m-948)/28.333)showPipeMark=s;if databankInstalled then db.setFloatValue("showPipeMark",showPipeMark)end end;if m>948 and m<1003 and n>405 and n<425 then local s=math.floor((m-948)/27.5)if s==0 then showSafeZoneMark=true else showSafeZoneMark=false end;if databankInstalled then if showSafeZoneMark then db.setStringValue("showSafeZoneMark","true")else db.setStringValue("showSafeZoneMark","false")end end end;if m>948 and m<1053 and n>435 and n<455 then local s=math.floor((m-948)/52.5)if s==0 then toggleSpaceCompass=true else toggleSpaceCompass=false;spaceCompass=false end;if databankInstalled then if toggleSpaceCompass then db.setStringValue("toggleSpaceCompass","true")else db.setStringValue("toggleSpaceCompass","false")end end end;if m>948 and m<1003 and n>465 and n<485 then local s=math.floor((m-948)/27.5)if s==0 then autoLevelLowSpeed=true else autoLevelLowSpeed=false end;if databankInstalled then if autoLevelLowSpeed then db.setStringValue("autoLevelLowSpeed","true")else db.setStringValue("autoLevelLowSpeed","false")end end end;if m>1160 and m<1180 and n>235 and n<255 then settingMode=false;self.unit.stopTimer('config')svgSettings=[[]]self.system.lockView(0)end elseif actionName=="option9"then if shieldInstalled then if shield.isVenting()then shield.stopVenting()elseif not shield.isVenting()and shiftedState==true and shield.getVentingCooldown()==0 then shield.startVenting()end end elseif actionName=="lshift"then shiftedState=true;if toggleSpaceCompass then spaceCompass=not spaceCompass else spaceCompass=false end elseif actionName=="lalt"then laltState=true;if gunner then self.Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].throttleMouseStepScale=0 else self.Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].throttleMouseStepScale=1 end elseif actionName=="brake"then brakeState=true;brakeKey=true elseif actionName=="booster"then if rocketsEngaged then rocketsEngaged=false elseif rocketEngines then rocketsEngaged=true end elseif actionName=="stopengines"then local t=0;if self.Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)==1 then t=self.Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)else t=self.Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal)end;if t~=0 then self.Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)if combatEngines then combatTht=0 end else goButton=true;self.Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,100)if combatEngines then combatTht=100 end end elseif actionName=="antigravity"then if self.antigrav~=nil then self.antigrav.toggle()end elseif actionName=="warp"then if self.warpdrive~=nil then self.warpdrive.activateWarp()end end
        end

        function FOX_Flight_Local.onActionStop(self,actionName)
            if actionName=="forward"then pitchInput=pitchInput+1 elseif actionName=="backward"then pitchInput=pitchInput-1 elseif actionName=="left"then rollInput=rollInput+1 elseif actionName=="right"then rollInput=rollInput-1 elseif actionName=="straferight"then for a,b in pairs(torqueEngines)do b.enableTorque(true)b.setTags('torque',true)end;self.Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif actionName=="strafeleft"then for a,b in pairs(torqueEngines)do b.enableTorque(true)b.setTags('torque',true)end;self.Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif actionName=="up"then for a,b in pairs(torqueEngines)do b.enableTorque(true)b.setTags('torque',true)end;self.Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)elseif actionName=="down"then for a,b in pairs(torqueEngines)do b.enableTorque(true)b.setTags('torque',true)end;self.Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)elseif actionName=="yawright"then yawInput=yawInput+1 elseif actionName=="yawleft"then yawInput=yawInput-1 elseif actionName=="leftmouse"and settingMode then if databankInstalled then db.setFloatValue("showMarkRange",showMarkRange)end elseif actionName=="lshift"then shiftedState=false elseif actionName=="lalt"then laltState=false;self.Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].throttleMouseStepScale=mouseStepScale elseif actionName=="brake"then if shiftedState==false then brakeLocked=false;brakeState=false else brakeLocked=true end;brakeKey=false end
        end

        function FOX_Flight_Local.onActionLoop(self,actionName)
            if actionName=="leftmouse"and settingMode then local a=math.floor(self.system.getMousePosX()/self.system.getScreenWidth()*1920)local b=math.floor(self.system.getMousePosY()/self.system.getScreenHeight()*1080)if a>950 and a<1160 and b>345 and b<365 then local c=(a-950)*2;if c>400 then c=400 end;showMarkRange=c end elseif actionName=="speedup"then self.Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,1.0)elseif actionName=="speeddown"then self.Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-1.0)end
        end

        function FOX_Flight_Local.onAbsorbed(self,hitpoints,rawHitpoints)
            incoming=incoming+hitpoints;if hitpoints/rawHitpoints>.85 then if self.system.getUtcTime()-lastShieldWarning>10 then lastShieldWarning=self.system.getUtcTime()if self.system.isPlayingSound()then self.system.stopSound()end;self.system.playSound('fox/Check shield resistances.mp3')elseif not self.system.isPlayingSound()then self.system.playSound('fox/shield hit.mp3')end;showMismatchMsg=100 else if not self.system.isPlayingSound()then self.system.playSound('fox/shield hit.mp3')end end
        end
        
        script = FOX_Flight_Local.new(system, core, unit, warpdrive, antigrav)

  unit:
    onStart:
      lua: script.onStart(script)
    onStop:
      lua: script.onStop(script)
    onTimer(timerId):
      lua: script.onTimer(script,timerId)
  system:
    onActionStart(action):
      lua: script.onActionStart(script,action)
    onActionStop(action):
      lua: script.onActionStop(script,action)
    onActionLoop(action):
      lua: script.onActionLoop(script,action)
    onUpdate:
      lua: script.onUpdate(script)
    onFlush:
      lua: script.onFlush(script)
    onInputText(text):
      lua: script.onInputText(script,text)
  shield:
    onAbsorbed(hitpoints,rawHitpoints):
      lua: script.onAbsorbed(script,hitpoints,rawHitpoints)

