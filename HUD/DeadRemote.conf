name: DeadRemote v4.2.0

slots:
    core:
        class: CoreUnit
    db:
        class: DataBank
        select: all
    radar:
        class: RadarPVPUnit
        select: manual
    shield:
        class: ShieldGeneratorUnit
        select: all
    transponder:
        class: TransponderUnit
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    gyro:
        class: GyroUnit

handlers:
  unit:
    onTimer:
      args: ['code']
      lua: |
          if transponder_1 ~= nil then
              tags = transponder_1.getTags()
              if not transponder_1.isActive() then transponder_1.activate() end
          end
          
          if transponder_1 and codeSeed then
              local a = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
              math.randomseed(tonumber(string.format('%.0f',codeSeed + system.getArkTime()/rollTimer)))
              local genCode = 'AGC'
              for i = 1,5 do
                  local c = math.random(1,string.len(a))
                  genCode = genCode .. string.sub(a,c,c)
              end
          
              if cOverlapTick > 5 then unit.stopTimer('overlap') end
          
              local cApplied = contains(tags,genCode)
              if genCode ~= tCode or not cApplied then
          
                  if cOverlapTick == 0 or cOverlapTick > 3 then 
                      local r = {}
                      for i,v in ipairs(tags) do
                          if string.starts(v,'AGC') then
                              table.insert(r,i)
                          end
                      end
                      for _,i in ipairs(r) do table.remove(tags,i) end
          
                      if cOverlapTick == 0 and tCode ~= nil then
                          cOverlapTick = 1
                          unit.setTimer('overlap',2)
                      end
                      if cOverlapTick >= 3 or tCode == nil then
                          unit.stopTimer('overlap')
                          tCode = genCode
                          cOverlapTick = 0
                          local r = {}
                          for i,v in ipairs(tags) do
                              if string.starts(v,'AGC') then
                                  table.insert(r,i)
                              end
                          end
                          for _,i in ipairs(r) do table.remove(tags,i) end
                          table.insert(tags,genCode)
                          transponder_1.setTags(tags)
                      else
                          table.insert(tags,genCode)
                          table.insert(tags,tCode)
                          transponder_1.setTags(tags)
                      end
                  end
              end
          end
    onTimer:
      args: ['overlap']
      lua: |
          cOverlapTick = cOverlapTick + 1
    onTimer:
      args: ['booster']
      lua: |
          boosterCount = boosterCount + 1
          local accelerating = false
          if boosterSpeedThreshold > speed then
              accelerating = true
          end
          if accelerating then
              system.print('Accelerating')
              if boosterCount % 3 == 0 then
                  if Nav.boosterState then 
                      --system.print('Boosters off')
                      Nav:toggleBoosters()
                  end
              else
                  if not Nav.boosterState then
                      --system.print('Boosters on')
                      Nav:toggleBoosters()
                  end
              end
          else
              system.print('Maintaining')
              if boosterCount % 3 == 0 then
                  if not Nav.boosterState then 
                      --system.print('Boosters on')
                      Nav:toggleBoosters()
                  end
              else
                  if Nav.boosterState then 
                      --system.print('Boosters off')
                      Nav:toggleBoosters()
                  end
              end
          end
    onStart:
      lua: |
        -- Add Valid User ID --
        masterPlayerID = player.getId()
        pilotName = system.getPlayerName(masterPlayerID)
        validPilotCode = '123456' --Your player ID
        ----------------------
        
        ------- Predifined Engine Tags -------
        predefinedTags = {}
        table.insert(predefinedTags,'military')
        table.insert(predefinedTags,'maneuver')
        table.insert(predefinedTags,'freight')
        --------------------------------------
        
        showAlerts = false
        
        ---------------------------------------

        hudVersion = 'v4.2.0'
        system.print('-- '..hudVersion..' --')
        screenRefreshRate = 0.1 --export
        useDB = true --export
        caerusOption = false --export
        validatePilot = false --export
        toggleBrakes = true --export
        autoVent = true --export Autovent shield at 0 hp
        asteroidPipes = false --export Calculate pipes to "Asteroids.lua" file
        trackerMode = false --export Use input position tags as location trackers instead of auto-pilot
        trackerList = {}
        homeBaseLocation = '' --export Location of home base (to turn off shield)
        homeBaseDistance = 5 --export Distance from home base to turn off shield (km)
        defaultHoverHeight = 42 --export
        boosterSpeedThreshold = 55000 --export km/h
        topHUDLineColorSZ = 'rgba(150, 175, 185, .75)' --export
        topHUDFillColorSZ = 'rgba(25, 25, 50, 0.35)' --export
        textColorSZ = 'rgba(225, 250, 265, 1)' --export
        topHUDLineColorPVP = 'rgba(220, 50, 50, .75)' --export
        topHUDFillColorPVP = 'rgba(175, 75, 75, 0.30)' --export
        textColorPVP = 'rgba(225, 250, 265, 1)' --export
        fuelTextColor = 'rgba(200, 225, 235, 1)' --export
        neutralFontColor = 'white' --export
        neutralLineColor = 'lightgrey' --export
        Indicator_Width = 1.5
        Direction_Indicator_Size = 5 --export
        Direction_Indicator_Color = 'rgba(200, 225, 235, 1)' --export
        Prograde_Indicator_Size = 7.5 --export
        Prograde_Indicator_Color = 'rgb(60, 255, 60)' --export
        AP_Brake_Buffer = 5000 --export
        AP_Max_Rotation_Factor = 10 --export
        AR_Mode = 'NONE' --export
        AR_Range = 3 --export
        AR_Size = 15 --export
        AR_Fill = 'rgb(29, 63, 255)' --export
        AR_Outline = 'rgba(125, 150, 160, 1)' --export
        AR_Opacity = '0.5' --export
        AR_Exclude_Moons = true --export
        EngineTagColor = 'rgb(60, 255, 60)' --export
        initialResistWait = 15
        autoVent = true
        warning_size = 0.75 --export How large the warning indicators should be.
        warning_outline_color = 'rgb(255, 60, 60)' --export
        warning_fill_color = 'rgba(50, 50, 50, 0.9)' --export
        useLogo = false --export Enable the logo to be shown on the HUD. Must use the logo variable in unit.onStart and logo must be in SVG format.
        logoSVG = '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0" y="0" viewBox="0 0 1024 612" xml:space="preserve" enable-background="new 0 0 1024 612"> 	<defs> 		<filter id="glow"> 			<feGaussianBlur result="coloredBlur" stdDeviation="10"/> 		</filter> 	</defs> 	<style> 		.blue{ 			fill: rgb(255, 65, 65) 		} 		.animationBlur{ 			filter:url(#glow) 		} 		.animationBlur, .animationSolid{ 			fill:rgb(255, 65, 65); 			stroke:rgb(255, 65, 65); 			stroke-width:14; 			stroke-miterlimit:18.6667; 			stroke-dasharray:4000; 		} 	</style> 	 	<path class="animationBlur" d="M313.3 138.1c26.4-2.1 50.1 9.8 64.6 29.1 11.2 14.9 32.4 17.8 47.2 6.3 2.5-2 22.5-17.6 25-19.6 14.2-11.1 16.7-31.6 5.9-46-34-45.1-89.9-72.7-152-67.3-82.9 7.3-149.2 75.1-155 158-6.9 99.9 72.1 183.2 170.5 183.2 43.4-1.8 73.5-14.2 103.8-35.1 43.5-30.1 87.6-77.7 171.6-137.5-28.3 5.8-66.6 20-107.7 34.6-57.1 20.2-119.5 41-167.8 40.1-41.4 0-74.9-34.5-73-76.4 1.7-36.3 30.8-66.5 66.9-69.4z"/> 	<path class="animationSolid" d="M313.3 138.1c26.4-2.1 50.1 9.8 64.6 29.1 11.2 14.9 32.4 17.8 47.2 6.3 2.5-2 22.5-17.6 25-19.6 14.2-11.1 16.7-31.6 5.9-46-34-45.1-89.9-72.7-152-67.3-82.9 7.3-149.2 75.1-155 158-6.9 99.9 72.1 183.2 170.5 183.2 43.4-1.8 73.5-14.2 103.8-35.1 43.5-30.1 87.6-77.7 171.6-137.5-28.3 5.8-66.6 20-107.7 34.6-57.1 20.2-119.5 41-167.8 40.1-41.4 0-74.9-34.5-73-76.4 1.7-36.3 30.8-66.5 66.9-69.4z"/> 	<path class="animationBlur" d="M707 283.9c-26.4 2.1-50.1-9.8-64.6-29.1-11.2-14.9-32.5-17.8-47.2-6.3-2.5 2-22.5 17.6-25 19.5-14.2 11.1-16.7 31.6-5.9 46 34 45.1 89.9 72.7 152 67.3 82.9-7.3 149.1-75 154.9-158 7-99.8-72-183.1-170.5-183.1-43.3 1.8-73.4 14.2-103.8 35.1-43.5 30.1-87.6 77.7-171.6 137.5 28.3-5.8 66.6-20 107.7-34.6 57.1-20.2 119.5-41 167.8-40.1 41.5 0 74.9 34.5 73 76.4-1.6 36.3-30.7 66.5-66.8 69.4z"/> 	<path class="animationSolid" d="M707 283.9c-26.4 2.1-50.1-9.8-64.6-29.1-11.2-14.9-32.5-17.8-47.2-6.3-2.5 2-22.5 17.6-25 19.5-14.2 11.1-16.7 31.6-5.9 46 34 45.1 89.9 72.7 152 67.3 82.9-7.3 149.1-75 154.9-158 7-99.8-72-183.1-170.5-183.1-43.3 1.8-73.4 14.2-103.8 35.1-43.5 30.1-87.6 77.7-171.6 137.5 28.3-5.8 66.6-20 107.7-34.6 57.1-20.2 119.5-41 167.8-40.1 41.5 0 74.9 34.5 73 76.4-1.6 36.3-30.7 66.5-66.8 69.4z"/> 	<g id="g3848"> 		<path id="path83" class="blue" d="M149.6 500.4h13.7v-68.5h-13.7v68.5z"/> 		<path id="path85" class="blue" d="M212.2 500.4h13.7v-47.5l41.1 47.5h13.7v-68.5H267v47.5l-41.1-47.5h-13.7v68.5z"/> 		<path id="path87" class="blue" d="M329.5 500.4h13.7V473h41.1v-13.7h-41.1v-13.7H398v-13.7h-68.5v68.5z"/> 		<path id="path89" class="blue" d="M446.8 500.4h13.7v-68.5h-13.7v68.5z"/> 		<path id="path91" class="blue" d="M509.3 500.4H523v-47.5l41.1 47.5h13.7v-68.5h-13.7v47.5L523 431.9h-13.7v68.5z"/> 		<path id="path93" class="blue" d="M626.7 500.4h13.7v-68.5h-13.7v68.5z"/> 		<path id="path95" class="blue" d="M689.2 431.9v13.7h27.4v54.8h13.7v-54.8h27.4v-13.7h-68.5z"/> 		<path id="path97" class="blue" d="M806.5 431.9v10.3c0 5.7 2.8 10.4 6.1 13.1l21.3 17.7v27.4h13.7V473l21.3-17.7c3.3-2.7 6.1-7.5 6.1-13.1v-10.3h-13.7v10.3c0 .9-.4 2-1.2 2.6L840.7 461l-19.4-16.2c-.8-.6-1.2-1.6-1.2-2.6v-10.3h-13.6z"/> 	</g> 	<g id="g3838"><path id="path60" class="blue" d="M206.4 534.3h-44.5c-8.2 0-14.8 6.7-14.8 14.8v29.7c0 8.2 6.7 14.8 14.8 14.8h44.5v-9.7h-44.5c-2.8 0-5.2-2.4-5.2-5.2V549c0-2.8 2.4-5.2 5.2-5.2h44.5v-9.5z"/> 		<path id="path62" class="blue" d="M218.3 578.9c0 8.2 6.7 14.8 14.8 14.8h29.7c8.2 0 14.8-6.7 14.8-14.8v-29.7c0-8.2-6.7-14.8-14.8-14.8h-29.7c-8.2 0-14.8 6.7-14.8 14.8v29.7zm14.9 5.2c-2.8 0-5.2-2.4-5.2-5.2v-29.7c0-2.8 2.4-5.2 5.2-5.2h29.7c2.8 0 5.2 2.4 5.2 5.2v29.7c0 2.8-2.4 5.2-5.2 5.2h-29.7z"/> 		<path id="path64" class="blue" d="M289.7 593.7h9.7v-24.9h20.3l17.5 24.9h11.9l-17.5-24.9h2.7c8.2 0 14.8-6.7 14.8-14.8v-4.8c0-8.2-6.7-14.8-14.8-14.8h-44.5v59.3zm9.6-34.5V544h34.9c2.8 0 5.2 2.4 5.2 5.2v4.8c0 2.8-2.4 5.2-5.2 5.2h-34.9z"/> 		<path id="path66" class="blue" d="M361 593.7h9.7v-24.9h34.9c8.2 0 14.8-6.7 14.8-14.8v-4.8c0-8.2-6.7-14.8-14.8-14.8H361v59.3zm9.7-34.5V544h34.9c2.8 0 5.2 2.4 5.2 5.2v4.8c0 2.8-2.4 5.2-5.2 5.2h-34.9z"/> 		<path id="path68" class="blue" d="M432.4 578.9c0 8.2 6.7 14.8 14.8 14.8h29.7c8.2 0 14.8-6.7 14.8-14.8v-29.7c0-8.2-6.7-14.8-14.8-14.8h-29.7c-8.2 0-14.8 6.7-14.8 14.8v29.7zm14.8 5.2c-2.8 0-5.2-2.4-5.2-5.2v-29.7c0-2.8 2.4-5.2 5.2-5.2h29.7c2.8 0 5.2 2.4 5.2 5.2v29.7c0 2.8-2.4 5.2-5.2 5.2h-29.7z"/> 		<path id="path70" class="blue" d="M503.7 593.7h9.7v-24.9h20.3l17.5 24.9h11.9l-17.5-24.9h2.7c8.2 0 14.8-6.7 14.8-14.8v-4.8c0-8.2-6.7-14.8-14.8-14.8h-44.5v59.3zm9.7-34.5V544h34.9c2.8 0 5.2 2.4 5.2 5.2v4.8c0 2.8-2.4 5.2-5.2 5.2h-34.9z"/> 		<path id="path72" class="blue" d="M575.1 593.7h9.7v-24.9h40.1v24.9h9.7v-44.5c0-8.2-6.7-14.8-14.8-14.8h-29.7c-8.2 0-14.8 6.7-14.8 14.8l-.2 44.5zm9.6-34.5v-10c0-2.8 2.4-5.2 5.2-5.2h29.7c2.8 0 5.2 2.4 5.2 5.2v10h-40.1z"/> 		<path id="path74" class="blue" d="M646.4 534.3v9.7h24.9v49.7h9.7V544h24.9v-9.7h-59.5z"/> 		<path id="path76" class="blue" d="M718.9 593.7h9.7v-59.4h-9.7v59.4z"/><path id="path78" class="blue" d="M741.6 578.9c0 8.2 6.7 14.8 14.8 14.8h29.7c8.2 0 14.8-6.7 14.8-14.8v-29.7c0-8.2-6.7-14.8-14.8-14.8h-29.7c-8.2 0-14.8 6.7-14.8 14.8v29.7zm14.8 5.2c-2.8 0-5.2-2.4-5.2-5.2v-29.7c0-2.8 2.4-5.2 5.2-5.2h29.7c2.8 0 5.2 2.4 5.2 5.2v29.7c0 2.8-2.4 5.2-5.2 5.2h-29.7z"/> 		<path id="path80" class="blue" d="M812.9 593.7h9.7v-44.6l40.1 44.6h9.7v-59.4h-9.7V579l-40.1-44.6h-9.7v59.3z"/> 	</g> </svg>' --export SVG Logo that will be placed in the top left of the HUD (automatically scaled)
        showRemotePanel = false --export
        showDockingPanel = false --export
        showFuelPanel = false --export
        showHelper = false --export
        showShieldWidget = false --export
        dampening = true --inertial dampening
        
        minimalWidgets = false
        -- HP (Shield/CCS) widget --
        hpWidgetX = 33 --export
        hpWidgetY = 88 --export
        hpWidgetScale = 17 --export
        shieldHPColor = 'rgb(25, 247, 255)' --export
        ccsHPColor = 'rgb(60, 255, 60)' --export
        -- Resist Widget --
        resistWidgetX = 45 --export
        resistWidgetY = 82 --export
        resistWidgetScale = 8.5 --export
        antiMatterColor = 'rgb(56, 255, 56)' --export
        electroMagneticColor = 'rgb(27, 255, 217)' --export
        kineticColor = 'rgb(255, 75, 75)' --export
        thermicColor = 'rgb(255, 234, 41)' --export
        
        -- Transponder Widget --
        transponderWidgetX = 40 --export
        transponderWidgetY = 67 --export
        transponderWidgetScale = 11.25 --export
        
        transponderWidgetXmin = 58.5 --export
        transponderWidgetYmin = -0.9 --export
        transponderWidgetScalemin = 10 --export
        
        -- Ship information Widget --
        shipInfoWidgetX = 76.5
        shipInfoWidgetY = -0.9
        shipInfoWidgetScale = 10
        
        -- WayPoint File Info
        validWaypointFiles = {}
        ------------------------------------
        boosterOn = false
        boosterPulseOn = false
        boosterCount = 0
        
        
        userCode = {}
        userCode[validPilotCode] = pilotName
        if db_1 ~= nil and useDB then
            globalDB('get')
        end
        
        if caerusOption then
            shipInfoWidgetX = 53
            shipInfoWidgetY = 80
            shipInfoWidgetScale = 12
        end
        
        if db_1 ~= nil then
            for _,key in pairs(db_1.getKeyList()) do
                if db_1.getStringValue(key) ~= nil and db_1.getStringValue(key) ~= '' and string.starts(key,'uc-') then 
                    userCode[string.sub(key,4)] = db_1.getStringValue(key)
                end
            end
        end
        
        -- Transponder --
        showCode = false
        codeTimer = 5
        codeCount = 0
        codeSeed = nil
        tags = {}
        transponderStatus = false
        tCode = nil
        cOverlap = false
        cOverlapTick = 0
        codeSeed = nil
        rollTimer = 120 --Roll code timer in seconds
        if pcall(require,'autoconf/custom/transponder') then 
            codeSeed = tonumber(require('autoconf/custom/transponder'))
        end
        unit.setTimer('code',0.25)
        
        -----------------
        
        ---- Initialization ---
        arkTime = system.getArkTime()
        dpsTracker = {}
        dpsChart = {}
        dpsChart[1] = 0
        dpsChart[2] = 0
        dpsChart[3] = 0
        dpsChart[4] = 0
        constructPosition = vec3(construct.getWorldPosition())
        cr = nil
        cr_ar = nil
        followID = nil
        followSpeedMod = 0
        AR_Custom_Points = {}
        AR_Custom = false
        AR_Temp = false
        AR_Temp_Points = {}
        asteroidPipeList = {}
        
        AR_Array = {}
        
        legacyFile = false
        if pcall(require,'autoconf/custom/DeadRemote_CustomFileIndex') then
            customFiles = require('autoconf/custom/DeadRemote_CustomFileIndex')
            if type(customFiles) == "table" then
                for waypointFileId,waypointFile in ipairs(customFiles) do
                    system.print('Found waypointFileId: '..waypointFileId..' displayName='..waypointFile.DisplayName..' waypointFilePath='..waypointFile.FilePath)
                    if pcall(require,waypointFile.FilePath) then
                        waypoints = require(waypointFile.FilePath)
                        if asteroidPipes and waypointFile.DisplayName == 'Asteroids' then asteroidPipeList = waypoints end
                        if type(waypoints) == "table" then
                            table.insert(validWaypointFiles,waypointFile)
                            AR_Array[#validWaypointFiles] = {}
                            system.print('Adding waypoints from '..waypointFile.FilePath)
                            for name,pos in pairs(waypoints) do
                                AR_Custom_Points[name] = pos
                                                AR_Array[#validWaypointFiles][name]=pos
                                AR_Custom = true
                            end
                        else
                            system.print('Failed to load waypoints from '..waypointFile.FilePath)
                        end
                    else
                        system.print('Failed to load waypoints from '..waypointFile.FilePath)
                    end
                end
            end
        else
            legacyFile = true
            if pcall(require,'autoconf/custom/AR_Waypoints') then 
                waypoints = require('autoconf/custom/AR_Waypoints') 
                for name,pos in pairs(waypoints) do
                    AR_Custom_Points[name] = pos
                    AR_Custom = true
                end
            end
        end
        
        screenHeight = system.getScreenHeight()
        screenWidth = system.getScreenWidth()
        maxFuel = 0
        for i,v in pairs(spacefueltank) do maxFuel = maxFuel + v.getMaxVolume() end
        currentSystem = Atlas[0]
        planets = {}
        constructPosition = vec3(construct.getWorldPosition())
        warp_beacons = {}
        if pcall(require,'autoconf/custom/beacons') then 
            beacons = require('autoconf/custom/beacons') 
            for name,pos in pairs(beacons) do
                warp_beacons[name] = convertWaypoint(pos)
            end
        end
        for k,v in pairs(currentSystem) do 
            warp_beacons[currentSystem[k]['name'][1]] = vec3(currentSystem[k]['center']) 
            planets[currentSystem[k]['name'][1]] = vec3(currentSystem[k]['center']) 
        end
        pipes = {}
        SZ = vec3(13771471, 7435803, -128971)
        inSZ = true
        enabledEngineTags = {}
        milEng = false
        ------------------------------------
        
        -- Shield Initialize --
        dmgTick = 0
        homeBaseVec = vec3()
        if homeBaseLocation ~= '' then
            homeBaseVec = vec3(convertWaypoint(homeBaseLocation))
        end
        --------
        
        pitchInput = 0
        rollInput = 0
        yawInput = 0
        brakeInput = 0
        spaceBar = false
        
        Nav = Navigator.new(system, core, unit)
        Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000, 40000, 50000})
        Nav.axisCommandManager:setTargetGroundAltitude(0)
        
        -- Parenting widget
        if showDockingPanel then
            parentingPanelId = system.createWidgetPanel("Docking")
            parentingWidgetId = system.createWidget(parentingPanelId,"parenting")
            system.addDataToWidget(unit.getDataId(),parentingWidgetId)
        end
        
        
        -- element widgets
        -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
        if not showRemotePanel then
            unit.hideWidget()
            core.hideWidget()
        else
            unit.showWidget()
            core.showWidget()
        end
        
        placeRadar = true
        if atmofueltank_size > 0 and showFuelPanel then
            _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, "Atmo Fuel", "fuel_container")
            if placeRadar then
                _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
                placeRadar = false
            end
        end
        if spacefueltank_size > 0 and showFuelPanel then
            _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, "Space Fuel", "fuel_container")
            if placeRadar then
                _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
                placeRadar = false
            end
        end
        _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, "Rocket Fuel", "fuel_container")
        if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
            _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
            placeRadar = false
        end
        if antigrav ~= nil then antigrav.showWidget() end
        if warpdrive ~= nil then warpdrive.showWidget() end
        if gyro ~= nil then gyro.showWidget() end
        if shield_1 ~= nil and showShieldWidget then shield_1.showWidget() end
        
        -- freeze the player in he is remote controlling the construct
        seated = player.isSeated()
        if seated then
            player.freeze(1)
        end
        
        if not showHelper then
            system.showHelper(0)
        end
        
        -- landing gear
        -- make sure every gears are synchonized with the first
        gearExtended = (Nav.control.isAnyLandingGearDeployed()) -- make sure it is a lua boolean
        if gearExtended then
            Nav.control.deployLandingGears()
        else
            Nav.control.retractLandingGears()
        end
        
        if vec3(construct.getWorldVelocity()):len() * 3.6 < 500 then
            brakeInput = brakeInput + 1
        end
        
        lShift = false
        lAlt = false
        
        -- Validate pilot mode --
        if validatePilot then
            local validPilot = false
            for k,v in pairs(userCode) do 
                if k == tostring(player.getId()) then validPilot = true system.print(string.format('-- Welcome %s --',pilotName)) break end
            end
            if not validPilot then
                system.print(player.getId())
                unit.exit()
            end
        end
        ----------------------------
        
        showScreen = true
        fuelWarningText = ''
        warnings = {}
        warningSymbols = {}
        warningSymbols['svgCritical'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 414.205 414.205" style="enable-background:new 0 0 414.205 414.205;">
                            <g>
                                <g>
                                    <polygon points="188.077,129.985 188.077,129.99 165.759,226.671 216.626,207.046 204.891,257.867 194.589,257.867 
                                        206.99,293.641 235.908,257.867 225.606,257.867 244.561,175.773 193.693,195.398 208.797,129.985 		"/>
                                    <path d="M39.11,207.103l167.992,167.992L375.09,207.103L207.103,39.116L39.11,207.103z M207.103,351.103l-143.995-144
                                        L207.103,63.108l143.99,143.995L207.103,351.103z"/>
                                    <path d="M405.093,185.102L229.103,9.112c-12.15-12.15-31.846-12.15-43.996,0L9.112,185.102c-12.15,12.15-12.15,31.846,0,43.996
                                        l175.99,175.995c12.15,12.15,31.846,12.15,43.996,0l175.995-175.99C417.243,216.954,417.243,197.252,405.093,185.102z
                                        M393.092,217.097l-175.985,176c-2.673,2.668-6.226,4.137-10.004,4.137s-7.327-1.469-9.999-4.137L21.108,217.102
                                        c-5.514-5.514-5.514-14.484,0-19.999L197.103,21.108c2.673-2.667,6.221-4.137,9.999-4.137s7.332,1.469,10.004,4.142l175.99,175.99
                                        c2.673,2.673,4.142,6.226,4.142,9.999S395.764,214.429,393.092,217.097z"/>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgWarning'] = [[
                        <svg x="0px" y="0px"
                            viewBox="0 0 192.146 192.146" style="enable-background:new 0 0 192.146 192.146;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M108.186,144.372c0,7.054-4.729,12.32-12.037,12.32h-0.254c-7.054,0-11.92-5.266-11.92-12.32
                                            c0-7.298,5.012-12.31,12.174-12.31C103.311,132.062,108.059,137.054,108.186,144.372z M88.44,125.301h15.447l2.951-61.298H85.46
                                            L88.44,125.301z M190.372,177.034c-2.237,3.664-6.214,5.921-10.493,5.921H12.282c-4.426,0-8.51-2.384-10.698-6.233
                                            c-2.159-3.849-2.11-8.549,0.147-12.349l84.111-149.22c2.208-3.722,6.204-5.96,10.522-5.96h0.332
                                            c4.445,0.107,8.441,2.618,10.513,6.546l83.515,149.229C192.717,168.768,192.629,173.331,190.372,177.034z M179.879,170.634
                                            L96.354,21.454L12.292,170.634H179.879z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgTarget'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 330 330" style="enable-background:new 0 0 330 330;">
                            <g id="XMLID_813_">
                                <path id="XMLID_814_" d="M15,130c8.284,0,15-6.716,15-15V30h85c8.284,0,15-6.716,15-15s-6.716-15-15-15H15C6.716,0,0,6.716,0,15
                                    v100C0,123.284,6.716,130,15,130z"/>
                                <path id="XMLID_815_" d="M15,330h100c8.284,0,15-6.716,15-15s-6.716-15-15-15H30v-85c0-8.284-6.716-15-15-15s-15,6.716-15,15v100
                                    C0,323.284,6.716,330,15,330z"/>
                                <path id="XMLID_816_" d="M315,200c-8.284,0-15,6.716-15,15v85h-85c-8.284,0-15,6.716-15,15s6.716,15,15,15h100
                                    c8.284,0,15-6.716,15-15V215C330,206.716,323.284,200,315,200z"/>
                                <path id="XMLID_817_" d="M215,30h85v85c0,8.284,6.716,15,15,15s15-6.716,15-15V15c0-8.284-6.716-15-15-15H215
                                    c-8.284,0-15,6.716-15,15S206.716,30,215,30z"/>
                                <path id="XMLID_818_" d="M75,165c0,8.284,6.716,15,15,15h60v60c0,8.284,6.716,15,15,15s15-6.716,15-15v-60h60
                                    c8.284,0,15-6.716,15-15s-6.716-15-15-15h-60V90c0-8.284-6.716-15-15-15s-15,6.716-15,15v60H90C81.716,150,75,156.716,75,165z"/>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgGroup'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 487.3 487.3" style="enable-background:new 0 0 487.3 487.3;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M362.1,326.05c-32.6-26.8-67.7-44.5-74.9-48c-0.8-0.4-1.3-1.2-1.3-2.1v-50.7c6.4-4.3,10.6-11.5,10.6-19.7v-52.6
                                            c0-26.2-21.2-47.4-47.4-47.4h-5.6h-5.7c-26.2,0-47.4,21.2-47.4,47.4v52.6c0,8.2,4.2,15.5,10.6,19.7v50.7c0,0.9-0.5,1.7-1.3,2.1
                                            c-7.2,3.5-42.3,21.3-74.9,48c-5.9,4.8-9.3,12.1-9.3,19.7v36h128h127.9v-36C371.4,338.15,368,330.85,362.1,326.05z"/>
                                    </g>
                                    <g>
                                        <path d="M479.2,290.55c-27.3-22.5-56.8-37.4-62.8-40.3c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1
                                            c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.7c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8
                                            c-3.7,1.8-16.5,8.2-32.1,18.2c15.6,8.6,40.3,23.4,63.6,42.6c8.2,6.7,13.6,16,15.6,26.2h97v-30.2
                                            C487,300.65,484.2,294.55,479.2,290.55z"/>
                                    </g>
                                    <g>
                                        <path d="M144,250.25c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.9
                                            c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8c-6,2.9-35.5,17.8-62.8,40.3
                                            c-4.9,4.1-7.8,10.1-7.8,16.5v30.2h97c1.9-10.2,7.4-19.5,15.6-26.2c23.3-19.2,48-34,63.6-42.6
                                            C160.5,258.45,147.7,252.05,144,250.25z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgBrakes'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 234.409 234.409" style="enable-background:new 0 0 234.409 234.409;">
                            <g>
                                <path d="M117.204,30.677c-47.711,0-86.527,38.816-86.527,86.528c0,47.711,38.816,86.526,86.527,86.526s86.527-38.815,86.527-86.526
                                    C203.732,69.494,164.915,30.677,117.204,30.677z M117.204,188.732c-39.44,0-71.527-32.086-71.527-71.526
                                    c0-39.441,32.087-71.528,71.527-71.528s71.527,32.087,71.527,71.528C188.732,156.645,156.645,188.732,117.204,188.732z"/>
                                <path d="M44.896,44.897c2.929-2.929,2.929-7.678,0-10.607c-2.93-2.929-7.678-2.929-10.607,0
                                    c-45.718,45.719-45.718,120.111,0,165.831c1.465,1.465,3.384,2.197,5.304,2.197c1.919,0,3.839-0.732,5.303-2.197
                                    c2.93-2.929,2.93-7.677,0.001-10.606C5.026,149.643,5.026,84.768,44.896,44.897z"/>
                                <path d="M200.119,34.29c-2.93-2.929-7.678-2.929-10.607,0c-2.929,2.929-2.929,7.678,0,10.607
                                    c39.872,39.871,39.872,104.746,0,144.618c-2.929,2.929-2.929,7.678,0,10.606c1.465,1.464,3.385,2.197,5.304,2.197
                                    c1.919,0,3.839-0.732,5.304-2.197C245.839,154.4,245.839,80.009,200.119,34.29z"/>
                                <path d="M117.204,140.207c4.143,0,7.5-3.358,7.5-7.5v-63.88c0-4.142-3.357-7.5-7.5-7.5c-4.143,0-7.5,3.358-7.5,7.5v63.88
                                    C109.704,136.849,113.062,140.207,117.204,140.207z"/>
                                <circle cx="117.204" cy="156.254" r="9.329"/>
                            </g>
                        </svg>
                    ]]
        
        
        unit.setTimer('screen',screenRefreshRate)
        system.showScreen(1)
    onStop:
      lua: |
        _autoconf.hideCategoryPanels()
        if antigrav ~= nil then antigrav.hideWidget() end
        if warpdrive ~= nil then warpdrive.hideWidget() end
        if gyro ~= nil then gyro.hideWidget() end
        core.hideWidget()
        Nav.control.switchOffHeadlights()
        globalDB('save')
    onTimer:
      args: ['screen']
      lua: |
          Nav:update()
          
          arkTime = system.getArkTime()
          
          -- Check player seated status --
          seated = player.isSeated()
          if seated and not player.isFrozen() then
              player.freeze(1)
          elseif not seated and player.isFrozen() then
              player.freeze(0)
          end
          ----------------------------------
          
          
          
          -- Planet Location Updates --
          closestPlanetName,closestPlanetDist = closestPlanet()
          if cr == nil then
              cr = coroutine.create(closestPipe)
          elseif cr ~= nil then
              if coroutine.status(cr) == "suspended" then
                  coroutine.resume(cr)
              elseif coroutine.status(cr) == "dead" then
                  cr = nil
              end
          end
          closestPipeStr = string.format('%s (%s)',closestPipeName,formatNumber(closestPipeDistance,'distance'))
          closestPlanetStr = string.format('%s (%s)',closestPlanetName,formatNumber(closestPlanetDist,'distance'))
          ---- End Planet Updates ----
          
          -- Disable AutoPilot if to close to planet --
          if closestPlanetDist < 40000 and autopilot then 
              autopilot = false 
              brakeInput = 1
              brakesOn = true
              system.print('-- autopilot canceled due to planet proximity --')
          end
          
          -- Safe Zone Distance --
          inSZ = not construct.isInPvPZone()
          SZD = math.abs(construct.getDistanceToSafeZone())
          local tempSZD = vec3(constructPosition - SZ):len()
          nearestSZPOS = system.getWaypointFromPlayerPos()
          if closestPlanetDist < math.abs(tempSZD - 18000000) then
              local cPlanet = planets[closestPlanetName]
              nearestSZPOS = string.format('::pos{0,0,%.4f,%.4f,%.4f}',cPlanet['x'],cPlanet['y'],cPlanet['z'])
          else
              nearestSZPOS = '::pos{0,0,13771471,7435803,-128971}'
          end
          
          SZDStr = ''
          if SZD < 1000 then SZDStr = string.format('%.2f m',SZD)
          elseif SZD < 100000 then SZDStr = string.format('%.2f km',SZD/1000)
          else SZDStr = string.format('%.2f su',SZD*.000005)
          end
          ---------------------------
          
          -- Engine Tag Filtering --
          enabledEngineTagsStr = ''
          local tempTag = nil
          local offset = 0
          for i,tag in pairs(enabledEngineTags) do
              if i % 2 == 0 then 
                  enabledEngineTagsStr = enabledEngineTagsStr .. [[
                      <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring((.060 + (i-2)*.008) * screenHeight) ..[[" style="fill: ]]..EngineTagColor..[[;" font-weight="bold" font-size=".8vw">]]..tag.. ',' ..tempTag..[[</text>    
                  ]]
                  tempTag = nil
                  offset = offset + 1
              else
                  tempTag = tag
              end
          end
          if tempTag ~= nil then 
              enabledEngineTagsStr = enabledEngineTagsStr .. [[<text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring((.060 + (offset)*.016) * screenHeight) ..[[" style="fill: ]]..EngineTagColor..[[;" font-weight="bold" font-size=".8vw">]]..tempTag..[[</text>]]
          end
          if enabledEngineTagsStr == '' then
              enabledEngineTagsStr = [[<text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring((.060 + (offset)*.008) * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size=".8vw">ALL</text>]]
          end
          ----------------------------
          
          ---------------------------
          
          -- Generate on screen planets for Augmented Reality view --
          AR_Generate = {}
          if autopilot_dest_pos ~= nil then AR_Generate['AutoPilot'] = convertWaypoint(autopilot_dest_pos) end
          
          --Correcting cases where the user was using the legacy FROM_FILE mode
          if AR_Mode == 'FROM_FILE' and not legacyFile then AR_Mode = "ALL" end
          
          if AR_Mode == 'ALL' then
              for k,v in pairs(AR_Custom_Points) do 
                  AR_Generate[k] = convertWaypoint(v)
              end
              for k,v in pairs(planets) do
                  AR_Generate[k] = v
              end
              for k,v in pairs(AR_Temp_Points) do 
                  AR_Generate[k] = convertWaypoint(v)
              end
          elseif string.find(AR_Mode,"FILE") ~= nil and not legacyFile then
              i, j = string.find(AR_Mode,"FILE")
              fileNumber = tonumber(string.sub(AR_Mode,j+1))
              if fileNumber > #validWaypointFiles then 
                  AR_Mode= "None"
              elseif not legacyFile then
                  for k,v in pairs(AR_Array[fileNumber]) do 
                      AR_Generate[k] = convertWaypoint(v)
                  end
              end
          elseif AR_Mode == 'FROM_FILE' then
              for k,v in pairs(AR_Custom_Points) do 
                  AR_Generate[k] = convertWaypoint(v)
              end
          elseif AR_Mode == 'TEMPORARY' then
              for k,v in pairs(AR_Temp_Points) do 
                  AR_Generate[k] = convertWaypoint(v)
              end
          elseif AR_Mode == 'PLANETS' then
              for k,v in pairs(planets) do
                  AR_Generate[k] = v
              end
          end
          planetAR = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
          for name,pos in pairs(AR_Generate) do
              if not (name:find('Moon') or name:find('Haven') or name:find('Sanctuary') or name:find('Asteroid')) or not AR_Exclude_Moons then
                  local pDist = vec3(pos - constructPosition):len()
                  if pDist*0.000005 < 500  or planets[name] == nil then 
                      local pInfo = library.getPointOnScreen({pos['x'],pos['y'],pos['z']})
                      if pInfo[3] ~= 0 then
                          if pInfo[1] < .01 then pInfo[1] = .01 end
                          if pInfo[2] < .01 then pInfo[2] = .01 end
                          local fill = AR_Fill
                          if planets[name] == nil  and name ~= 'AutoPilot' then fill = 'rgb(49, 182, 60)'
                          elseif name == 'AutoPilot' then fill = 'red'
                          end
                          local translate = '(0,0)'
                          local depth = AR_Size * 1/( 0.02*pDist*0.000005)
                          local pDistStr = ''
                          if pDist < 1000 then pDistStr = string.format('%.2fm',pDist)
                          elseif pDist < 100000 then pDistStr = string.format('%.2fkm',pDist/1000)
                          else pDistStr = string.format('%.2fsu',pDist*0.000005)
                          end
                          if depth > AR_Size then depth = tostring(AR_Size) elseif depth < 1 then depth = '1' else depth = tostring(depth) end
                          if pInfo[1] < 1 and pInfo[2] < 1 then
                              translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight*pInfo[2])
                          elseif pInfo[1] > 1 and pInfo[1] < AR_Range and pInfo[2] < 1 then
                              translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*pInfo[2])
                          elseif pInfo[2] > 1 and pInfo[2] < AR_Range and pInfo[1] < 1 then
                              translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight)
                          else
                              translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                          end
                          if name == 'AutoPilot' then
                              planetAR = planetAR .. [[<g transform="translate]]..translate..[[">
                                      <circle cx="0" cy="0" r="]].. depth ..[[px" style="fill:]]..fill..[[;stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                      <line x1="0" y1="0" x2="]].. depth*1.2 ..[[" y2="]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                      <line x1="]].. depth*1.2 ..[[" y1="]].. depth*1.2 ..[[" x2="]]..tostring(depth*1.2 + 30)..[[" y2="]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                      <text x="]]..tostring(depth*1.2)..[[" y="]].. depth*1.2+screenHeight*0.008 ..[[" style="fill: ]]..AR_Outline..[[" font-size="]]..tostring(.04*AR_Size)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                      </g>]]
                          else
                              planetAR = planetAR .. [[<g transform="translate]]..translate..[[">
                                      <circle cx="0" cy="0" r="]].. depth ..[[px" style="fill:]]..fill..[[;stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                      <line x1="0" y1="0" x2="-]].. depth*1.2 ..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                      <line x1="-]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="-]]..tostring(depth*1.2 + 30)..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                      <text x="-]]..tostring(6*#name+depth*1.2)..[[" y="-]].. depth*1.2+screenHeight*0.0035 ..[[" style="fill: ]]..AR_Outline..[[" font-size="]]..tostring(.04*AR_Size)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                      </g>]]
                          end
                      end
                  end
              end
          end
          planetAR = planetAR .. '</svg>'
          -----------------------------------------------------------
          
          -- Shield Updates --
          if shield_1 then
              local srp = shield_1.getResistancesPool()
              local csr = shield_1.getResistances()
              local rcd = shield_1.getResistancesCooldown()
              if shield_1.getStressRatioRaw()[1] == 0 and shield_1.getStressRatioRaw()[2] == 0 and shield_1.getStressRatioRaw()[3] == 0 and shield_1.getStressRatioRaw()[4] == 0 then
                  dmgTick = 0
                  srp = srp / 4
                  if (csr[1] == srp and csr[2] == srp and csr[3] == srp and csr[4] == srp) or rcd ~= 0 then
                      --No change
                  else
                      shield_1.setResistances(srp,srp,srp,srp)
                  end
              elseif math.abs(arkTime - dmgTick) >= initialResistWait then
                  local srr = shield_1.getStressRatioRaw()
                  if (csr[1] == (srp*srr[1]) and csr[2] == (srp*srr[2]) and csr[3] == (srp*srr[3]) and csr[4] == (srp*srr[4])) or rcd ~= 0 then -- If ratio hasn't change, or timer is not up, don't waste the resistance change timer.
                      --No change
                  else
                      shield_1.setResistances(srp*srr[1],srp*srr[2],srp*srr[3],srp*srr[4])
                  end
              elseif dmgTick == 0 then
                  dmgTick = arkTime
              end
          
              local hp = shield_1.getShieldHitpoints()
              if not shield_1.isVenting() and hp == 0 and autoVent then
                  shield_1.startVenting()
              elseif not shield_1.isActive() and not shield_1.isVenting() or vec3(homeBaseVec - constructPosition):len() < homeBaseDistance*1000 then
                  if homeBaseVec then
                      if vec3(homeBaseVec - constructPosition):len() >= homeBaseDistance*1000 then
                          shield_1.activate()
                      else
                          shield_1.deactivate()
                      end
                  else
                      shield_1.activate()
                  end
              end
          
              local coreHP = 0
              if core_1 then coreHP = (core_1.getMaxCoreStress()-core_1.getCoreStress())/core_1.getMaxCoreStress() end
          end
          -- End Shield Updates --
          
          -- Choose background color scheme based on PVP --
          bgColor = ''
          lineColor = ''
          fontColor = ''
          if inSZ then bgColor=topHUDFillColorSZ lineColor=topHUDLineColorSZ fontColor=textColorSZ 
          else bgColor=topHUDFillColorPVP lineColor=topHUDLineColorPVP fontColor=textColorPVP
          end
          --------------------------------------------------
          
          ------- Warp Drive Brake activation ------
          if construct.isWarping() then
              brakeInput = 1
              brakesOn = true
          end
          -----------------------------------------
          
          -- Generate Screen overlay --
          if speed ~= nil then generateScreen() end
          -----------------------------
    onTimer:
      args: ['showCode']
      lua: |
          if codeCount >= codeTimer then
              codeCount = 0
              unit.stopTimer('showCode')
          else
              codeCount = codeCount + 1
          end

  system:
    onStart:
      lua: |
        json = require("dkjson")
        Atlas = require('atlas')
        
        
        function convertWaypoint(wp)
            local clamp  = utils.clamp
            local deg2rad    = math.pi/180
            local rad2deg    = 180/math.pi
            local epsilon    = 1e-10
        
            local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
            local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' .. num ..  ',' .. num .. '}'
            local systemId = wp 
        
            systemId, bodyId, latitude, longitude, altitude = string.match(wp, posPattern)
            assert(systemId, 'Position string is malformed.')
        
            systemId  = tonumber(systemId)
            bodyId    = tonumber(bodyId)
            latitude  = tonumber(latitude)
            longitude = tonumber(longitude)
            altitude  = tonumber(altitude)
        
            if bodyId == 0 then -- this is a hack to represent points in space
            mapPosition =  setmetatable({latitude  = latitude,
                                        longitude = longitude,
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            else
            mapPosition = setmetatable({latitude  = deg2rad*clamp(latitude, -90, 90),
                                        longitude = deg2rad*(longitude % 360),
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            end
            if mapPosition.bodyId == 0 then
                return vec3(mapPosition.latitude, mapPosition.longitude, mapPosition.altitude)
            end
        
            local center = {
                x=Atlas[systemId][bodyId].center[1],
                y=Atlas[systemId][bodyId].center[2],
                z=Atlas[systemId][bodyId].center[3]
            }
        
            local xproj = math.cos(mapPosition.latitude)
            return center + (Atlas[systemId][bodyId].radius + mapPosition.altitude) *
                vec3(xproj*math.cos(mapPosition.longitude),
                    xproj*math.sin(mapPosition.longitude),
                    math.sin(mapPosition.latitude))
        end
        
        function string.starts(String,Start)
            return string.sub(String,1,string.len(Start))==Start
        end
        
        function formatNumber(val, numType)
            if numType == 'speed' then
                local speedString = ''
                if type(val) == 'number' then speedString = string.format('%.0fkm/h',val)
                else speedString = string.format('%skm/h',val)
                end
                return speedString
            elseif numType == 'distance' then
                local distString = ''
                if type(val) == 'number' then
                    if val < 1000 then distString = string.format('%.2fm',val)
                    elseif val < 100000 then distString = string.format('%.2fkm',val/1000)
                    else distString = string.format('%.2fsu',val*.000005)
                    end
                else
                    distString = string.format('%sm',val)
                end
                return distString
            elseif numType == 'mass' then
                local massStr = ''
                if type(val) == 'number' then
                    if val < 1000 then massStr = string.format('%.2fkg',val)
                    elseif val < 1000000 then massStr = string.format('%.2ft',val/1000)
                    else massStr = string.format('%.2fkt',val/1000000)
                    end
                else
                    massStr = string.format('%skg',val)
                end
                return massStr
            end
        end
        
        function pipeDist(A,B,loc,reachable)
            local AB = vec3.new(B['x']-A['x'],B['y']-A['y'],B['z']-A['z'])
            local BE = vec3.new(loc['x']-B['x'],loc['y']-B['y'],loc['z']-B['z'])
            local AE = vec3.new(loc['x']-A['x'],loc['y']-A['y'],loc['z']-A['z'])
        
            -- Is the point within warp distance and do we care?
            if AB:len() <= 500/0.000005 or not reachable then
                AB_BE = AB:dot(BE)
                AB_AE = AB:dot(AE)
        
                -- Is the point past the warp destination?
                -- If so, then the warp destination is closest
                if (AB_BE > 0) then
                    dist = BE:len()
                    distType = 'POINT'
        
                -- Is the point before the start point?
                -- If so, then the start point is the closest
                elseif (AB_AE < 0) then
                    dist = AE:len()
                    distType = 'POINT'
        
                -- If neither above condition was met, then the
                -- destination point must have be directly out from
                -- somewhere along the warp pipe. Lets calculate
                -- that distance
                else
                    dist = vec3(AE:cross(BE)):len()/vec3(AB):len()
                    distType = 'PIPE'
                end
                return dist,distType
            end
            return nil,nil
        end
        
        function closestPlanet()
            local cName = nil
            local cDist = nil
            for pname,pvec in pairs(planets) do
                local tempDist = vec3(constructPosition-pvec):len()
                if cDist == nil or cDist > tempDist then
                    cDist = tempDist
                    cName = pname
                end
            end
            return cName,cDist
        end
        
        function closestPipe()
            pipes = {}
            local i = 0
            for name,center in pairs(planets) do
                for name2,center2 in pairs(planets) do
                    if name ~= name2 and pipes[string.format('%s - %s',name2,name)] == nil then
                        pipes[string.format('%s - %s',name,name2)] = {}
                        table.insert(pipes[string.format('%s - %s',name,name2)],center)
                        table.insert(pipes[string.format('%s - %s',name,name2)],center2)
                        if i % 50 == 0 then
                            coroutine.yield()
                        end
                        i = i + 1
                    end
                end
            end
        
            if asteroidPipes then
                for name,center in pairs(asteroidPipeList) do
                    for name2,center2 in pairs(planets) do
                        if name ~= name2 and pipes[string.format('%s - %s',name2,name)] == nil then
                            pipes[string.format('%s - %s',name,name2)] = {}
                            local c1 = convertWaypoint(center)
                            table.insert(pipes[string.format('%s - %s',name,name2)],vec3(c1['x'],c1['y'],c1['z']))
                            table.insert(pipes[string.format('%s - %s',name,name2)],center2)
                            if i % 50 == 0 then
                                coroutine.yield()
                            end
                            i = i + 1
                        end
                    end
                end
            end
        
            local cPipe = 'None'
            local cDist = 9999999999
            local cLoc = vec3(construct.getWorldPosition())
            i = 0
            for pName,vecs in pairs(pipes) do
                local tempDist,tempType = pipeDist(vecs[1],vecs[2],cLoc,false)
                if tempDist ~= nil then
                    if cDist > tempDist then
                        cDist = tempDist
                        cPipe = pName
                    end
                end
                if i % 50 == 0 then
                    coroutine.yield()
                end
                i = i + 1
            end
            closestPipeName = cPipe
            closestPipeDistance = cDist
            return cPipe,cDist
        end
        
        function contains(tablelist, val)
            for i=1,#tablelist do
                if tablelist[i] == val then 
                    return true
                end
            end
            return false
            end
        
        
            function WeaponWidgetCreate()
            if type(weapon) == 'table' and #weapon > 0 then
                local WeaponPanaelIdList = {}
                for i = 1, #weapon do
                    if i%2 ~= 0 then
                    table.insert(WeaponPanaelIdList, system.createWidgetPanel(''))
                    end
                        local WeaponWidgetDataId = weapon[i].getDataId()
                        local WeaponWidgetType = weapon[i].getWidgetType()
                        system.addDataToWidget(WeaponWidgetDataId, system.createWidget(WeaponPanaelIdList[#WeaponPanaelIdList], WeaponWidgetType))
                end
            end
        end
        
        function brakeWidget()
            local brakeON = brakeInput > 0
            local bw = ''
            if brakeON then
                warnings['brakes'] = 'svgBrakes'
            else
                warnings['brakes'] = nil
            end
            return bw
        end
        
        function flightWidget()
            if Nav.axisCommandManager:getMasterMode() == controlMasterModeId.travel then mode = 'Throttle ' .. tostring(Nav.axisCommandManager:getThrottleCommand(0) * 100) .. '%' modeBG = bgColor
            else mode = 'Cruise '  .. string.format('%.2f',Nav.axisCommandManager:getTargetSpeed(0)) .. ' km/h' modeBG = 'rgba(99, 250, 79, 0.5)'
            end
            local sw = ''
            if speed ~= nil then
                --Center Top
                sw = [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                        <path d="
                        M ]] .. tostring(.31*screenWidth) .. ' ' .. tostring(.001*screenHeight) ..[[ 
                        L ]] .. tostring(.69*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                        L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                        L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                        L ]] .. tostring(.31*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="2" fill="]]..bgColor..[[" />]]
                
        
                -- Right Side
                sw = sw .. [[<path d="
                        M ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [[ 
                        L ]] .. tostring(.691*screenWidth) .. ' ' .. tostring(.0387*screenHeight) .. [[
                        L ]] .. tostring(.80*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                        L ]] .. tostring(.69*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                        L ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [[
                        L ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="1" fill="]].. modeBG ..[[" />]]
                        
                if not maxBrake then maxBrake = 0 end
                sw = sw .. [[<path d="
                        M ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[ 
                        L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="1" fill="none" />
        
                        <path d="
                        M ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[ 
                        L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="1" fill="none" />
        
                        <path d="
                        M ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[ 
                        L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [["
                        stroke="]]..lineColor..[[" stroke-width="1" fill="none" />
        
                        <text x="]].. tostring(.4 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Speed: ]] .. formatNumber(speed,'speed') .. [[</text>
                        <text x="]].. tostring(.4 * screenWidth) ..[[" y="]].. tostring(.0325 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Current Accel: ]] .. string.format('%.2f G',accel/9.81) .. [[</text>
                        <text x="]].. tostring(.4 * screenWidth) ..[[" y="]].. tostring(.05 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Brake Dist: ]] .. formatNumber(brakeDist,'distance') .. [[</text>
                        
                        <text x="]].. tostring(.502 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Max Speed: ]] .. formatNumber(maxSpeed,'speed') .. [[</text>
                        <text x="]].. tostring(.502 * screenWidth) ..[[" y="]].. tostring(.0325 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Max Accel: ]] .. string.format('%.2f G',maxSpaceThrust/mass/9.81) ..[[</text>
                        <text x="]].. tostring(.502 * screenWidth) ..[[" y="]].. tostring(.05 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Max Brake: ]] .. string.format('%.2f G',maxBrake/mass/9.81) .. [[</text>
        
                        <text x="]].. tostring(.37 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Mass </text>
                        <text x="]].. tostring(.355 * screenWidth) ..[[" y="]].. tostring(.028 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">]]..formatNumber(mass,'mass')..[[</text>
        
                        <text x="]].. tostring(.612 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Gravity </text>
                        <text x="]].. tostring(.612 * screenWidth) ..[[" y="]].. tostring(.028 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">]].. string.format('%.2f G',gravity/9.81) ..[[</text>
        
                        <text x="]].. tostring(.684 * screenWidth) ..[[" y="]].. tostring(.028 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold" transform="rotate(-10,]].. tostring(.684 * screenWidth) ..",".. tostring(.028 * screenHeight) ..[[)">]].. mode ..[[</text>
        
                    </svg>
                    ]]
            else
                sw = ''
            end
            return sw
        end
        
        function fuelWidget()
            curFuel = 0
            local fuelWarning = false
            local fuelTankWarning = false
            for i,v in pairs(spacefueltank) do 
                curFuel = curFuel + v.getItemsVolume()
                if v.getItemsVolume()/v.getMaxVolume() < .2 then fuelTankWarning = true end
            end
            sFuelPercent = curFuel/maxFuel * 100
            if sFuelPercent < 20 then fuelWarning = true end
            curFuelStr = string.format('%.2f%%',sFuelPercent)
        
            --Center bottom ribbon
            local fw = string.format([[
                <svg width="100%%" height="100%%" style="position: absolute;left:0%%;top:0%%;font-family: Calibri;">
                    <linearGradient id="sFuel" x1="0%%" y1="0%%" x2="100%%" y2="0%%">
                    <stop offset="%.1f%%" style="stop-color:rgba(99, 250, 79, 0.95);stop-opacity:.95" />
                    <stop offset="%.1f%%" style="stop-color:rgba(255, 10, 10, 0.5);stop-opacity:.5" />
                    </linearGradient>]],sFuelPercent,sFuelPercent)
        
            fw = fw .. [[
                <path d="
                M ]] .. tostring(.336*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [[ 
                L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                L ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [[
                L ]] .. tostring(.6635*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [[
                L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [[
                L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [[
                L ]] .. tostring(.3365*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [[
                L ]] .. tostring(.336*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [["
            stroke="]]..lineColor..[[" stroke-width="2" fill="]]..bgColor..[[" />
        
            <path d="
                M ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[
                L ]] .. tostring(.61*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [[
                L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.0645*screenHeight) .. [[
                L ]] .. tostring(.39*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [["
            stroke="]]..lineColor..[[" stroke-width="1" fill="url(#sFuel)" />
        
            <path d="
                M ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[ 
                L ]] .. tostring(.5*screenWidth) .. ' ' .. tostring(.070*screenHeight) .. [["
            stroke="black" stroke-width="1.5" fill="none" />
        
            <path d="
                M ]] .. tostring(.555*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[ 
                L ]] .. tostring(.555*screenWidth) .. ' ' .. tostring(.070*screenHeight) .. [["
            stroke="black" stroke-width="1.5" fill="none" />
        
            <path d="
                M ]] .. tostring(.445*screenWidth) .. ' ' .. tostring(.055*screenHeight) .. [[ 
                L ]] .. tostring(.445*screenWidth) .. ' ' .. tostring(.070*screenHeight) .. [["
            stroke="black" stroke-width="1.5" fill="none" />
        
            <text x="]].. tostring(.39 * screenWidth) ..[[" y="]].. tostring(.08 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Fuel: ]] .. curFuelStr .. [[</text>
            <!--text x="]].. tostring(.445 * screenWidth) ..[[" y="]].. tostring(.08 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">25%</text>
            <text x="]].. tostring(.5 * screenWidth) ..[[" y="]].. tostring(.08 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">50%</text>
            <text x="]].. tostring(.555 * screenWidth) ..[[" y="]].. tostring(.08 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">75%</text-->
        
        
            ]]
        
            if fuelTankWarning or fuelWarning or showAlerts then
                fuelWarningText = 'Fuel level &lt; 20%'
                if not fuelWarning then fuelWarningText = 'A Fuel tank &lt; 20%%' end
                warnings['lowFuel'] = 'svgWarning'
            else
                warnings['lowFuel'] = nil
            end
        
            fw = fw .. '</svg>'
        
            return fw
        end
        
        function apStatusWidget()
            local bg = bgColor
            local apStatus = 'inactive'
            if auto_follow then bg = 'rgba(99, 250, 79, 0.5)' apStatus = 'following' end
            if autopilot then bg = 'rgba(99, 250, 79, 0.5)' apStatus = 'Engaged' end
            if not autopilot and autopilot_dest ~= nil then apStatus = 'Set' end
            local apw = [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    -- Left Top Side]]
            apw = apw .. [[<path d="
                M ]] .. tostring(.3365*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [[ 
                L ]] .. tostring(.309*screenWidth) .. ' ' .. tostring(.0387*screenHeight) .. [[
                L ]] .. tostring(.2*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(.31*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(.3365*screenWidth) .. ' ' .. tostring(.0185*screenHeight) .. [[
                L ]] .. tostring(.3365*screenWidth) .. ' ' .. tostring(.028*screenHeight) .. [["
                stroke="]]..lineColor..[[" stroke-width="1" fill="]]..bg..[[" />
                
                <text x="]].. tostring(.25 * screenWidth) ..[[" y="]].. tostring(.012 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold" transform="rotate(10,]].. tostring(.25 * screenWidth) ..",".. tostring(.012 * screenHeight) ..[[)">AutoPilot: ]]..apStatus..[[</text>
            ]]
        
            if autopilot_dest and speed > 1000 then
                local balance = vec3(autopilot_dest - constructPosition):len()/(speed/3.6) --meters/(meter/second) == seconds
                local seconds = balance % 60
                balance = balance // 60
                local minutes = balance % 60
                balance = balance // 60
                local hours = balance % 60
                apw = apw .. [[
                    <text x="]].. tostring(.280 * screenWidth) ..[[" y="]].. tostring(.055 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">ETA: ]]..string.format('%.0f:%.0f.%.0f',hours,minutes,seconds)..[[</text>
                ]]
            end
        
            apw = apw .. [[</svg>]]
            return apw
        end
        
        function positionInfoWidget()
            local piw = [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    -- Far Left Top Side]]
            piw = piw .. [[<path d="
                M ]] .. tostring(.0*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[ 
                L ]] .. tostring(.115*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[
                L ]] .. tostring(.124*screenWidth) .. ' ' .. tostring(.025*screenHeight) .. [[
                L ]] .. tostring(.25*screenWidth) .. ' ' .. tostring(.035*screenHeight) .. [[
                L ]] .. tostring(.275*screenWidth) .. ' ' .. tostring(.027*screenHeight) .. [[
                L ]] .. tostring(.2*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(.0*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(.0*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[ 
                "
                stroke="]]..lineColor..[[" stroke-width="1" fill="]]..bgColor..[["/>
        
                <path d="
                M ]] .. tostring(1.0*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[ 
                L ]] .. tostring(.885*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[
                L ]] .. tostring(.876*screenWidth) .. ' ' .. tostring(.025*screenHeight) .. [[
                L ]] .. tostring(.75*screenWidth) .. ' ' .. tostring(.035*screenHeight) .. [[
                L ]] .. tostring(.725*screenWidth) .. ' ' .. tostring(.027*screenHeight) .. [[
                L ]] .. tostring(.8*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(1.0*screenWidth) .. ' ' .. tostring(.001*screenHeight) .. [[
                L ]] .. tostring(1.0*screenWidth) .. ' ' .. tostring(.0155*screenHeight) .. [[ 
                "
                stroke="]]..lineColor..[[" stroke-width="1" fill="]]..bgColor..[[" />
                
                <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.01 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size=".6vw">Remote Version: ]]..hudVersion..[[</text>
                <text x="]].. tostring(.125 * screenWidth) ..[[" y="]].. tostring(.011 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Nearest Planet</text>
                <text x="]].. tostring(.15 * screenWidth) ..[[" y="]].. tostring(.022 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size=".7vw" >]]..closestPlanetStr..[[</text>
                
                <text x="]].. tostring(.82 * screenWidth) ..[[" y="]].. tostring(.011 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="1.42vh" font-weight="bold">Nearest Pipe</text>
                <text x="]].. tostring(.78 * screenWidth) ..[[" y="]].. tostring(.022 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size=".7vw" >]]..closestPipeStr..[[</text>
        
                <text x="]].. tostring(.90 * screenWidth) ..[[" y="]].. tostring(.011 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size=".7vw" font-weight="bold">Safe Zone Distance: ]]..SZDStr..[[</text>
        
                </svg>]]
            return piw
        end
        
        function engineWidget()
            local ew = [[
                <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.045 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Controlling Engine tags</text>
                    ]]..enabledEngineTagsStr..[[
                </svg>
            ]]
            return ew
        end
        
        function planetARWidget()
            local arw = planetAR
        
            if legacyFile then
                arw = arw .. [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                        <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.03 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Augmented Reality Mode: ]]..AR_Mode..[[</text>
                    </svg>
                    ]]
            else
                if string.find(AR_Mode,"FILE") ~= nil then
                    i, j = string.find(AR_Mode,"FILE")
                    fileNumber = tonumber(string.sub(AR_Mode,j+1))
                    --Catch if they reduced the number of custom files
                    if fileNumber > #validWaypointFiles then AR_Mode= "None" end
                    arw = arw .. [[
                        <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                            <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.03 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Augmented Reality Mode: ]]..validWaypointFiles[fileNumber].DisplayName..[[</text>
                        </svg>
                        ]]
                else
                    arw = arw .. [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                        <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.03 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Augmented Reality Mode: ]]..AR_Mode..[[</text>
                    </svg>
                    ]]
                end
            end
            return arw
        end
        
        function shipNameWidget()
            local snw = ''
            snw = snw .. [[
                <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <text x="]].. tostring(.90 * screenWidth) ..[[" y="]].. tostring(.13 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Ship Name: ]]..construct.getName()..[[</text>
                    <text x="]].. tostring(.90 * screenWidth) ..[[" y="]].. tostring(.142 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Ship Code: ]]..tostring(construct.getId())..[[</text>
                </svg>
            ]]
            return snw
        end
        
        function helpWidget()
            local hw = ''
            if showHelp then
                hw = [[
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <rect x="]].. tostring(.125 * screenWidth) ..[[" y="]].. tostring(.125 * screenHeight) ..[[" rx="15" ry="15" width="60vw" height="22vh" style="fill:rgba(50, 50, 50, 0.9);stroke:white;stroke-width:5;opacity:0.9;" />
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.15 * screenHeight) ..[[" style="fill: ]]..'orange'..[[" font-size="1.42vh" font-weight="bold">
                        OPTION KEY BINDINGS</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.17 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+1: Toggle help screen (Alt+Shift+1 toggles minimal Remote HUD view)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.19 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+2: Toggle Augmented reality view mode (NONE, ALL, PLANETS, CUSTOM) HUD Loads custom waypoints for AR from "autoconf/custom/AR_Waypoints.lua"</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.21 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+3: Clear all engine tag filters (i.e. all engines controlled by throttle) (Alt+shift+3 toggles through predefined tags)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.23 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+4: Engage AutoPilot to current AP destination (shown in VR)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.25 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+5: Enable/Disalbe Tracking mode (position tags in lua chat used for trajectory calculation instead of auto-pilot)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.27 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+6: Set AutoPilot destination to the nearest safe zone</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.29 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+7: Toggles radar widget filtering mode (Show all, Show Enemy, Show Identified, Show Friendly) (Alt+Shift+7 toggles radar widget sorting between distance and construct size)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.31 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+8: Toggle Shield vent. Start venting if available. Stop venting if currently venting</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.33 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        Alt+9: Toggle between Cruise and Throttle control modes</text>
                    </rect>
                    
                    <rect x="]].. tostring(.125 * screenWidth) ..[[" y="]].. tostring(.365 * screenHeight) ..[[" rx="15" ry="15" width="60vw" height="22vh" style="fill:rgba(50, 50, 50, 0.9);stroke:white;stroke-width:5;opacity:0.9;" />
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.39 * screenHeight) ..[[" style="fill: ]]..'orange'..[[" font-size="1.42vh" font-weight="bold">
                        Lua Commands</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.41 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        disable &lt;tag&gt;: Disables control of engines tagged with the <tag> parameter</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.43 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        enable &lt;tag&gt;: Enables control of engines tagged with <tag></text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.45 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        warpFrom &lt;start position&gt; &lt;destination position&gt;: Calculates best warp bath from the <start position> (positions are in ::pos{} format)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.47 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        warp &lt;destination position&gt;: Calculates best warp path from current postion to destination (position is in ::pos{} format)</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.49 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        addWaypoint &lt;waypoint1&gt; &lt;Name&gt;: Adds temporary AR points when enabled. Requires a position tag. Optionally, you can also optionally add a custom name as well</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.51 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        delWaypoint &lt;name&gt;: Removes the specified temporary AR point</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.53 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        addShips db: Adds all ships currently on radar to the friendly construct list</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.55 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        code &lt;transponder code&gt;: Adds the transponder tag to the transponder. "delcode &lt;code&gt;" removes the tag</text>
                    <text x="]].. tostring(.13 * screenWidth) ..[[" y="]].. tostring(.57 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">
                        &lt;Primary Target ID&gt;: Filters radar widget to only show the construct with the specified ID</text>
                    </rect>
        
                    </svg>
                ]]
            else
                hw = ''
            end
        
            return hw
        end
        
        function travelIndicatorWidget()
            local p = constructPosition + 2/.000005 * vec3(construct.getWorldOrientationForward())
            local pInfo = library.getPointOnScreen({p['x'],p['y'],p['z']})
        
            local tiw = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            if pInfo[3] ~= 0 then
                if pInfo[1] < .01 then pInfo[1] = .01 end
                if pInfo[2] < .01 then pInfo[2] = .01 end
                local fill = AR_Fill
                local translate = '(0,0)'
                local depth = '8'           
                if pInfo[1] < 1 and pInfo[2] < 1 then
                    translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight*pInfo[2])
                elseif pInfo[1] > 1 and pInfo[1] < AR_Range and pInfo[2] < 1 then
                    translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*pInfo[2])
                elseif pInfo[2] > 1 and pInfo[2] < AR_Range and pInfo[1] < 1 then
                    translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight)
                else
                    translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                end
                tiw = tiw .. [[<g transform="translate]]..translate..[[">
                        <circle cx="0" cy="0" r="]].. Direction_Indicator_Size ..[[px" style="fill:lightgrey;stroke:]]..Direction_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width)..[[;opacity:]].. 0.5 ..[[;" />
                        <line x1="]].. Direction_Indicator_Size*1.5 ..[[" y1="0" x2="]].. -Direction_Indicator_Size*1.5 ..[[" y2="0" style="stroke:]]..Direction_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                        <line y1="]].. Direction_Indicator_Size*1.5 ..[[" x1="0" y2="]].. -Direction_Indicator_Size*1.5 ..[[" x2="0" style="stroke:]]..Direction_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                        </g>]]
            end
            if speed > 20 then
                local a = constructPosition + 2/.000005 * vec3(construct.getWorldVelocity())
                local aInfo = library.getPointOnScreen({a['x'],a['y'],a['z']})
                if aInfo[3] ~= 0 then
                    if aInfo[1] < .01 then aInfo[1] = .01 end
                    if aInfo[2] < .01 then aInfo[2] = .01 end
                    local fill = AR_Fill
                    local translate = '(0,0)'
                    local depth = '8'           
                    if aInfo[1] < 1 and aInfo[2] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight*aInfo[2])
                    elseif aInfo[1] > 1 and aInfo[1] < AR_Range and aInfo[2] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*aInfo[2])
                    elseif aInfo[2] > 1 and aInfo[2] < AR_Range and aInfo[1] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight)
                    else
                        translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                    end
                    tiw = tiw .. [[<g transform="translate]]..translate..[[">
                            <circle cx="0" cy="0" r="]].. Prograde_Indicator_Size ..[[px" style="fill:none;stroke:]]..Prograde_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width)..[[;opacity:]].. 0.5 ..[[;" />
                            <line x1="]].. Prograde_Indicator_Size*1.4 ..[[" y1="]].. Prograde_Indicator_Size*1.4 ..[[" x2="]].. -Prograde_Indicator_Size*1.4 ..[[" y2="]].. -Prograde_Indicator_Size*1.4 ..[[" style="stroke:]]..Prograde_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                            <line x1="]].. -Prograde_Indicator_Size*1.4 ..[[" y1="]].. Prograde_Indicator_Size*1.4 ..[[" x2="]].. Prograde_Indicator_Size*1.4 ..[[" y2="]].. -Prograde_Indicator_Size*1.4 ..[[" style="stroke:]]..Prograde_Indicator_Color..[[;stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                            </g>]]
                end
                local r = constructPosition - 2/.000005 * vec3(construct.getWorldVelocity())
                local aInfo = library.getPointOnScreen({r['x'],r['y'],r['z']})
                if aInfo[3] ~= 0 then
                    if aInfo[1] < .01 then aInfo[1] = .01 end
                    if aInfo[2] < .01 then aInfo[2] = .01 end
                    local fill = AR_Fill
                    local translate = '(0,0)'
                    local depth = '8'           
                    if aInfo[1] < 1 and aInfo[2] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight*aInfo[2])
                    elseif aInfo[1] > 1 and aInfo[1] < AR_Range and aInfo[2] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*aInfo[2])
                    elseif aInfo[2] > 1 and aInfo[2] < AR_Range and aInfo[1] < 1 then
                        translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight)
                    else
                        translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                    end
                    tiw = tiw .. [[<g transform="translate]]..translate..[[">
                            <circle cx="0" cy="0" r="]].. Prograde_Indicator_Size ..[[px" style="fill:none;stroke:rgb(255, 60, 60);stroke-width:]]..tostring(Indicator_Width)..[[;opacity:]].. 0.5 ..[[;" />
                            <line x1="]].. Prograde_Indicator_Size*1.4 ..[[" y1="]].. Prograde_Indicator_Size*1.4 ..[[" x2="]].. -Prograde_Indicator_Size*1.4 ..[[" y2="]].. -Prograde_Indicator_Size*1.4 ..[[" style="stroke:rgb(255, 60, 60);stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                            <line x1="]].. -Prograde_Indicator_Size*1.4 ..[[" y1="]].. Prograde_Indicator_Size*1.4 ..[[" x2="]].. Prograde_Indicator_Size*1.4 ..[[" y2="]].. -Prograde_Indicator_Size*1.4 ..[[" style="stroke:rgb(255, 60, 60);stroke-width:]]..tostring(Indicator_Width/5)..[[;opacity:]].. 0.85 ..[[;" />
                            </g>]]
                end
            end
            tiw = tiw .. '</svg>'
            return tiw
        end
        
        function warningsWidget()
            local ww = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            if caerusOption then
                ww = '<svg width="100%" height="100%" style="position: absolute;left:20%;top:59%;font-family: Calibri;">'
            end
            local warningText = {}
            warningText['lowFuel'] = fuelWarningText
            warningText['brakes'] = 'Brakes Locked'
            warningText['venting'] = 'Shield Venting'
        
            local warningColor = {}
            warningColor['lowFuel'] = 'red'
            warningColor['cored'] = 'orange'
            warningColor['friendly'] = 'green'
            warningColor['venting'] = shieldHPColor
        
            if math.floor(system.getArkTime()*5) % 2 == 0 then
                warningColor['brakes'] = 'orange'
            else
                warningColor['brakes'] = 'yellow'
            end
        
            local count = 0
            for k,v in pairs(warnings) do
                if v ~= nil then
                    ww = ww .. [[
                        <svg width="]].. tostring(.03 * screenWidth) ..[[" height="]].. tostring(.03 * screenHeight) ..[[" x="]].. tostring(.24 * screenWidth) ..[[" y="]].. tostring(.20 * screenHeight + .032 * screenHeight * count) ..[[" style="fill: ]]..warningColor[k]..[[;">
                            ]]..warningSymbols[v]..[[
                        </svg>
                        <text x="]].. tostring(.267 * screenWidth) ..[[" y="]].. tostring(.22 * screenHeight + .032 * screenHeight * count) .. [[" style="fill: ]]..warningColor[k]..[[;" font-size="1.7vh" font-weight="bold">]]..warningText[k]..[[</text>
                        ]]
                    count = count + 1
                end
            end
            ww = ww .. '</svg>'
            return ww
        end
        
        function hpWidget()
            local hw = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            --Shield/CCS Widget
            shieldPercent = 0
            if shield_1 then
                shieldPercent = shield_1.getShieldHitpoints()/shield_1.getMaxShieldHitpoints()*100
            end
            CCSPercent = 0
            if core then
                if core.getMaxCoreStress() then
                    CCSPercent = 100*(core.getMaxCoreStress()-core.getCoreStress())/core.getMaxCoreStress()
                end
            end
            if CCSPercent < 25 and CCSPercent > 5 and db_1 then
                db_1.clearValue('homeBaseLocation')
                if transponder_1 then transponder_1.setTags({}) end
            elseif CCSPercent == 0 and shieldPercent < 5 then
                db_1.clearValue('homeBaseLocation')
                if transponder_1 then transponder_1.setTags({}) end
            end
            if (shield_1 and shieldPercent < 15) or showAlerts then
                hw = hw .. string.format([[
                <svg width="]].. tostring(.06 * screenWidth) ..[[" height="]].. tostring(.06 * screenHeight) ..[[" x="]].. tostring(.40 * screenWidth) ..[[" y="]].. tostring(.60 * screenHeight) ..[[" style="fill: red;">
                    ]]..warningSymbols['svgCritical']..[[
                </svg>
                <text x="]].. tostring(.45 * screenWidth) ..[[" y="]].. tostring(.64 * screenHeight) ..[[" style="fill: red" font-size="3.42vh" font-weight="bold">SHIELD CRITICAL</text>
                ]])
            elseif (shield_1 and shieldPercent < 30) or showAlerts then
                hw = hw .. string.format([[
                <svg width="]].. tostring(.06 * screenWidth) ..[[" height="]].. tostring(.06 * screenHeight) ..[[" x="]].. tostring(.40 * screenWidth) ..[[" y="]].. tostring(.60 * screenHeight) ..[[" style="fill: orange;">
                    ]]..warningSymbols['svgWarning']..[[
                </svg>
                <text x="]].. tostring(.45 * screenWidth) ..[[" y="]].. tostring(.64 * screenHeight) ..[[" style="fill: orange" font-size="3.42vh" font-weight="bold">SHIELD LOW</text>
                ]])
            end
            hw = hw .. '</svg>'
            hw = hw .. [[
                <svg style="position: absolute; top: ]]..hpWidgetY..[[vh; left: ]]..hpWidgetX..[[vw;" viewBox="0 0 355 97" width="]]..tostring(hpWidgetScale)..[[vw">
                    <polyline style="fill-opacity: 0; stroke-linejoin: round; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" points="2 78.902 250 78.902 276 50" bx:origin="0.564202 0.377551"/>
                    <polyline style="stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" points="225 85.853 253.049 85.853 271 67.902" bx:origin="-1.23913 -1.086291"/>
                    <rect x="26.397" y="158.28" width="59" height="9" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000076, 0, 1, -24.396999, -79.380203)" bx:origin="2.813559 -3.390291"/>
                    <rect x="4.921" y="123.131" width="11" height="7" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000076, 0, 1, -2.921, -35.229931)" bx:origin="15.090909 -5.644607"/>
                    <rect x="4.921" y="123.111" width="11" height="6.999" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000106, 0, 1, 13.079, -35.20953)" bx:origin="13.636364 -5.645962"/>
                    <rect x="4.921" y="123.111" width="11" height="6.999" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000106, 0, 1, 29.078999, -35.20953)" bx:origin="12.181818 -5.645719"/>
                    <rect x="4.921" y="123.111" width="11" height="6.999" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000106, 0, 1, 45.078999, -35.20953)" bx:origin="10.727273 -5.645477"/>
                    ]]
            local placement = 0
            for i = 4, CCSPercent, 4 do 
                hw = hw .. [[<line style="stroke-width: 5px; stroke-miterlimit: 1; stroke: ]]..ccsHPColor..[[; fill: none;" x1="]]..tostring(5+placement)..[["   y1="56" x2="]]..tostring(5+placement)..[["   y2="72" bx:origin="0 0.096154"/>]]  placement = placement + 10
            end
                    
            hw = hw .. [[
                    <line style="stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="5" y1="25.706" x2="5" y2="39.508" bx:origin="0 1.607143"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="14.859" y1="31.621" x2="14.859" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="24.718" y1="31.684" x2="24.718" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="34.576" y1="31.684" x2="34.576" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="44.435" y1="31.621" x2="44.435" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="54.294" y1="31.621" x2="54.294" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="64.153" y1="31.621" x2="64.153" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="74.012" y1="31.621" x2="74.012" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="83.871" y1="31.621" x2="83.871" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="93.729" y1="31.621" x2="93.729" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="103.588" y1="31.684" x2="103.588" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="113.447" y1="31.684" x2="113.447" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="123.306" y1="31.621" x2="123.306" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="133.165" y1="31.621" x2="133.165" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="143.023" y1="31.621" x2="143.023" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="152.882" y1="31.621" x2="152.882" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="162.741" y1="31.621" x2="162.741" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="172.6" y1="31.621" x2="172.6" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="182.459" y1="31.684" x2="182.459" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="192.318" y1="31.684" x2="192.318" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="202.176" y1="31.621" x2="202.176" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="212.035" y1="31.621" x2="212.035" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="221.894" y1="31.621" x2="221.894" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="231.753" y1="31.621" x2="231.753" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="245" y1="25.706" x2="245" y2="39.508" bx:origin="0 1.535714"/>
                    <text style="fill: ]]..shieldHPColor..[[; font-family: Arial; font-size: 11.8px; white-space: pre;" x="15" y="28.824" bx:origin="-2.698544 2.296589">Shield:</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 6.70451px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, -12.273296, 5.679566)" x="16" y="89.114" bx:origin="3.495402 -4.692753">Incoming Damage</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 5.58709px; line-height: 8.93935px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, 73.924286, 48.558426)" x="16" y="89.114" dx="-83.506" dy="-39.079" bx:origin="35.484825 -7.519482">A</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 5.58709px; line-height: 8.93935px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, 98.152718, 71.789642)" x="16" y="89.114" dx="-91.857" dy="-65.038" bx:origin="38.374239 -7.519481">E</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 5.58709px; line-height: 8.93935px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, 106.659058, 48.558426)" x="16" y="89.114" dx="-83.506" dy="-39.079" bx:origin="33.936403 -7.519482">T</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 5.58709px; line-height: 8.93935px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, 121.659058, 48.558426)" x="16" y="89.114" dx="-83.506" dy="-39.079" bx:origin="27.291514 -7.519482">K</text>
                    <text style="fill: ]]..shieldHPColor..[[; font-family: Arial; font-size: 11.8px; white-space: pre;" x="53.45" y="28.824" bx:origin="-2.698544 2.296589">]]..string.format('%.2f',shieldPercent)..[[%</text>
                    <text style="fill: ]]..ccsHPColor..[[; font-family: Arial; font-size: 11.8px; white-space: pre;" x="153" y="28.824" bx:origin="-2.698544 2.296589">CCS:</text>
                    <text style="fill: ]]..ccsHPColor..[[; font-family: Arial; font-size: 11.8px; white-space: pre;" x="182.576" y="28.824" bx:origin="-2.698544 2.296589">]]..string.format('%.2f',CCSPercent)..[[%</text>
                    
                    ]]
                    if shield_1 then
                        local ventCD = shield_1.getVentingCooldown()
                        if ventCD > 0 then
                            hw = hw .. [[
                                <text style="fill: ]]..warning_outline_color..[[; font-family: Arial; font-size: 11.8px; paint-order: fill; white-space: pre;" x="66" y="91.01" bx:origin="-2.698544 2.296589">Vent Cooldown: </text>
                                <text style="fill: ]]..warning_outline_color..[[; font-family: Arial; font-size: 11.8px; paint-order: fill; white-space: pre;" x="151" y="91.01" bx:origin="-2.698544 2.296589">]]..string.format('%.2f',ventCD)..[[s</text>
                            ]]
                        end
                    end
            local placement = 0
            for i = 4, shieldPercent, 4 do 
                hw = hw .. [[<line style="stroke-width: 5px; stroke-miterlimit: 1; stroke: ]]..shieldHPColor..[[; fill: none;" x1="]]..tostring(5+placement)..[["   y1="42" x2="]]..tostring(5+placement)..[["   y2="55" bx:origin="0 0.096154"/>]]  placement = placement + 10
            end
        
            hw = hw .. '</svg>'
        
            return hw
        end
        
        function resistWidget()
            local rw = ''
        
            local stress = shield_1.getStressRatioRaw()
            local amS = stress[1]
            local emS = stress[2]
            local knS = stress[3]
            local thS = stress[4]
        
            local srp = shield_1.getResistancesPool()
            local csr = shield_1.getResistances()
            local amR = csr[1]/srp
            local emR = csr[2]/srp
            local knR = csr[3]/srp
            local thR = csr[4]/srp
        
            local resistTimer = shield_1.getResistancesCooldown()
            local resistTimerPer = 1 - resistTimer/shield_1.getResistancesMaxCooldown()
            local resistTimerColor = shieldHPColor
            if resistTimer > 0 then resistTimerColor = warning_outline_color end 
        
            if not shield_1.isVenting() then
                warnings['venting'] = nil
            else 
                warnings['venting'] = 'svgCritical'
            end
        
            rw = [[
                <svg style="position: absolute; top: ]]..resistWidgetY..[[vh; left: ]]..resistWidgetX..[[vw;" viewBox="0 0 143 127" width="]]..resistWidgetScale..[[vw">
                    <defs>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="stress-am">
                            <stop offset="]]..tostring(amS*100)..[[%" style="stop-color: ]]..antiMatterColor..[[; stop-opacity: 1"/>
                            <stop offset="]]..tostring(amS*100)..[[%" style="stop-color: ]]..neutralLineColor..[[; stop-opacity:.5"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="stress-th">
                            <stop offset="]]..tostring(thS*100)..[[%" style="stop-color: ]]..thermicColor..[[; stop-opacity: 1"/>
                            <stop offset="]]..tostring(thS*100)..[[%" style="stop-color: ]]..neutralLineColor..[[; stop-opacity:.5"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="stress-em">
                            <stop offset="]]..tostring(emS*100)..[[%" style="stop-color: ]]..electroMagneticColor..[[; stop-opacity: 1"/>
                            <stop offset="]]..tostring(emS*100)..[[%" style="stop-color: ]]..neutralLineColor..[[; stop-opacity:.5"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="stress-kn">
                            <stop offset="]]..tostring(knS*100)..[[%" style="stop-color: ]]..kineticColor..[[; stop-opacity: 1"/>
                            <stop offset="]]..tostring(knS*100)..[[%" style="stop-color: ]]..neutralLineColor..[[; stop-opacity:.5"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="resist-am">
                            <stop offset="]]..tostring(amR*100)..[[%" style="stop-color: ]]..antiMatterColor..[["/>
                            <stop offset="]]..tostring(amR*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="resist-em">
                            <stop offset="]]..tostring(emR*100)..[[%" style="stop-color: ]]..electroMagneticColor..[["/>
                            <stop offset="]]..tostring(emR*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="resist-th">
                            <stop offset="]]..tostring(thR*100)..[[%" style="stop-color: ]]..thermicColor..[["/>
                            <stop offset="]]..tostring(thR*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="resist-kn">
                            <stop offset="]]..tostring(knR*100)..[[%" style="stop-color: ]]..kineticColor..[[;"/>
                            <stop offset="]]..tostring(knR*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                        </linearGradient>
                        <linearGradient x1="0%" y1="50%" x2="100%" y2="50%" id="resist-timer-horizontal" gradientUnits="userSpaceOnUse">
                            <stop offset="]]..tostring(resistTimerPer*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                            <stop offset="]]..tostring(resistTimerPer*100)..[[%" style="stop-color: ]]..warning_outline_color..[[;"/>  
                        </linearGradient>
                        <linearGradient x1="50%" y1="0%" x2="50%" y2="80%" id="resist-timer-vertical" gradientUnits="userSpaceOnUse">
                            <stop offset="]]..tostring(resistTimerPer*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                            <stop offset="]]..tostring(resistTimerPer*100)..[[%" style="stop-color: ]]..warning_outline_color..[[;"/>  
                        </linearGradient>
                    </defs>
                    <ellipse style="fill: none; stroke: ]]..neutralLineColor..[[;" cx="73" cy="61" rx="8" ry="8"/>
                    <ellipse style="fill: ]]..neutralLineColor..[[; stroke: ]]..neutralLineColor..[[;" cx="73" cy="61" rx="2" ry="2"/>
                    <polyline style="fill: none; stroke-linejoin: bevel; stroke-linecap: round; stroke: ]]..neutralLineColor..[[;" points="53 30 35 61 53 93"/>
                    <polyline style="fill: none; stroke-linejoin: bevel; stroke-linecap: round; stroke: ]]..neutralLineColor..[[;" points="92 30 110 61 92 93"/>
                    <polyline style="fill: none; stroke-linecap: round; stroke-linejoin: bevel; stroke: ]]..neutralLineColor..[[;" points="90 35 105 61 90 89"/>
                    <polyline style="fill: none; stroke-linecap: round; stroke-linejoin: bevel; stroke: ]]..neutralLineColor..[[;" points="55 35 40 61 55 89"/>
                    <line style="fill: none; stroke-width: 0.5px; stroke: url(#resist-timer-horizontal);" x1="17" y1="61" x2="128" y2="61"/>
                    <line style="fill: none; stroke-width: 0.5px; stroke: url(#resist-timer-vertical);" x1="72.888" y1="-9.275" x2="72.888" y2="101.725" transform="matrix(1, 0, 0, 1, 0.112056, 14.27536)"/>
                    <text style="fill: ]]..antiMatterColor..[[; font-size: 8px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="55.182" y="51.282">AM</text>
                    <text style="fill: ]]..electroMagneticColor..[[; font-size: 8px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="78" y="51.282">EM</text>
                    <text style="fill: ]]..thermicColor..[[; font-size: 8px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="78" y="77.282">TH</text>
                    <text style="fill: ]]..kineticColor..[[; font-size: 8px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="55" y="77.282">KN</text>
                    <path style="fill: none; stroke-width: 3px; stroke-linecap: round; stroke: url(#stress-am);" d="M 15 59 C 45.52 58.894 71.021 34.344 71 3" transform="matrix(-1, 0, 0, -1, 86.000015, 62)"/>
                    <path style="fill: none; stroke-width: 3px; stroke-linecap: round; stroke: url(#stress-th);" d="M 75 119 C 105.52 118.894 131.021 94.344 131 63"/>
                    <path style="fill: none; stroke-width: 3px; stroke-linecap: round; stroke: url(#stress-em);" d="M 75 59 C 105.52 58.894 131.021 34.344 131 3" transform="matrix(0, -1, 1, 0, 72.000008, 134.000008)"/>
                    <path style="fill: none; stroke-width: 3px; stroke-linecap: round; stroke: url(#stress-kn);" d="M 15 119 C 45.52 118.894 71.021 94.344 71 63" transform="matrix(0, 1, -1, 0, 134.000008, 47.999992)"/>
                    <path style="fill: none; stroke-linecap: round; stroke: url(#resist-am); stroke-width: 5px;" d="M 25 56 C 48.435 55.92 68.016 37.068 68 13" transform="matrix(-1, 0, 0, -1, 93.000015, 69)"/>
                    <path style="fill: none; stroke-linecap: round; stroke: url(#resist-em); stroke-width: 5px;" d="M 78 56 C 101.435 55.919 121.016 37.068 121 13" transform="matrix(0, -1, 1, 0, 65.000004, 134.000004)"/>
                    <path style="fill: none; stroke-linecap: round; stroke: url(#resist-th); stroke-width: 5px;" d="M 78 109 C 101.435 108.919 121.016 90.068 121 66"/>
                    <path style="fill: none; stroke-linecap: round; stroke: url(#resist-kn); stroke-width: 5px;" d="M 24 109 C 47.435 108.919 67.016 90.068 67 66" transform="matrix(0, 1, -1, 0, 133.000008, 41.999992)"/>
                    </svg>
            ]]
            return rw
        end
        
        function dpsWidget()
            local dw = ''
        
            local x,y,s
            y = 28.25
            x = 1.75
            s = 11.25
            local ts = system.getArkTime()
            if dpsTracker[string.format('%.0f',ts/10)] == nil then
                dpsTracker[string.format('%.0f',(ts-10)/10)] = nil
                dpsTracker[string.format('%.0f',ts/10)] = 0
                table.insert(dpsChart,1,0)
            end
            if #dpsChart > 24 then
                table.remove(dpsChart,#dpsChart)
            end
            local cDPS = (dpsChart[1]+dpsChart[2])/20000
            dw = dw .. [[
                <svg style="position: absolute; top: ]]..y..[[vh; left: ]]..x..[[vw;" viewBox="0 -10 286 240" width="]]..s..[[vw">
                    <rect x="6%" y="6%" width="87%" height="90%" rx="1%" ry="1%" fill="rgba(0,0,0,0)" />
                    <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: rgba(0,0,0,0); stroke: ]]..neutralLineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                    <polygon style="stroke-linejoin: round; fill: rgba(0,0,0,0); stroke: ]]..neutralLineColor..[[;" points="18 17 12 22 12 62 15 66 15 125 18 127"/>
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="127" x2="266" y2="127"/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">DPS Chart</text>
                    <text style="fill: rgba(175, 75, 75, 0.90); font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="175" y="35">]].. string.format('%.2f',cDPS) ..[[k</text>
                    ]]
                
            for k,v in pairs(dpsChart) do
                dw = dw .. [[<circle cx="]].. tostring(23 + k*10) ..[[" cy="]].. tostring(123 - 2*v/10000) ..[[" r="2.25px" style="fill:rgba(175, 75, 75, 0.90);rgba(175, 75, 75, 0.90);stroke-width:0;opacity:0.75;" />]]
            end
        
            dw = dw.. [[
                </svg>
            ]]
            return dw
        end
        
        function transponderWidget()
            local tw = ''
            if transponder_1 ~= nil then
                local transponderColor = warning_outline_color
                local transponderStatus = 'offline'
                if transponder_1.isActive() then transponderColor = shieldHPColor transponderStatus = 'Active' end
                local tags = transponder_1.getTags()
        
                local x,y,s
                if minimalWidgets then
                    y = transponderWidgetYmin
                    x = transponderWidgetXmin
                    s = transponderWidgetScalemin
                else
                    y = transponderWidgetY
                    x = transponderWidgetX
                    s = transponderWidgetScale
                end
        
                tw = [[
                    <svg style="position: absolute; top: ]]..y..[[vh; left: ]]..x..[[vw;" viewBox="0 0 286 ]]..tostring(101+#tags*24)..[[" width="]]..s..[[vw">
                        <rect x="6%" y="12%" width="87%" height="79%" rx="1%" ry="1%" fill="rgba(100,100,100,.9)" />
                        <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                        <polygon style="stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="18 17 12 22 12 62 15 66 15 ]]..tostring(81+#tags*24)..[[ 18 ]]..tostring(83+#tags*24)..[["/>
                        <text style="fill: ]]..fontColor..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">Transponder Status:</text>
                        <text style="fill: ]]..transponderColor..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="190" y="35">]]..transponderStatus..[[</text>
                    ]]
        
        
                for i,tag in pairs(tags) do
                    local code = 'redacted'
                    if codeCount > 0 then code = tag end
                    tw = tw .. [[<line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="]]..tostring(54+(i-1)*27)..[[" x2="22" y2="]]..tostring(80.7+(i-1)*27)..[["/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="]]..tostring(73+(i-1)*27)..[[">]]..code..[[</text>]]
                end
                tw = tw .. '</svg>'
            end
        
            return tw
        end
        
        function minimalShipInfo()
            local msi = ''
        
            local bg = bgColor
            local apStatus = 'inactive'
            if auto_follow then bg = 'rgba(99, 250, 79, 0.5)' apStatus = 'following' end
            if autopilot then bg = 'rgba(99, 250, 79, 0.5)' apStatus = 'Engaged' end
            if not autopilot and autopilot_dest ~= nil then apStatus = 'Set' end
        
            local eta = ''
            if autopilot_dest and speed > 1000 then
                local balance = vec3(autopilot_dest - constructPosition):len()/(speed/3.6) --meters/(meter/second) == seconds
                local seconds = balance % 60 if seconds < 10 then seconds = string.format('0%.0f',seconds) else seconds = string.format('%.0f',seconds) end
                balance = balance // 60
                local minutes = balance % 60 if minutes < 10 then minutes = string.format('0%.0f',minutes) else minutes = string.format('%.0f',minutes) end
                balance = balance // 60
                local hours = balance % 60
                eta = string.format(' (ETA %.0f:%s.%s)',hours,minutes,seconds)
            end
        
            msi = msi .. [[
                <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.42vh" font-weight="bold">Auto Pilot Mode: ]]..apStatus..eta..[[</text>]]
            if caerusOption then
                msi = msi .. [[<text x="]].. tostring(.547 * screenWidth) ..[[" y="]].. tostring(.92 * screenHeight) ..[[" style="fill: rgb(73, 251, 53);" font-size="1.42vh" font-weight="bold">Speed: ]] .. formatNumber(speed,'speed') .. [[</text>]]
                msi = msi .. [[<text x="]].. tostring(.547 * screenWidth) ..[[" y="]].. tostring(.935 * screenHeight) ..[[" style="fill: rgb(73, 251, 53);" font-size="1.42vh" font-weight="bold">SZ Dist: ]]..SZDStr..[[</text></text>]]
            end
            msi = msi .. [[</svg>
            ]]
        
            msi = msi .. [[
                <svg style="position: absolute; top: ]]..shipInfoWidgetY..[[vh; left: ]]..shipInfoWidgetX..[[vw;" viewBox="0 0 286 260" width="]]..shipInfoWidgetScale..[[vw">
                    <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                    <polygon style="stroke-linejoin: round; fill: ]]..bg..[[; stroke: ]]..lineColor..[[;" points="18 17 12 22 12 62 15 66 15 258 18 260"/>
                    <text style="fill: ]]..fontColor..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">]]..string.format('%s (%s)',construct.getName(),pilotName)..[[</text>
                ]]
            msi = msi .. [[
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="54" x2="22" y2="77"/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="40" y="73">Top Speed:</text>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 18px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="137" y="73" font-family: "monospace";>]]..formatNumber(maxSpeed,'speed')..[[</text>
        
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="81" x2="22" y2="104"/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="40" y="100">Brake Dist:</text>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 18px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="137" y="100" font-family: "monospace";>]]..formatNumber(brakeDist,'distance')..[[</text>
        
                ]]
        
            msi = msi .. '</svg>'
        
            curFuel = 0
            local fuelWarning = false
            local fuelTankWarning = false
            for i,v in pairs(spacefueltank) do 
                curFuel = curFuel + v.getItemsVolume()
                if v.getItemsVolume()/v.getMaxVolume() < .2 then fuelTankWarning = true end
            end
            sFuelPercent = curFuel/maxFuel * 100
            if sFuelPercent < 20 then fuelWarning = true end
            curFuelStr = string.format('%.2f%%',sFuelPercent)
        
            msi = msi .. string.format([[
                <svg width="100%%" height="100%%" style="position: absolute;left:0%%;top:0%%;font-family: Calibri;">
                    <linearGradient id="sFuel-vertical" x1="0%%" y1="100%%" x2="0%%" y2="0%%">
                    <stop offset="%.1f%%" style="stop-color:rgba(99, 250, 79, 0.95);stop-opacity:.95" />
                    <stop offset="%.1f%%" style="stop-color:rgba(255, 10, 10, 0.5);stop-opacity:.5" />
                    </linearGradient>]],sFuelPercent,sFuelPercent)
        
        
            if Nav.axisCommandManager:getMasterMode() == controlMasterModeId.travel then mode = 'Throttle ' .. tostring(Nav.axisCommandManager:getThrottleCommand(0) * 100) .. '%' modeBG = fuelTextColor
            else mode = 'Cruise '  .. string.format('%.2f',Nav.axisCommandManager:getTargetSpeed(0)) .. ' km/h' modeBG = 'rgba(99, 250, 79, 0.5)'
            end
            msi = msi .. [[
                        <path d="
                            M ]] .. tostring(.843*screenWidth) .. ' ' .. tostring(.052*screenHeight) .. [[
                            L ]] .. tostring(.843*screenWidth) .. ' ' .. tostring(.185*screenHeight) .. [[
                            L ]] .. tostring(.848*screenWidth) .. ' ' .. tostring(.185*screenHeight) .. [[
                            L ]] .. tostring(.848*screenWidth) .. ' ' .. tostring(.052*screenHeight) .. [[
                            L ]] .. tostring(.843*screenWidth) .. ' ' .. tostring(.052*screenHeight) .. [["
                            stroke="]]..lineColor..[[" stroke-width="1" fill="url(#sFuel-vertical)" />
                        <text x="]].. tostring(.80 * screenWidth) ..[[" y="]].. tostring(.198 * screenHeight) ..[[" style="fill: ]]..fuelTextColor..[[" font-size="1.32vh" font-weight="bold">Fuel: ]] .. curFuelStr .. [[</text>]]
            if caerusOption then
                msi = msi .. [[<text x="]].. tostring(.547 * screenWidth) ..[[" y="]].. tostring(.90 * screenHeight) ..[[" style="fill: ]]..modeBG..[[" font-size="1.32vh" font-weight="bold">]] .. mode .. [[</text>]]
            else
                msi = msi .. [[<text x="]].. tostring(.80 * screenWidth) ..[[" y="]].. tostring(.2115 * screenHeight) ..[[" style="fill: ]]..modeBG..[[" font-size="1.32vh" font-weight="bold">]] .. mode .. [[</text>]]
            end    
            msi = msi .. [[</svg>
                ]]
        
            if fuelTankWarning or fuelWarning or showAlerts then
                fuelWarningText = 'Fuel level &lt; 20%'
                if not fuelWarning then fuelWarningText = 'A Fuel tank &lt; 20%%' end
                warnings['lowFuel'] = 'svgWarning'
            else
                warnings['lowFuel'] = nil
            end
        
            msi = msi .. '</svg>'
        
            return msi
        end
        
        function generateScreen()
            if db_1 and db_1.hasKey('minimalWidgets') then
                minimalWidgets = db_1.getIntValue('minimalWidgets') == 1
            end 
            html = [[ <html>
                <style>
                    svg { filter: drop-shadow(0px 0px 1px rgba(255,255,255,.5));}
                </style>
                    <body style="font-family: Calibri;">
             ]]
            html = html .. brakeWidget()
            if showScreen then 
                if minimalWidgets then
                    html = html .. minimalShipInfo()
                else
                    html = html .. flightWidget()
                    html = html .. fuelWidget()
                    html = html .. apStatusWidget()
                    html = html .. positionInfoWidget()
                    html = html .. shipNameWidget()
                end
                if transponder_1 then html = html .. transponderWidget() end
                html = html .. hpWidget()
                if shield_1 then html = html .. resistWidget() end
                html = html .. engineWidget()
                if useLogo then
                    html = html .. [[<svg viewBox="0 0 500 500" width="5vw" height="5vh" style="position: absolute; top: 7vh; left: 0vw;">]] .. logoSVG .. [[
                        </svg>]]
                end
                html = html .. dpsWidget()
            end
            html = html .. planetARWidget()
            html = html .. helpWidget()
            html = html .. travelIndicatorWidget()
            html = html .. warningsWidget()
        
            html = html .. [[ </body> </html> ]]
            system.setScreen(html)
        end
        
        function globalDB(action)
            if db_1 ~= nil then
                if action == 'get' then
                    if db_1.hasKey('generateAutoCode') then generateAutoCode = db_1.getIntValue('generateAutoCode') == 1 end
                    if db_1.hasKey('asteroidPipes') then asteroidPipes = db_1.getIntValue('asteroidPipes') == 1 end
                    if db_1.hasKey('toggleBrakes') then toggleBrakes = db_1.getIntValue('toggleBrakes') == 1 end
                    if db_1.hasKey('caerusOption') then caerusOption = db_1.getIntValue('caerusOption') == 1 end
                    if db_1.hasKey('validatePilot') then validatePilot = db_1.getIntValue('validatePilot') == 1 end
                    if db_1.hasKey('showRemotePanel') then showRemotePanel = db_1.getIntValue('showRemotePanel') == 1 end
                    if db_1.hasKey('showDockingPanel') then showDockingPanel = db_1.getIntValue('showDockingPanel') == 1 end
                    if db_1.hasKey('showFuelPanel') then showFuelPanel = db_1.getIntValue('showFuelPanel') == 1 end
                    if db_1.hasKey('showHelper') then showHelper = db_1.getIntValue('showHelper') == 1 end
                    if db_1.hasKey('defaultHoverHeight') then defaultHoverHeight = db_1.getIntValue('defaultHoverHeight') end
                    if db_1.hasKey('topHUDLineColorSZ') then topHUDLineColorSZ = db_1.getStringValue('topHUDLineColorSZ') end
                    if db_1.hasKey('topHUDFillColorSZ') then topHUDFillColorSZ = db_1.getStringValue('topHUDFillColorSZ') end
                    if db_1.hasKey('textColorSZ') then textColorSZ = db_1.getStringValue('textColorSZ') end
                    if db_1.hasKey('topHUDLineColorPVP') then topHUDLineColorPVP = db_1.getStringValue('topHUDLineColorPVP') end
                    if db_1.hasKey('topHUDFillColorPVP') then topHUDFillColorPVP = db_1.getStringValue('topHUDFillColorPVP') end
                    if db_1.hasKey('textColorPVP') then textColorPVP = db_1.getStringValue('textColorPVP') end
                    if db_1.hasKey('fuelTextColor') then fuelTextColor = db_1.getStringValue('fuelTextColor') end
                    if db_1.hasKey('Direction_Indicator_Size') then Direction_Indicator_Size = db_1.getFloatValue('Direction_Indicator_Size') end
                    if db_1.hasKey('Direction_Indicator_Color') then Direction_Indicator_Color = db_1.getStringValue('Direction_Indicator_Color') end
                    if db_1.hasKey('Prograde_Indicator_Size') then Prograde_Indicator_Size = db_1.getFloatValue('Prograde_Indicator_Size') end
                    if db_1.hasKey('Prograde_Indicator_Color') then Prograde_Indicator_Color = db_1.getStringValue('Prograde_Indicator_Color') end
                    if db_1.hasKey('AP_Brake_Buffer') then AP_Brake_Buffer = db_1.getFloatValue('AP_Brake_Buffer') end
                    if db_1.hasKey('AP_Max_Rotation_Factor') then AP_Max_Rotation_Factor = db_1.getFloatValue('AP_Max_Rotation_Factor') end
                    if db_1.hasKey('AR_Mode') then AR_Mode = db_1.getStringValue('AR_Mode') end
                    if db_1.hasKey('AR_Range') then AR_Range = db_1.getFloatValue('AR_Range') end
                    if db_1.hasKey('AR_Size')then AR_Size = db_1.getFloatValue('AR_Size') end
                    if db_1.hasKey('AR_Fill') then AR_Fill = db_1.getStringValue('AR_Fill') end
                    if db_1.hasKey('AR_Outline') then AR_Outline = db_1.getStringValue('AR_Outline') end
                    if db_1.hasKey('AR_Opacity') then AR_Opacity = db_1.getStringValue('AR_Opacity') end
                    if db_1.hasKey('AR_Exclude_Moons') then AR_Exclude_Moons = db_1.getIntValue('AR_Exclude_Moons') == 1 end
                    if db_1.hasKey('EngineTagColor') then EngineTagColor = db_1.getStringValue('EngineTagColor') end
                    if db_1.hasKey('Indicator_Width') then Indicator_Width = db_1.getFloatValue('Indicator_Width') end
                    if db_1.hasKey('warning_size') then warning_size = db_1.getFloatValue('warning_size') end
                    if db_1.hasKey('warning_outline_color') then warning_outline_color = db_1.getStringValue('warning_outline_color') end
                    if db_1.hasKey('warning_fill_color') then warning_fill_color = db_1.getStringValue('warning_fill_color') end
                    if db_1.hasKey('useLogo') then useLogo = db_1.getIntValue('useLogo') == 1 end
                    if db_1.hasKey('logoSVG') then logoSVG = db_1.getStringValue('logoSVG') end
                    if db_1.hasKey('minimalWidgets') then minimalWidgets = db_1.getIntValue('minimalWidgets') == 1 end
                    if db_1.hasKey('homeBaseLocation') then homeBaseLocation = db_1.getStringValue('homeBaseLocation') end
                    if db_1.hasKey('homeBaseDistance') then homeBaseDistance = db_1.getIntValue('homeBaseDistance') end
        
                    if db_1.hasKey('autoVent') then autoVent = db_1.getIntValue('autoVent') == 1 end
        
                    if db_1.hasKey('hpWidgetX') then hpWidgetX = db_1.getFloatValue('hpWidgetX') end
                    if db_1.hasKey('hpWidgetY') then hpWidgetY = db_1.getFloatValue('hpWidgetY') end
                    if db_1.hasKey('hpWidgetScale') then hpWidgetScale = db_1.getFloatValue('hpWidgetScale') end
                    if db_1.hasKey('shieldHPColor') then shieldHPColor = db_1.getStringValue('shieldHPColor') end
                    if db_1.hasKey('ccsHPColor') then ccsHPColor = db_1.getStringValue('ccsHPColor') end
        
                    if db_1.hasKey('resistWidgetX') then resistWidgetX = db_1.getFloatValue('resistWidgetX') end
                    if db_1.hasKey('resistWidgetY') then resistWidgetY = db_1.getFloatValue('resistWidgetY') end
                    if db_1.hasKey('resistWidgetScale') then resistWidgetScale = db_1.getFloatValue('resistWidgetScale') end
                    if db_1.hasKey('antiMatterColor') then antiMatterColor = db_1.getStringValue('antiMatterColor') end
                    if db_1.hasKey('electroMagneticColor') then electroMagneticColor = db_1.getStringValue('electroMagneticColor') end
                    if db_1.hasKey('kineticColor') then kineticColor = db_1.getStringValue('kineticColor') end
                    if db_1.hasKey('thermicColor') then thermicColor = db_1.getStringValue('thermicColor') end
        
                    if db_1.hasKey('transponderWidgetX') then transponderWidgetX = db_1.getFloatValue('transponderWidgetX') end
                    if db_1.hasKey('transponderWidgetY') then transponderWidgetY = db_1.getFloatValue('transponderWidgetY') end
                    if db_1.hasKey('transponderWidgetScale') then transponderWidgetScale = db_1.getFloatValue('transponderWidgetScale') end
                    if db_1.hasKey('transponderWidgetXmin') then transponderWidgetXmin = db_1.getFloatValue('transponderWidgetXmin') end
                    if db_1.hasKey('transponderWidgetYmin') then transponderWidgetYmin = db_1.getFloatValue('transponderWidgetYmin') end
                    if db_1.hasKey('transponderWidgetScalemin') then transponderWidgetScalemin = db_1.getFloatValue('transponderWidgetScalemin') end
        
                elseif action == 'save' then
                    if generateAutoCode then db_1.setIntValue('generateAutoCode',1) else db_1.setIntValue('generateAutoCode',0) end
                    if asteroidPipes then db_1.setIntValue('asteroidPipes',1) else db_1.setIntValue('asteroidPipes',0) end
                    if toggleBrakes then db_1.setIntValue('toggleBrakes',1) else db_1.setIntValue('toggleBrakes',0) end
                    if caerusOption then db_1.setIntValue('caerusOption',1) else db_1.setIntValue('caerusOption',0) end
                    if showRemotePanel then db_1.setIntValue('showRemotePanel',1) else db_1.setIntValue('showRemotePanel',0) end
                    if showDockingPanel then db_1.setIntValue('showDockingPanel',1) elsedb_1.setIntValue('showDockingPanel',0) end
                    if showFuelPanel then db_1.setIntValue('showFuelPanel',1) else db_1.setIntValue('showFuelPanel',0) end
                    if showHelper then db_1.setIntValue('showHelper',1) else db_1.setIntValue('showHelper',0) end
                    if validatePilot then db_1.setIntValue('validatePilot',1) else db_1.setIntValue('validatePilot',0) end
                    db_1.setIntValue('defaultHoverHeight',defaultHoverHeight)
                    db_1.setStringValue('topHUDLineColorSZ',topHUDLineColorSZ)
                    db_1.setStringValue('topHUDFillColorSZ',topHUDFillColorSZ)
                    db_1.setStringValue('textColorSZ',textColorSZ)
                    db_1.setStringValue('topHUDLineColorPVP',topHUDLineColorPVP)
                    db_1.setStringValue('topHUDFillColorPVP',topHUDFillColorPVP)
                    db_1.setStringValue('textColorPVP',textColorPVP)
                    db_1.setStringValue('fuelTextColor',fuelTextColor)
                    db_1.setFloatValue('Direction_Indicator_Size',Direction_Indicator_Size)
                    db_1.setStringValue('Direction_Indicator_Color',Direction_Indicator_Color)
                    db_1.setFloatValue('Prograde_Indicator_Size',Prograde_Indicator_Size) 
                    db_1.setStringValue('Prograde_Indicator_Color',Prograde_Indicator_Color) 
                    db_1.setFloatValue('AP_Brake_Buffer',AP_Brake_Buffer)
                    db_1.setFloatValue('AP_Max_Rotation_Factor',AP_Max_Rotation_Factor)
                    db_1.setStringValue('AR_Mode',AR_Mode)
                    db_1.setFloatValue('AR_Range',AR_Range)
                    db_1.setFloatValue('AR_Size',AR_Size)
                    db_1.setStringValue('AR_Fill',AR_Fill)
                    db_1.setStringValue('AR_Outline',AR_Outline)
                    db_1.setStringValue('AR_Opacity',AR_Opacity)
                    db_1.setStringValue('EngineTagColor',EngineTagColor)
                    db_1.setFloatValue('Indicator_Width',Indicator_Width)
                    db_1.setFloatValue('warning_size',warning_size)
                    if AR_Exclude_Moons then db_1.setIntValue('AR_Exclude_Moons',1) else db_1.setIntValue('AR_Exclude_Moons',0) end
                    db_1.setStringValue('warning_outline_color',warning_outline_color)
                    db_1.setStringValue('warning_fill_color',warning_fill_color)
                    if useLogo then db_1.setIntValue('useLogo',1) else db_1.setIntValue('useLogo',0) end
                    db_1.setStringValue('logoSVG',logoSVG)
                    if minimalWidgets then db_1.setIntValue('minimalWidgets',1) else db_1.setIntValue('minimalWidgets',0) end
                    if homeBaseLocation then db_1.setStringValue('homeBaseLocation',homeBaseLocation) end
                    db_1.setIntValue('homeBaseDistance',homeBaseDistance)
                    if autoVent then db_1.setIntValue('autoVent',1) else db_1.setIntValue('autoVent',0) end
        
                    db_1.setFloatValue('hpWidgetX',hpWidgetX)
                    db_1.setFloatValue('hpWidgetY',hpWidgetY)
                    db_1.setFloatValue('hpWidgetScale',hpWidgetScale)
                    db_1.setStringValue('shieldHPColor',shieldHPColor)
                    db_1.setStringValue('ccsHPColor',ccsHPColor)
        
                    db_1.setFloatValue('resistWidgetX',resistWidgetX)
                    db_1.setFloatValue('resistWidgetY',resistWidgetY)
                    db_1.setFloatValue('resistWidgetScale',resistWidgetScale)
                    db_1.setStringValue('antiMatterColor',antiMatterColor)
                    db_1.setStringValue('electroMagneticColor',electroMagneticColor)
                    db_1.setStringValue('kineticColor',kineticColor)
                    db_1.setStringValue('thermicColor',thermicColor)
        
                    db_1.setFloatValue('transponderWidgetX',transponderWidgetX)
                    db_1.setFloatValue('transponderWidgetY',transponderWidgetY)
                    db_1.setFloatValue('transponderWidgetScale',transponderWidgetScale)
                    db_1.setFloatValue('transponderWidgetXmin',transponderWidgetXmin)
                    db_1.setFloatValue('transponderWidgetYmin',transponderWidgetYmin)
                    db_1.setFloatValue('transponderWidgetScalemin',transponderWidgetScalemin)
                end
            end
        end
        
        Kinematic = {} -- just a namespace
        local ITERATIONS = 100 -- iterations over engine "warm-up" period
        
        function Kinematic.computeAccelerationTime(initial, acceleration, final)
            -- ans: t = (vf - vi)/a
            return (final - initial)/acceleration
        end
        
        function Kinematic.computeDistanceAndTime(initial,final,mass,thrust,t50,brakeThrust)
        
            t50            = t50 or 0
            brakeThrust    = brakeThrust or 0 -- usually zero when accelerating
        
            local speedUp  = initial < final
            local a0       = thrust / (speedUp and mass or -mass)
            local b0       = -brakeThrust/mass
            local totA     = a0+b0
        
            if initial == final then
                return 0, 0   -- trivial
            elseif speedUp and totA <= 0 or not speedUp and totA >= 0 then
                return -1, -1 -- no solution
            end
        
            local distanceToMax, timeToMax = 0, 0
        
            if a0 ~= 0 and t50 > 0 then
        
                local c1  = math.pi/t50/2
        
                local v = function(t)
                    return a0*(t/2 - t50*math.sin(c1*t)/math.pi) + b0*t + initial
                end
        
                local speedchk = speedUp and function(s) return s >= final end or
                                                function(s) return s <= final end
                timeToMax  = 2*t50
        
                if speedchk(v(timeToMax)) then
                    local lasttime = 0
        
                    while math.abs(timeToMax - lasttime) > 0.25 do
                        local t = (timeToMax + lasttime)/2
                        if speedchk(v(t)) then
                            timeToMax = t 
                        else
                            lasttime = t
                        end
                    end
                end
        
                -- Closed form solution for distance exists (t <= 2*t50):
                local K       = 2*a0*t50^2/math.pi^2
                distanceToMax = K*(math.cos(c1*timeToMax) - 1) +
                                (a0+2*b0)*timeToMax^2/4 + initial*timeToMax
        
                if timeToMax < 2*t50 then
                    return distanceToMax, timeToMax
                end
                initial = v(timeToMax)
            end
            -- At full thrust, motion follows Newtons formula:
            local a = a0+b0
            local t = Kinematic.computeAccelerationTime(initial, a, final)
            local d = initial*t + a*t*t/2
            return distanceToMax+d, timeToMax+t
        end
        
        function Kinematic.computeTravelTime(initial, acceleration, distance)
            if distance == 0 then return 0 end
            if acceleration ~= 0 then
                return (math.sqrt(2*acceleration*distance+initial^2) - initial)/
                            acceleration
            end
            assert(initial > 0, 'Acceleration and initial speed are both zero.')
            return distance/initial
        end
        
        function isNumber(n)  return type(n)           == 'number' end
        function isSNumber(n) return type(tonumber(n)) == 'number' end
        function isTable(t)   return type(t)           == 'table'  end
        function isString(s)  return type(s)           == 'string' end
        function isVector(v)  return isTable(v) and isNumber(v.x and v.y and v.z) end
        
        clamp = utils.clamp
        
        Transform = {}
        
        function Transform.computeHeading(planetCenter, position, direction)
            planetCenter   = vec3(planetCenter)
            position       = vec3(position)
            direction      = vec3(direction)
            local radius   = position - planetCenter
            if radius.x == 0 and radius.y == 0 then -- at north or south pole
                return radius.z >=0 and math.pi or 0
            end
            local chord    = planetCenter + vec3(0,0,radius:len()) - position
            local north    = chord:project_on_plane(radius):normalize_inplace()
            -- facing north, east is to the right
            local east     = north:cross(radius):normalize_inplace()
            local dir_prj  = direction:project_on_plane(radius):normalize_inplace()
            local adjacent = north:dot(dir_prj)
            local opposite = east:dot(dir_prj)
            local heading  = math.atan(opposite, adjacent) -- North==0
        
            if heading < 0 then heading = heading + 2*math.pi end
            if math.abs(heading - 2*math.pi) < .001 then heading = 0 end
            return heading
        end
        
        function Transform.computePRYangles(yaxis, zaxis, faxis, uaxis)
            yaxis = yaxis.x and yaxis or vec3(yaxis)
            zaxis = zaxis.x and zaxis or vec3(zaxis)
            faxis = faxis.x and faxis or vec3(faxis)
            uaxis = uaxis.x and uaxis or vec3(uaxis)
            local zproject = zaxis:project_on_plane(faxis):normalize_inplace()
            local adjacent = uaxis:dot(zproject)
            local opposite = faxis:cross(zproject):dot(uaxis)
            local roll     = math.atan(opposite, adjacent) -- rotate 'up' around 'fwd'
            local pitch    = math.asin(clamp(faxis:dot(zaxis), -1, 1))
            local fproject = faxis:project_on_plane(zaxis):normalize_inplace()
            local yaw      = math.asin(clamp(yaxis:cross(fproject):dot(zaxis), -1, 1))
            return pitch, roll, yaw
        end
    onUpdate:
      lua: |

    onFlush:
      lua: |
        ---------- Global Values ----------
        local clamp  = utils.clamp
        local function signedRotationAngle(normal, vecA, vecB)
            vecA = vecA:project_on_plane(normal)
            vecB = vecB:project_on_plane(normal)
            return math.atan(vecA:cross(vecB):dot(normal), vecA:dot(vecB))
        end
        
        if (pitchPID == nil) then
            pitchPID = pid.new(0.1, 0, 10)
            rollPID = pid.new(0.1, 0, 10)
            yawPID = pid.new(0.1, 0, 10)
        end
        
        speedVec = vec3(construct.getWorldVelocity())
        speed = speedVec:len() * 3.6
        direction = speedVec
        if speed < 50 then direction = vec3(construct.getWorldOrientationForward()) end
        maxSpeed = construct.getMaxSpeed() * 3.6
        gravity = core.getGravityIntensity()
        mass = construct.getMass()
        constructPosition = vec3(construct.getWorldPosition())
        maxBrake = json.decode(unit.getWidgetData()).maxBrake
        local maxThrustTags = 'thrust'
        if #enabledEngineTags > 0 then
            maxThrustTags = maxThrustTags .. ' disengaged'
            for i,tag in pairs(enabledEngineTags) do
                maxThrustTags = maxThrustTags .. ',thrust '.. tag
            end
        end
        maxThrust = construct.getMaxThrustAlongAxis(maxThrustTags,construct.getOrientationForward())
        maxSpaceThrust = math.abs(maxThrust[3])
        
        local dockedMass = 0
        for _,id in pairs(construct.getDockedConstructs()) do 
            dockedMass = dockedMass + construct.getDockedConstructMass(id)
        end
        for _,id in pairs(construct.getPlayersOnBoard()) do 
            dockedMass = dockedMass + construct.getBoardedPlayerMass(id)
        end
        apBrakeDist,brakeTime = Kinematic.computeDistanceAndTime(speedVec:len(),0,mass + dockedMass,0,0,maxBrake)
        brakeDist,brakeTime = Kinematic.computeDistanceAndTime(speedVec:len(),0,mass + dockedMass,0,0,maxBrake)
        accelVec = vec3(construct.getWorldAcceleration())
        accel = accelVec:len()
        
        ------------------------------------
        
        
        local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
        local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
        local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        
        local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
        local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
        -- validate params
        pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
        yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
        rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
        torqueFactor = math.max(torqueFactor, 0.01)
        brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
        brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
        autoRollFactor = math.max(autoRollFactor, 0.01)
        turnAssistFactor = math.max(turnAssistFactor, 0.01)
        
        -- final inputs
        local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
        local finalRollInput = rollInput + system.getControlDeviceYawInput()
        local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
        local finalBrakeInput = brakeInput
        
        -- Axis
        local worldVertical = vec3(core.getWorldVertical()) -- along gravity
        local constructUp = vec3(construct.getWorldOrientationUp())
        local constructForward = vec3(construct.getWorldOrientationForward())
        local constructRight = vec3(construct.getWorldOrientationRight())
        local constructVelocity = vec3(construct.getWorldVelocity())
        local constructVelocityDir = vec3(construct.getWorldVelocity()):normalize()
        local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
        local currentRollDegAbs = math.abs(currentRollDeg)
        local currentRollDegSign = utils.sign(currentRollDeg)
        
        -- Rotation
        local constructAngularVelocity = vec3(construct.getWorldAngularVelocity())
        -- SETUP AUTOPILOT ROTATIONS --
        local targetAngularVelocity = vec3()
        
        local destVec = vec3()
        local currentYaw = 0
        local currentPitch = 0
        local targetYaw = 0
        local targetPitch = 0
        local yawChange = 0
        local pitchChange = 0
        --local totalAngularChange = nil
        if autopilot_dest then
            destVec = vec3(autopilot_dest - constructPosition):normalize()
            local dirYaw = -math.deg(signedRotationAngle(constructUp:normalize(), destVec:normalize(), constructForward:normalize()))
            local dirPitch = math.deg(signedRotationAngle(constructRight:normalize(), destVec:normalize(), constructForward:normalize()))
        
            local speedYaw = -math.deg(signedRotationAngle(constructUp:normalize(), destVec:normalize(), constructVelocity))
            local speedPitch = math.deg(signedRotationAngle(constructRight:normalize(), destVec:normalize(), constructVelocity))
        
            local yawDiff = -math.deg(signedRotationAngle(constructUp:normalize(), constructVelocity:normalize(), constructForward:normalize()))
            local pitchDiff = math.deg(signedRotationAngle(constructRight:normalize(), constructVelocity:normalize(), constructForward:normalize()))
        
            if speed < 40 then
                yawChange = dirYaw
                pitchChange = dirPitch
            else
                yawChange = speedYaw
                pitchChange = speedPitch
        
                if math.abs(yawDiff) > 30 then yawChange = dirYaw end
                if math.abs(pitchDiff) > 30 then pitchChange = dirPitch end
            end
            --totalAngularChange = math.abs(yawChange) + math.abs(pitchChange)
            --system.print(string.format('%.2f | %.2f',pitchChange,yawChange))
        end
        
        if caerusOption then
            if not milEng then Nav:setEngineCommand('MilEng',vec3.zero,vec3.zero) end
        end
        
        if autopilot and autopilot_dest ~= nil and Nav.axisCommandManager:getThrottleCommand(0) ~= 0 then
            yawPID:inject(yawChange)
            local apYawInput = yawPID:get()
            if apYawInput > AP_Max_Rotation_Factor then apYawInput = AP_Max_Rotation_Factor
            elseif apYawInput < -AP_Max_Rotation_Factor then apYawInput = -AP_Max_Rotation_Factor
            end
        
            pitchPID:inject(pitchChange)
            local apPitchInput = -pitchPID:get()
            if apPitchInput > AP_Max_Rotation_Factor then apPitchInput = AP_Max_Rotation_Factor
            elseif apPitchInput < -AP_Max_Rotation_Factor then apPitchInput = -AP_Max_Rotation_Factor
            end
            targetAngularVelocity = apYawInput * 2 * constructUp
                                    + apPitchInput * 2 * constructRight
                                    + finalPitchInput * pitchSpeedFactor * constructRight
                                    + finalRollInput * rollSpeedFactor * constructForward
                                    + finalYawInput * yawSpeedFactor * constructUp
        else
            targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                + finalRollInput * rollSpeedFactor * constructForward
                + finalYawInput * yawSpeedFactor * constructUp
        end
        
        ---------------------------------
        
        -- In atmosphere?
        if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
            local autoRollRollThreshold = 1.0
            -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
            if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                if (rollPID == nil) then
                    rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                end
                rollPID:inject(targetRollDeg - currentRollDeg)
                local autoRollInput = rollPID:get()
        
                targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
            end
            local turnAssistRollThreshold = 20.0
            -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
            if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range
        
                -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                local rollVerticalRatio = 0
                if rescaleRollDegAbs < 90 then
                    rollVerticalRatio = rescaleRollDegAbs / 90
                elseif rescaleRollDegAbs < 180 then
                    rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                end
        
                rollVerticalRatio = rollVerticalRatio * rollVerticalRatio
        
                local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio
        
                targetAngularVelocity = targetAngularVelocity
                                    + turnAssistPitchInput * constructRight
                                    + turnAssistYawInput * constructUp
            end
        end
        
        -- Engine commands
        local keepCollinearity = 1 -- for easier reading
        local dontKeepCollinearity = 0 -- for easier reading
        local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we do not go to the next priorities
        
        -- Rotation
        if not dampening then
            constructAngularVelocity = vec3()
        end
        
        local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
        local airAcceleration = vec3(construct.getWorldAirFrictionAngularAcceleration())
        angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
        Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)
        
        -- Brakes
        local brakeAcceleration = vec3()
        if autopilot then
            if autopilot_dest ~= nil and vec3(constructPosition - autopilot_dest):len() <= apBrakeDist + AP_Brake_Buffer or closestPlanetDist < 0.65/.000005 or brakesOn then
                brakeAcceleration = -maxBrake * constructVelocityDir
                brakeInput = 1
            elseif autopilot_dest ~= nil and not brakesOn then
                brakeAcceleration = vec3()
                brakeInput = 0
            end
        else
            brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
        end
        Nav:setEngineForceCommand('brake', brakeAcceleration)
        
        -- AutoNavigation regroups all the axis command by 'TargetSpeed'
        local autoNavigationEngineTags = ''
        local autoNavigationAcceleration = vec3()
        local autoNavigationUseBrake = false
        
        -- Longitudinal Translation
        local longitudinalEngineTags = 'thrust analog longitudinal'
        if #enabledEngineTags > 0 then
            longitudinalEngineTags = longitudinalEngineTags .. ' disengaged'
            for i,tag in pairs(enabledEngineTags) do
                longitudinalEngineTags = longitudinalEngineTags .. ',thrust analog longitudinal '.. tag
            end
        end
        local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
        local longitudinalAcceleration = vec3()
        
        if autopilot and autopilot_dest ~= nil and vec3(constructPosition - autopilot_dest):len() <= apBrakeDist + AP_Brake_Buffer then
            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
            longitudinalAcceleration = vec3()
            Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
        elseif autopilot and autopilot_dest ~= nil and speed < maxSpeed - 10 and enginesOn then
            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,1)
            longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
            Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
        elseif autopilot and autopilot_dest ~= nil and speed >= maxSpeed - 10 then
            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
            longitudinalAcceleration = vec3()
            Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
            enginesOn = false
        else
            if (longitudinalCommandType == axisCommandType.byThrottle) then
                longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
            elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                    Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                then
                    autoNavigationUseBrake = true
                end
        
            end
        end
        
        -- Lateral Translation
        local lateralStrafeEngineTags = 'thrust analog lateral'
        local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
        if (lateralCommandType == axisCommandType.byThrottle) then
            local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
            Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
        elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
            local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
            autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
            autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
        end
        
        -- Vertical Translation
        local verticalStrafeEngineTags = 'thrust analog vertical'
        local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
        if (verticalCommandType == axisCommandType.byThrottle) then
            local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
            Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
        elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
            local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
            autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
            autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
        end
        
        -- Auto Navigation (Cruise Control)
        if (autoNavigationAcceleration:len() > constants.epsilon) then
            if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
            then
                autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
            end
            Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
        end
        
        -- Rockets
        Nav:setBoosterCommand('rocket_engine')
        
        -- Disable Auto-Pilot when destination is reached --
        if autopilot and autopilot_dest ~= nil and vec3(constructPosition - autopilot_dest):len() <= apBrakeDist + 1000 + AP_Brake_Buffer and speed < 1000 then
            system.print('-- Autopilot complete --')
            autopilot_dest_pos = nil
            autopilot = false
            brakeInput = brakeInput + 1
            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
            Nav:setEngineForceCommand(longitudinalEngineTags, vec3(), keepCollinearity)
        end
        ---------------------------------------------------
    onInputText(text):
      lua: |
        
        if string.starts(text,'disable ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches == 2 then
                text = matches[2]
                local rem = false
                for i,tag in pairs(enabledEngineTags) do
                    if tag == text then rem = i break end
                end
                if rem then table.remove(enabledEngineTags,rem) system.print(string.format('-- Engine tag filter removed "%s"',text)) end
                if text == 'ALL' then enabledEngineTags = {} end
                if #enabledEngineTags == 0 then system.print('-- No tag filtering. All engines enabled --') end
            else
                system.print('-- "disable" command requries an engine tag --')
            end
        end
        if string.starts(text,'enable ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches == 2 then
                text = matches[2]
                table.insert(enabledEngineTags,text)
                system.print(string.format('-- Engine tag filter added "%s" --',text))
                
                if text == 'ALL' then enabledEngineTags = {} end
            else
                system.print('-- "enable" command requries an engine tag --')
            end
        end
        if string.starts(text,'warp') then
            if string.starts(text,'warpFrom') then
                matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                if #matches == 3 then
                    dest = convertWaypoint(matches[3])
                    start = convertWaypoint(matches[2])
                else
                    system.print('Invalid entry')
                end
            elseif string.starts(text,'warp ') then
                start = nil
                matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                dest = convertWaypoint(matches[2])
            end
        
        
            -- Print out a designator to more easily tell
            -- multiple entries apart
            system.print('---------------------')
        
            -- Set initial minimum distance parameter to nil/empty
            local minDist = nil
            local pipeName = 'None'
        
            -- If we are entered both a start point and destination
            -- we will print out slightly different output
            if not start then
                curPos = vec3(construct.getWorldPosition())
                system.print('Selected Destination: ' .. text)
            else
                curPos = start
                system.print('Selected start position: ' .. matches[2])
                system.print('Selected Destination: ' .. matches[3])
            end
        
            -- Loop through all possible warp destinations.
            -- Determine each ones min distance from their
            -- line segment. If that distance is less than
            -- the global minimum, then we have found a new
            -- global minimum
            distType = ''
            for k,v in pairs(warp_beacons) do
                dist,tempType = pipeDist(curPos,v,dest,true)
                if dist ~= nil then
                    -- Once we know which one is the smallest, compare
                    -- it to our current smallest distance and see who
                    -- wins! If this one is smaller, we have a new
                    -- winner! Lets record the name and distance of the
                    -- new winner.
                    if not minDist or dist < minDist then
                        minDist = dist
                        pipeName = k
                        distType = tempType
                    end
                end
            end
        
            -- After we have checked all possible options, print out the final name
            -- and distance.
            system.print(string.format('Closest Warp %s: ',distType) .. pipeName)
            system.print(string.format('Closest Distance: %.2f SU',minDist*0.000005))
            system.print('---------------------')
        end
        if string.starts(text,'addWaypoint ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches < 2 then
                system.print('-- Requires a position tag with the command --')
            elseif #matches > 3 then
                system.print('-- only a position tag and name can be given with the command --')
                system.print('-- addWaypoint <position tag> [name] --')
            else
                AR_Temp = true
                if #matches == 2 then
                    AR_Temp_Points['Temp_' .. tostring(#AR_Temp_Points)] = matches[2]
                    system.print(string.format('-- Added waypoint "%s" (%s) --','Temp_' .. tostring(#AR_Temp_Points),matches[2]))
                else
                    AR_Temp_Points[matches[3]] = matches[2]
                    system.print(string.format('-- Added waypoint "%s" (%s) --',matches[3],matches[2]))
                end
            end
        end
        if string.starts(text,'delWaypoint ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches ~= 2 then
                system.print('-- Requires a waypoint name with the command --')
            else
                local rem = nil
                local count = 0
                for k,v in pairs(AR_Temp_Points) do
                    count = count + 1
                    if k == matches[2] then
                        rem = k
                    end
                end
                if rem then AR_Temp_Points[rem] = nil count = count -1 system.print(string.format('-- Removed waypoint "%s"',rem)) end
                if count == 0 then AR_Temp = false end
            end
        end
        if string.starts(text,'::pos{') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if trackerMode then
                if #trackerList == 0 then
                    table.insert(trackerList,matches[1])
                    system.print(string.format('-- 1st Position: %s',matches[1]))
                elseif trackerList[1] == matches[1] then system.print('-- 2nd trajectory point is the same as the first --')
                else
                    table.insert(trackerList,1,matches[1])
                    system.print(string.format('-- 1st Position: %s',trackerList[2]))
                    system.print(string.format('-- 2nd Position: %s',matches[1]))
        
                    AR_Temp_Points['Spotted'] = trackerList[1]
                    local P1 = vec3(convertWaypoint(trackerList[2]))
                    local P2 = vec3(convertWaypoint(trackerList[1]))
                    local T5 = P1+5/.000005*(P2 - P1)/vec3(P2-P1):len()
                    local T30 = P1+30/.000005*(P2 - P1)/vec3(P2-P1):len()
                    local T50 = P1+50/.000005*(P2 - P1)/vec3(P2-P1):len()
                    local t5p = string.format('::pos{0,0,%.2f,%.2f,%.2f}',T5['x'],T5['y'],T5['z'])
                    local t30p = string.format('::pos{0,0,%.2f,%.2f,%.2f}',T30['x'],T30['y'],T30['z'])
                    local t50p = string.format('::pos{0,0,%.2f,%.2f,%.2f}',T50['x'],T50['y'],T50['z'])
                    AR_Temp_Points['T5'] = t5p
                    AR_Temp_Points['T30'] = t30p
                    AR_Temp_Points['T50'] = t50p
        
                    system.print(string.format('--  5su Position: %s',t5p))
                    system.print(string.format('-- 30su Position: %s',t30p))
                    system.print(string.format('-- 50su Position: %s',t50p))
        
                    autopilot_dest = T50
                    autopilot_dest_pos = string.format('::pos{0,0,%.2f,%.2f,%.2f}',T50['x'],T50['y'],T50['z'])
                    system.setWaypoint(autopilot_dest_pos)
        
                    system.print('-- Trajectory points added --')
                end
                if #trackerList == 3 then table.remove(trackerList,3) end
            else
                autopilot_dest = vec3(convertWaypoint(matches[1]))
                autopilot_dest_pos = matches[1]
                system.print('-- Autopilot destination set --')
                system.print(matches[1])
            end
        end
        if string.starts(text,'distance') then
            system.print('-- Distances to AR Points --')
            local distTable = {}
            local nameTable = {}
            local posTable = {}
            for name,pos in pairs(AR_Generate) do
                local pDist = vec3(pos - constructPosition):len()
                table.insert(distTable,pDist)
                nameTable[tostring(pDist)] = name
                posTable[tostring(pDist)] = string.format('::pos{0,0,%.1f,%.1f,%.1f}',pos['x'],pos['y'],pos['z'])
            end
            table.sort(distTable,function(a, b) return a > b end)
            for _,dist in ipairs(distTable) do
                system.print(string.format('%s -> %s',nameTable[tostring(dist)],formatNumber(dist,'distance')))
                system.print('   ' .. posTable[tostring(dist)])
            end
            system.print('----------------------------')
        end
        if string.starts(text:lower(),'code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            table.insert(tags,matches[2])
            transponder_1.setTags(tags)
            transponder_1.deactivate()
            tags = transponder_1.getTags()
            system.print('--Transponder Code Added--')
        end
        if string.starts(text:lower(),'show codes') then
            unit.setTimer('showCode',1)
            system.print('--Transponder Codes visible--')
        end
        if text:lower() == 'show' then system.print(tostring(codeCount)) end
        if string.starts(text:lower(),'delcode') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            local r = nil
            for i,v in ipairs(tags) do if v == matches[2] then r = i end end
            table.remove(tags,r)
            transponder_1.setTags(tags)
            transponder_1.deactivate()
            tags = transponder_1.getTags()
            system.print('--Transponder Code Removed--')
        end
        if string.starts(text,'agc') then
            local matches = {}
            for w in text:gmatch('([^ ]+) ?') do table.insert(matches,w) end
            if (#matches ~= 2 or not tonumber(matches[2])) and codeSeed ~= nil then
                system.print('-- Invalid start command --')
            else
                local t = nil
                if #matches == 2 then t = tonumber(matches[2]) elseif #matches == 1 then t = tonumber(matches[1]) end
                if codeSeed == nil then
                    system.print('-- Transponder started --')
                    codeSeed = t
                    unit.setTimer('code',0.25)
                else
                    codeSeed = t
                    system.print('-- Code seed changed --')
                end
            end
        end
        if string.starts(text:lower(),'show ') and not string.starts(text,'show code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches ~= 2 then
                system.print('-- Invalid command format --')
            elseif not contains(validSizes,matches[2]) then
                system.print(string.format('-- Invalid filter "%s"',matches[2]))
            else
                if contains(filterSize,matches[2]) then
                    system.print(string.format('-- Already showing %s core size --',matches[2]))
                else
                    system.print(string.format('-- Including %s core size --',matches[2]))
                    table.insert(filterSize,matches[2])
                end
            end
        end
        if string.starts(text:lower(),'hide ') and not string.starts(text,'hide code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if (#matches ~= 2 ) then
                system.print('-- Invalid command format --')
            else
                if not contains(filterSize,matches[2]) then
                    system.print(string.format('-- Already hiding %s core size --',matches[2]))
                else
                    local r = nil
                    for i,v in ipairs(filterSize) do 
                        if v == matches[2] then
                            r = i
                        end
                    end
                    if r ~= nil then
                        system.print(string.format('-- Hiding %s core size --',matches[2]))
                        table.remove(filterSize,r)
                    else
                        system.print(string.format('-- %s core size not found --',matches[2]))
                    end
                end
            end
        end
        if text:lower() == 'asteroid pipes on' then asteroidPipes = true system.print('-- Enable Asteroid pipe file --') end
        if text:lower() == 'asteroid pipes off' then asteroidPipes = false system.print('-- Disabled Asteroid pipe file --') end


    onActionStart:
      args: ['antigravity']
      lua: |
          if antigrav ~= nil then antigrav.toggle() end
    onActionLoop:
      args: ['speeddown']
      lua: |
          if player.isFrozen() or seated then
              if lAlt then
                  Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -0.5)
              else
                  Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
              end
          end
    onActionStart:
      args: ['speeddown']
      lua: |
          if player.isFrozen() or seated then
              if lAlt then
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -1.0)
              else
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
              end
          end
          
          if auto_follow then
              system.print('Lowering speed: ' .. tostring(followSpeedMod))
              if lAlt then
                  followSpeedMod = followSpeedMod - 250
              else
                  followSpeedMod = followSpeedMod - 500
              end
              system.print('Lowered speed to: ' .. tostring(followSpeedMod))
          end
    onActionLoop:
      args: ['speedup']
      lua: |
          if player.isFrozen()or seated then
              if lAlt then
                  Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 0.5)
              else
                  Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
              end
          end
    onActionStart:
      args: ['speedup']
      lua: |
          if player.isFrozen() or seated then
              if lAlt then
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 1.0)
              else
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
              end
          end
          if auto_follow then
              system.print('Raising speed: ' .. tostring(followSpeedMod))
              if lAlt then
                  followSpeedMod = followSpeedMod + 250
              else
                  followSpeedMod = followSpeedMod + 500
              end
              system.print('Raised speed to: ' .. tostring(followSpeedMod))
          end
    onActionStart:
      args: ['stopengines']
      lua: |
          if Nav.axisCommandManager:getThrottleCommand(0) == 0 then
              Nav.axisCommandManager:setThrottleCommand(0,1)
              enginesOn = true
          else
              Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
              enginesOn = false
          end
    onActionStart:
      args: ['lshift']
      lua: |
          lShift = true
          if not lAlt then showScreen = false end
    onActionStop:
      args: ['lshift']
      lua: |
          lShift = false
          showScreen = true
    onActionStart:
      args: ['lalt']
      lua: |
          lAlt = true
    onActionStop:
      args: ['lalt']
      lua: |
          lAlt = false
    onActionStart:
      args: ['booster']
      lua: |
          if lAlt then
              boosterOn = not boosterOn
              if boosterOn then 
                  unit.setTimer('booster',.75)
              else
                  boosterCount = 0
                  unit.stopTimer('booster')
                  if Nav.boosterState then 
                      Nav:toggleBoosters()
                      system.print('Boosters Off (end)')
                  end
              end
          else
              if player.isFrozen() or seated then
                  Nav:toggleBoosters()
              end
          end
    onActionStart:
      args: ['brake']
      lua: |
          
          if toggleBrakes then
              if brakeInput > 0 then
                  brakeInput = 0
                  brakesOn = false
              else
                  brakeInput = brakeInput + 1
                  brakesOn = true
              end
          else
              brakeInput = brakeInput + 1
              brakesOn = true
          end
          
          local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
          if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
              local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
              if (math.abs(targetSpeed) > constants.epsilon) then
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
              end
          end

    onActionStop:
      args: ['brake']
      lua: |
          
          if not toggleBrakes and not spaceBar then
              brakeInput = 0
              brakesOn = false
          end
          

    onActionStart:
      args: ['yawleft']
      lua: |
          if player.isFrozen() or seated then
              yawInput = yawInput + 1
          end
    onActionStop:
      args: ['yawleft']
      lua: |
          if player.isFrozen() or seated then
              yawInput = yawInput - 1
          end
    onActionStart:
      args: ['yawright']
      lua: |
          if player.isFrozen() or seated then
              yawInput = yawInput - 1
          end
    onActionStop:
      args: ['yawright']
      lua: |
          if player.isFrozen() or seated then
              yawInput = yawInput + 1
          end
    onActionLoop:
      args: ['groundaltitudedown']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
          end
    onActionStart:
      args: ['groundaltitudedown']
      lua: |
          Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
    onActionLoop:
      args: ['groundaltitudeup']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
          end
    onActionStart:
      args: ['groundaltitudeup']
      lua: |
          Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
    onActionStop:
      args: ['down']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
              Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
          end
          

    onActionStart:
      args: ['down']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
          end
          

    onActionStop:
      args: ['up']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
              Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
          end
          spaceBar = false
    onActionStart:
      args: ['up']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
          end
          spaceBar = true

    onActionStop:
      args: ['strafeleft']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
          end
    onActionStart:
      args: ['strafeleft']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
          end
    onActionStop:
      args: ['straferight']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
          end
    onActionStart:
      args: ['straferight']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
              
              dampening = not dampening
          
              if dampening then
                  system.print("-- DAMPENING ON  --")
                  system.playSound('damp_on.mp3')
              else
                  system.print("-- DAMPENING OFF --")
                  system.playSound('damp_off.mp3')
              end
          end
    onActionStop:
      args: ['right']
      lua: |
          if player.isFrozen() or seated then
              rollInput = rollInput - 1
          end
    onActionStart:
      args: ['right']
      lua: |
          rollInput = rollInput + 1
    onActionStop:
      args: ['left']
      lua: |
          if player.isFrozen() or seated then
              rollInput = rollInput + 1
          end
    onActionStart:
      args: ['left']
      lua: |
          if player.isFrozen() or seated then
              rollInput = rollInput - 1
          end
    onActionStop:
      args: ['backward']
      lua: |
          if player.isFrozen() or seated then
              pitchInput = pitchInput - 1
          end
    onActionStart:
      args: ['backward']
      lua: |
          if player.isFrozen() or seated then
              pitchInput = pitchInput + 1
          end
    onActionStop:
      args: ['forward']
      lua: |
          if player.isFrozen() or seated then
              pitchInput = pitchInput + 1
          end
    onActionStart:
      args: ['forward']
      lua: |
          if player.isFrozen() or seated then
              pitchInput = pitchInput - 1
          end
    onActionStart:
      args: ['light']
      lua: |
          if Nav.control.isAnyHeadlightSwitchedOn() then
              Nav.control.switchOffHeadlights()
          else
              Nav.control.switchOnHeadlights()
          end
          

    onActionStart:
      args: ['gear']
      lua: |
          gearExtended = not gearExtended
          if gearExtended then
              Nav.control.deployLandingGears()
              Nav.axisCommandManager:setTargetGroundAltitude(0)
              player.freeze(false)
          else
              Nav.control.retractLandingGears()
              Nav.axisCommandManager:setTargetGroundAltitude(defaultHoverHeight)
              player.freeze(true)
          end
          


    onActionStart:
      args: ['option1']
      lua: |
          if not lShift then
              if showHelp then
                  if not showHelper then
                      system.showHelper(0)
                  end
                  showHelp = false
              else
                  system.showHelper(1) showHelp = true
              end
          else
              minimalWidgets = not minimalWidgets
              if minimalWidgets then db_1.setIntValue('minimalWidgets',1) else db_1.setIntValue('minimalWidgets',0) end
          end
    onActionStart:
      args: ['option2']
      lua: |
          if not lShift then
              if legacyFile then
                  if AR_Mode == 'ALL' then AR_Mode = 'PLANETS' system.print('-- AR Mode: Planets --')
                  elseif AR_Mode == 'PLANETS' and AR_Temp then AR_Mode = 'TEMPORARY' system.print('-- AR Mode: TEMPORARY --')
                  elseif AR_Mode == 'PLANETS' and AR_Custom then AR_Mode = 'FROM_FILE' system.print('-- AR Mode: FROM_FILE --')
                  elseif AR_Mode == 'PLANETS' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'TEMPORARY' and AR_Custom then AR_Mode = 'FROM_FILE' system.print('-- AR Mode: FROM_FILE --')
                  elseif AR_Mode == 'TEMPORARY' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FROM_FILE' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'NONE' then AR_Mode = 'ALL' system.print('-- AR Mode: All --')
                  end
              else
                  if AR_Mode == 'ALL' then AR_Mode = 'PLANETS' system.print('-- AR Mode: Planets --')
                  elseif AR_Mode == 'PLANETS' and AR_Temp then AR_Mode = 'TEMPORARY' system.print('-- AR Mode: TEMPORARY --')
                  elseif AR_Mode == 'PLANETS' and AR_Custom then AR_Mode = 'FILE1' system.print('-- AR Mode: FILE1: '..validWaypointFiles[1].DisplayName..' --')
                  elseif AR_Mode == 'PLANETS' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'TEMPORARY' and AR_Custom then AR_Mode = 'FILE1' system.print('-- AR Mode: FILE1: '..validWaypointFiles[1].DisplayName..' --')
                  elseif AR_Mode == 'TEMPORARY' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE1' and #validWaypointFiles > 1 then AR_Mode = 'FILE2' system.print('-- AR Mode: FILE2: '..validWaypointFiles[2].DisplayName..' --')
                  elseif AR_Mode == 'FILE1' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
                  elseif AR_Mode == 'FILE2' and #validWaypointFiles > 2 then AR_Mode = 'FILE3' system.print('-- AR Mode: FILE3: '..validWaypointFiles[3].DisplayName..' --')
                  elseif AR_Mode == 'FILE2' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
                  elseif AR_Mode == 'FILE3' and #validWaypointFiles > 3 then AR_Mode = 'FILE4' system.print('-- AR Mode: FILE4: '..validWaypointFiles[4].DisplayName..' --')
                  elseif AR_Mode == 'FILE3' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
                  elseif AR_Mode == 'FILE4' and #validWaypointFiles > 4 then AR_Mode = 'FILE5' system.print('-- AR Mode: FILE5: '..validWaypointFiles[5].DisplayName..' --')
                  elseif AR_Mode == 'FILE4' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
                  elseif AR_Mode == 'FILE5' and #validWaypointFiles > 5 then AR_Mode = 'FILE6' system.print('-- AR Mode: FILE6: '..validWaypointFiles[6].DisplayName..' --')
                  elseif AR_Mode == 'FILE5' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
                  elseif AR_Mode == 'FILE6' and #validWaypointFiles > 6 then AR_Mode = 'FILE7' system.print('-- AR Mode: FILE7: '..validWaypointFiles[7].DisplayName..' --')
                  elseif AR_Mode == 'FILE6' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
                  elseif AR_Mode == 'FILE7' and #validWaypointFiles > 7 then AR_Mode = 'FILE8' system.print('-- AR Mode: FILE8: '..validWaypointFiles[8].DisplayName..' --')
                  elseif AR_Mode == 'FILE7' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
                  elseif AR_Mode == 'FILE8' and #validWaypointFiles > 8 then AR_Mode = 'FILE9' system.print('-- AR Mode: FILE9: '..validWaypointFiles[9].DisplayName..' --')
                  elseif AR_Mode == 'FILE8' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
                  elseif AR_Mode == 'FILE9' and #validWaypointFiles > 9 then AR_Mode = 'FILE10' system.print('-- AR Mode: FILE10: '..validWaypointFiles[10].DisplayName..' --')
                  elseif AR_Mode == 'FILE9' then AR_Mode = 'NONE' system.print('-- AR Mode: None --')
                  elseif AR_Mode == 'NONE' then AR_Mode = 'ALL' system.print('-- AR Mode: All --')
                  else AR_Mode = 'NONE' system.print('-- Invalid AR Mode, Try again --')
                  end
              end
          end
    onActionStart:
      args: ['option3']
      lua: |
          if caerusOption then
              milEng = not milEng
              if not milEng then
                  system.print('Mil Engines Disabled')
              else
                  system.print('Mil Engines Enabled')
              end
          else
              if lShift then
                  local tag = nil
                  for i,t in pairs(predefinedTags) do
                      if contains(enabledEngineTags,t) then
                          tag = i
                      end
                  end
                  if tag then
                      local rem = nil
                      for k,v in pairs(enabledEngineTags) do
                          if v == predefinedTags[tag] then
                              rem = k
                          end
                      end
                      if rem then
                          table.remove(enabledEngineTags,rem)
                      end
                      if tag < #predefinedTags then
                          table.insert(enabledEngineTags,predefinedTags[tag+1])
                          system.print(string.format('-- Engine tag filter changed "%s" to "%s"',predefinedTags[tag],predefinedTags[tag+1]))
                      else
                          system.print(string.format('-- All Engines Enabled --'))
                      end
                  else
                      table.insert(enabledEngineTags,predefinedTags[1])
                      system.print(string.format('-- Engine tag filter added "%s"',predefinedTags[1]))
                  end
              else
                  enabledEngineTags = {}
                  system.print('-- All Engines Enabled --')
              end
          end
    onActionStart:
      args: ['option4']
      lua: |
          if lShift and homeBaseLocation then
              autopilot_dest = homeBaseVec
              autopilot_dest_pos = homeBaseLocation
              system.print('-- Autopilot set to home --')
          else
              autopilot = not autopilot
              if autopilot and autopilot_dest == nil then
                  autopilot = false
                  system.print('-- No autopilot destination entered --')
                  system.print('-- Autopilot disabled --')
              elseif not autopilot then
                  system.print('-- Autopilot disabled --')
              end
              if autopilot then
                  system.print('-- Autopilot engaged --')
                  system.setWaypoint(autopilot_dest_pos)
                  brakesOn = false
                  enginesOn = true
              end
          end
    onActionStart:
      args: ['option5']
      lua: |
          trackerMode = not trackerMode
          system.print(string.format('-- Tracker Mode "%s"',trackerMode))
    onActionStart:
      args: ['option6']
      lua: |
          if inSZ then system.print('-- Already in Safe Zone --') end
          system.print(string.format('-- Nearest SZ Center: %s',nearestSZPOS))
          system.setWaypoint(nearestSZPOS)
          autopilot_dest = vec3(convertWaypoint(nearestSZPOS))

    onActionStart:
      args: ['option7']
      lua: |

    onActionStart:
      args: ['option8']
      lua: |
          if shield_1 and not shield_1.isVenting() then shield_1.startVenting()
          elseif shield_1 and shield_1.isVenting() then shield_1.stopVenting() shield_1.activate()
          end
    onActionStart:
      args: ['option9']
      lua: |
          local masterMode = Nav.axisCommandManager:getMasterMode()
          if (masterMode == controlMasterModeId.travel) then
              Nav.control.cancelCurrentControlMasterMode()
              Nav.axisCommandManager:setMasterMode(controlMasterModeId.cruise)
          else
              Nav.control.cancelCurrentControlMasterMode()
              Nav.axisCommandManager:setMasterMode(controlMasterModeId.travel)
          end
  shield_1:
    onAbsorbed(damage,rawDamage):
      lua: |
        local ts = system.getArkTime()
        if dpsTracker[string.format('%.0f',ts/10)] then
            dpsTracker[string.format('%.0f',ts/10)] = dpsTracker[string.format('%.0f',ts/10)] + damage
            dpsChart[1] = dpsTracker[string.format('%.0f',ts/10)]
        else
            dpsTracker[string.format('%.0f',(ts-10)/10)] = nil
            dpsTracker[string.format('%.0f',ts/10)] = damage
            table.insert(dpsChart,1,damage)
        end