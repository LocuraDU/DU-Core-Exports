# conf file for DEFAULT++ HUD by Jeronimo / flight scripts innovator since 2017
# All other lua files must be kept in DEFAULT++V3 folder in custom folder

name: DEFAULT++ v3.63(r1.4.13 STABLE WIP)

slots:
    core:
        class: CoreUnit
    gyro:
        class: GyroUnit
    DB:
        class: DataBankUnit
        select: manual
    shield:
        class: ShieldGeneratorUnit
    radar:
        class: RadarPVPUnit
        select: manual
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: manual
    spacefueltank:
        class: SpaceFuelContainer
        select: manual
    rocketfueltank:
        class: RocketFuelContainer
        select: manual
    switch:
        class: ManualSwitchUnit
        select: manual
    telemeter:
        class: TelemeterUnit
        select: manual
    
handlers:
    unit:
        onStart:
            lua: |
                if #switch ~= 0 then switch_1.activate() end
                params = {
                        window_tittle = "MAIN MENU",
                        window_pos = {x=0, y=0},
                        window_open = true,
                        [1] = 'Menu_Settings',
                        [2] = 'Engines_Settings',
                        [3] = 'AutoPilot_Settings',
                        [4] = 'Widgets_Settings',
                        [5] = 'Widgets_Custom',
                        [6] = 'KeyBind_Params',
                        Menu_Settings = {
                            window_tittle = "MENU SETTINGS",
                            window_pos = {x=5, y=50},
                            window_open = true,
                            [1] = 'TITTLE_COLOR',
                            [2] = 'TITTLE_COLOR_A',
                            [3] = 'TITTLE_TEXT_COLOR',
                            [4] = 'separator',
                            [5] = 'WINDOW_COLOR',
                            [6] = 'WINDOW_COLOR_A',
                            [7] = 'WINDOW_TEXT_COLOR',
                            [8] = 'separator',
                            [9] = 'BUTTON_COLOR',
                            [10] = 'BUTTON_BORDER_COLOR',
                            [11] = 'BUTTON_COLOR_A',
                            [12] = 'BUTTON_TEXT_COLOR',
                            [13] = 'separator',
                            [14] = 'WIDGET_TEXT_COLOR',
                            [15] = 'WIDGET_ANIM_COLOR',
                            [16] = 'WIDGET_FIXED_COLOR',
                            [17] = 'separator',
                            [18] = 'PRESET',
                            [19] = 'separator',
                            [20] = 'HELP_MENU',
                            TITTLE_COLOR = {name = "TITTLE COLOR", value = "white", range = {}, quickToolBar = false},
                            TITTLE_COLOR_A = {name = "TITTLE ALPHA", value = 1, range = {0,1}, incrementRange = {0.1, 0.05}, increment = 0.1, quickToolBar = false},
                            TITTLE_TEXT_COLOR = {name = "TITTLE TEXT COLOR", value = "black", range = {}, quickToolBar = false},
                            WINDOW_COLOR = {name = "WINDOW COLOR", value = "midnightblue", range = {}, quickToolBar = false},
                            WINDOW_COLOR_A = {name = "WINDOW ALPHA", value = 0.3, range = {0,1}, incrementRange = {0.1, 0.05}, increment = 0.1, quickToolBar = false},
                            WINDOW_TEXT_COLOR = {name = "WINDOW TEXT COLOR", value = "skyblue", range = {}, quickToolBar = false},
                            BUTTON_COLOR = {name = "BUTTON COLOR", value = "white", range = {}, quickToolBar = false},
                            BUTTON_BORDER_COLOR = {name = "BUTTON BORDER COLOR", value = "lightgray", range = {}, quickToolBar = false},
                            BUTTON_COLOR_A = {name = "BUTTON ALPHA", value = 0.1, range = {0,1}, incrementRange = {0.1, 0.05}, increment = 0.1, quickToolBar = false},
                            BUTTON_TEXT_COLOR = {name = "BUTTON TEXT COLOR", value = "white", range = {}, quickToolBar = false},
                            WIDGET_TEXT_COLOR = {name = "WIDGET TEXT COLOR", value = "skyblue", range = {}, quickToolBar = true},
                            WIDGET_ANIM_COLOR = {name = "WIDGET SVG COLOR1", value = "red", range = {}, quickToolBar = true},
                            WIDGET_FIXED_COLOR = {name = "WIDGET SVG COLOR2", value = "white", range = {}, quickToolBar = true},
                            PRESET = {name = "COLOR PRESETS", value = "preset1", range = {"preset1","preset2","preset3","preset4","preset5"}, quickToolBar = true},
                            HELP_MENU = {name = "HELP MENU", value = function() params.help_menu.window_open = not params.help_menu.window_open
                                                                            end, quickToolBar = false},
                        },
                        Engines_Settings = {
                            window_tittle = "ENGINE SETTINGS",
                            window_pos = {x=310, y=50},
                            window_open = true,
                            [1] = 'pitchSpeedFactor',
                            [2] = 'yawSpeedFactor',
                            [3] = 'rollSpeedFactor',
                            [4] = 'angularVelocityCounterFactor',
                            [5] = 'separator',
                            [6] = 'longitudinalBrakeFactor',
                            [7] = 'lateralBrakeFactor',
                            [8] = 'verticalBrakeFactor',
                            [9] = 'spaceBrakeFactor',
                            [10] = 'separator',
                            [11] = 'gyroAxis',
                            [12] = 'pitchAngleAdjustment',
                            [13] = 'rollAngleAdjustment',
                            [14] = 'separator',
                            [15] = 'hoverThrust',
                            [16] = 'hoverMode',
                            [17] = 'hoverAlt',
                            [18] = 'vboosterThrust',
                            [19] = 'aggAltitude',
                            [20] = 'separator',
                            [21] = 'engines',
                            [22] = 'ecoMode',
                            [23] = 'amtoMaxSpeed',
                            pitchSpeedFactor = {name = "PITCH FACTOR", value = 1, range = {0,10}, incrementRange = {0.01, 0.1, 0.5}, increment = 0.1, quickToolBar = false},
                            yawSpeedFactor = {name = "YAW FACTOR", value = 1, range = {0,10}, incrementRange = {0.01, 0.1, 0.5}, increment = 0.1, quickToolBar = false},
                            rollSpeedFactor = {name = "ROLL FACTOR", value = 1, range = {0,10}, incrementRange = {0.01, 0.1, 0.5}, increment = 0.1, quickToolBar = false},
                            angularVelocityCounterFactor = {name = "ANGULAR DAMPENING FACTOR", value = 1, range = {0,10}, incrementRange = {0.01, 0.1, 0.5}, increment = 0.1, quickToolBar = false},
                            longitudinalBrakeFactor = {name = "LONG BRAKE FACTOR", value = 1, range = {0,10}, incrementRange = {0.01, 0.1, 0.5}, increment = 0.1, quickToolBar = false},
                            lateralBrakeFactor = {name = "LAT BRAKE FACTOR", value = 1, range = {0,10}, incrementRange = {0.01, 0.1, 0.5}, increment = 0.1, quickToolBar = false},
                            verticalBrakeFactor = {name = "VERT BRAKE FACTOR", value = 1, range = {0,10}, incrementRange = {0.01, 0.1, 0.5}, increment = 0.1, quickToolBar = false},
                            spaceBrakeFactor = {name = "SPACE BRAKE INTENSITY", value = 1, range = {0,10}, incrementRange = {0.01, 0.1, 0.5}, increment = 0.1, quickToolBar = false},
                            gyroAxis = {name = "GYRO AXIS", value = false, quickToolBar = false},
                            pitchAngleAdjustment = {name = "PITCH TILTING", value = 0, range = {-90,90}, incrementRange = {1, 45, 90}, increment = 1, quickToolBar = false},
                            rollAngleAdjustment = {name = "ROLL TILTING", value = 0, range = {-90,90}, incrementRange = {1, 45, 90}, increment = 1, quickToolBar = false},
                            hoverThrust = {name = "HOVERS ON/OFF", value = "ON", range = {"ON","OFF"}, quickToolBar = false},
                            hoverMode = {name = "HOVERS MODE", value = "DYNAMIC", range = {"DYNAMIC","STATIC"}, quickToolBar = true},
                            hoverAlt = {name = "HOVERS ALTITUDE", value = 5, range = {-9999,50}, incrementRange = {0.1, 1, 5, 100}, increment = 1, quickToolBar = true},
                            vboosterThrust = {name = "VBOOSTERS ON/OFF", value = "ON", range = {"ON","OFF","AUTO"}, quickToolBar = false},
                            aggAltitude = {name = "AGG ALTITUDE", value = 1000, range = {1000,500000}, incrementRange = {1, 10, 100, 1000, 10000}, increment = 100, quickToolBar = false},
                            engines = {name = "ENGINES ON/OFF", value = "AUTO", range = {"ON","OFF","AUTO"}, quickToolBar = false},
                            ecoMode = {name = "ECO MODE", value = false, quickToolBar = false},
                            amtoMaxSpeed = {name = "ATMO MAX SPEED", value = math.floor(construct.getFrictionBurnSpeed()*3.6), range = {-1,29999}, incrementRange = {1, 10, 100}, increment = 10, quickToolBar = false}
                        },
                        AutoPilot_Settings = {
                            window_tittle = "AUTO-ASSIST SETTINGS",
                            window_pos = {x=615, y=50},
                            window_open = true,
                            [1] = 'autoBrakeSpeed',
                            [2] = 'separator',
                            [3] = 'stabilisationsAltitude',
                            [4] = 'autoRoll',
                            [5] = 'turnAssist',
                            [6] = 'turnAssistRollThreshold',
                            [7] = 'turnAssistPitchThreshold',
                            [8] = 'separator',
                            [9] = 'autoPitch',
                            [10] = 'autoPitchAmplitude',
                            [11] = 'altitudeStabilisation',
                            [12] = 'antiStall',
                            [13] = 'separator',
                            [14] = 'inertiaAutoBrake',
                            [15] = 'atmoAntiDriftFactor',
                            [16] = 'spaceAntiDriftFactor',
                            [17] = 'autoProGrade',
                            [18] = 'autoOrbitSpeed',
                            [19] = 'separator',
                            [20] = 'rocketMaxSpeed',
                            [21] = 'separator',
                            [22] = 'docking',
                            autoBrakeSpeed = {name = "AUTO BRAKE SPEED", value = 100, range = {0,1000}, incrementRange = {1, 5, 10}, increment = 1, quickToolBar = false},
                            stabilisationsAltitude = {name = "STABILISATIONS ALTITUDE MAX", value = 200000, range = {-2000,500000}, incrementRange = {100, 1000, 10000}, increment = 100, quickToolBar = false},
                            autoRoll = {name = "ROLL STABILISATION", value = true, quickToolBar = false},
                            turnAssist = {name = "TURN ASSIST", value = false, quickToolBar = false},
                            turnAssistRollThreshold = {name = "TURN ASSIST MIN ROLL", value = 15, range = {1,90}, incrementRange = {1, 5, 10}, increment = 1, quickToolBar = false},
                            turnAssistPitchThreshold = {name = "TURN ASSIST MAX PITCH", value = 20, range = {1,90}, incrementRange = {1, 5, 10}, increment = 1, quickToolBar = false},
                            autoPitch = {name = "PITCH STABILISATION", value = true, quickToolBar = false},
                            autoPitchAmplitude = {name = "AUTO PITCH AMPLITUDE", value = 2.5, range = {1,90}, incrementRange = {0.5, 1, 5}, increment = 1, quickToolBar = false},
                            altitudeStabilisation = {name = "ALTITUDE STABILISATION", value = true, quickToolBar = false},
                            antiStall = {name = "ATMO ANTI-STALL", value = false, quickToolBar = false},
                            inertiaAutoBrake = {name = "INERTIA AUTO BRAKE", value = true, quickToolBar = false},
                            atmoAntiDriftFactor = {name = "ATMO INERTIA FACTOR", value = 0.95, range = {0,1}, incrementRange = {0.001, 0.01, 0.1}, increment = 0.01, quickToolBar = false},
                            spaceAntiDriftFactor = {name = "SPACE INERTIA FACTOR", value = 0.95, range = {0,1}, incrementRange = {0.001, 0.01, 0.1}, increment = 0.01, quickToolBar = false},
                            autoProGrade = {name = "SPACE AUTO PROGRADE", value = false, quickToolBar = false},
                            autoOrbitSpeed = {name = "SPACE AUTO ORBIT SPEED", value = false, quickToolBar = false},
                            rocketMaxSpeed = {name = "ROCKETS MAX SPEED", value = 1200, range = {-1,29999}, incrementRange = {1, 10, 100}, increment = 10, quickToolBar = false},
                            docking = {name = "DOCKING PARENT", value = "MANUAL", range = {"MANUAL","OWNER","CLOSEST"}, quickToolBar = false},
                        },
                        Widgets_Settings = {
                            window_tittle = "WIDGETS",
                            window_pos = {x=920, y=50},
                            window_open = true,
                            [1] = 'widget_speedometer',
                            [2] = 'widget_gyro',
                            [3] = 'widget_fuel',
                            [4] = 'widget_info',
                            [5] = 'widget_map',
                            [6] = 'separator',
                            [7] = 'widget_core',
                            [8] = 'widget_agg',
                            [9] = 'widget_warp',
                            [10] = 'widget_parenting',
                            [11] = 'widget_cstress',
                            [12] = 'widget_shield',
                            [13] = 'separator',
                            [14] = 'widget_periscope',
                            [15] = 'widget_radar_statics',
                            [16] = 'widget_radar_dynamics',
                            [17] = 'widget_radar_transponder',
                            [18] = 'widget_radar_armed',
                            [19] = 'widget_radar_wrecks',
                            [20] = 'widget_radar_threat',
                            [21] = 'widget_radar_asteroid',
                            [22] = 'separator',
                            [23] = 'widget_radar_entries',
                            [24] = 'widget_refresh',
                            widget_speedometer = {name = "SPEEDOMETER", value = "Default ++", range = {"Default ++", "Default","Both","None"}, quickToolBar = false},
                            widget_gyro = {name = "GYROSCOPE", value = "Default ++", range = {"Default ++", "Default","Both","None"}, quickToolBar = false},
                            widget_fuel = {name = "FUEL TANKS", value = "Default ++", range = {"Default ++", "Default","Both","None"}, quickToolBar = false},
                            widget_info = {name = "INFOS", value = "None", range = {"Default ++", "ALT", "None"}, quickToolBar = false},
                            widget_map = {name = "MAP", value = "None", range = {"Default ++", "ALT", "None"}, quickToolBar = false},
                            widget_core = {name = "CORE", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_agg = {name = "AGG", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_warp = {name = "WARP DRIVE", value = "None", range = {"Default", "ALT", "Auto", "None"}, quickToolBar = false},
                            widget_parenting = {name = "PARENTING", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_cstress = {name = "COMBAT STRESS", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_shield = {name = "SHIELD", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_periscope = {name = "PERISCOPE", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_radar_statics = {name = "RADAR STATICS", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_radar_dynamics = {name = "RADAR DYNAMICS", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_radar_transponder = {name = "RADAR TRANSPONDER", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_radar_armed = {name = "RADAR ARMED", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_radar_wrecks = {name = "RADAR WRECKS", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_radar_threat = {name = "RADAR THREATS", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_radar_asteroid = {name = "RADAR ASTEROIDS", value = "None", range = {"Default", "ALT", "None"}, quickToolBar = false},
                            widget_radar_entries = {name = "MAX RADAR ENTRIES", value = 50, range = {1,1000}, incrementRange = {1, 10, 100}, increment = 10, quickToolBar = false},
                            widget_refresh = {name = "WIDGETS REFRESHING RATE", value = 0.01, range = {0.001,1}, incrementRange = {0.001, 0.01, 0.1}, increment = 0.001, quickToolBar = false},
                        },
                        Widgets_Custom = {
                            window_tittle = "CUSTOM WIDGETS",
                            window_pos = {x=1225, y=50},
                            window_open = true,
                        },
                        KeyBind_Params = {
                            window_tittle = "KEYBIND PARAMETERS",
                            window_pos = {x=1530, y=50},
                            window_open = true,
                            [1] = 'flightMode',
                            [2] = 'parkingMaxSpeed',
                            [3] = 'separator',
                            [4] = 'InvertControlsQEAD',
                            [5] = 'separator',
                            [6] = 'doubleTapTime',
                            [7] = 'shiftLock',
                            [8] = 'separator',
                            [9] = 'acrobatic_PitchAngle',
                            [10] = 'acrobatic_RotAngle',
                            [11] = 'acrobatic_RollAngle',
                            [12] = 'separator',
                            [13] = 'movementLock',
                            [14] = 'viewLock',
                            [15] = 'mouseControl',
                            [16] = 'mouseControlSensibility',
                            [17] = 'separator',
                            [18] = 'mouseControlKB',
                            [19] = 'movementLockKB',
                            [20] = 'viewLockKB',
                            [21] = 'flightModeKB',
                            [22] = 'speedLockKB',
                            [23] = 'showScreenKB',
                            flightMode = {name = "FLIGHT MODE", value = "TRAVEL", range = {"CRUISE","TRAVEL","PARKING","SPORT"}, quickToolBar = true},
                            parkingMaxSpeed = {name = "PARKING MAX SPEED", value = 50, range = {0,29999}, incrementRange = {1, 10, 100}, increment = 1, quickToolBar = false},
                            InvertControlsQEAD = {name = "QE/AD INVERT", value = false, quickToolBar = false},
                            doubleTapTime = {name = "DOUBLE TAP TIME", value = 0.25, range = {0.01,1}, incrementRange = {0.01, 0.1}, increment = 0.01, quickToolBar = false},
                            shiftLock = {name = "SHIFT LOCK", value = false, quickToolBar = false},
                            acrobatic_PitchAngle = {name = "ACROBATIC PITCH", value = 179.9, range = {0.1,179.9}, incrementRange = {0.5, 1, 5}, increment = 1, quickToolBar = false},
                            acrobatic_RotAngle = {name = "ACROBATIC ROT", value = 90, range = {0.1,179.9}, incrementRange = {0.5, 1, 5}, increment = 1, quickToolBar = false},
                            acrobatic_RollAngle = {name = "ACROBATIC  ROLL", value = 90, range = {0.1,179.9}, incrementRange = {0.5, 1, 5}, increment = 1, quickToolBar = false},
                            movementLock = {name = "FREEZE MOVEMENT", value = false, quickToolBar = false},
                            viewLock = {name = "FREEZE VIEW", value = false, quickToolBar = false},
                            mouseControl = {name = "MOUSE CONTROL", value = false, quickToolBar = false},
                            mouseControlSensibility = {name = "M-C SENSIBILITY", value = 0.3, range = {0.01,10}, incrementRange = {0.01,0.1, 1}, increment = 0.1, quickToolBar = false},
                            mouseControlKB = {name = "MOUSE CONTROL KB", value = "ALT+4", range = {"ALT+3","ALT+4","ALT+5","ALT+6","ALT+7","ALT+8","ALT+9", "None"}, quickToolBar = false},
                            movementLockKB = {name = "MOVEMENT FREEZE KB", value = "ALT+5", range = {"ALT+3","ALT+4","ALT+5","ALT+6","ALT+7","ALT+8","ALT+9", "None"}, quickToolBar = false},
                            viewLockKB = {name = "VIEW FREEZE KB", value = "ALT+6", range = {"ALT+3","ALT+4","ALT+5","ALT+6","ALT+7","ALT+8","ALT+9", "None"}, quickToolBar = false},
                            flightModeKB = {name = "FLIGHT MODE KB", value = "ALT+7", range = {"ALT+3","ALT+4","ALT+5","ALT+6","ALT+7","ALT+8","ALT+9", "None"}, quickToolBar = false},
                            speedLockKB = {name = "ATMO SPEED LOCK KB", value = "ALT+8", range = {"ALT+3","ALT+4","ALT+5","ALT+6","ALT+7","ALT+8","ALT+9", "None"}, quickToolBar = false},
                            showScreenKB = {name = "SHOW HUDS KB", value = "ALT+9", range = {"ALT+3","ALT+4","ALT+5","ALT+6","ALT+7","ALT+8","ALT+9", "None"}, quickToolBar = false},
                        },
                        QuickToolBar = {
                            window_tittle = "QUICK TOOL BAR",
                            window_pos = {x=750, y=500},
                            window_open = false
                        },
                        Widget_Speedo = {
                            window_tittle = "SPEEDOMETER",
                            window_pos = {x=1880, y=277},
                            window_open = false,
                            window_scale = 1
                        },
                        Widget_Gyro = {
                            window_tittle = "GYRO",
                            window_pos = {x=1671, y=68},
                            window_open = false,
                            window_scale = 1
                        },
                        Widget_FuelTanks = {
                            window_tittle = "FUEL",
                            window_pos = {x=500, y=500},
                            window_open = false,
                            window_scale = 1
                        },
                        Widget_Info = {
                            window_tittle = "INFO",
                            window_pos = {x=500, y=500},
                            window_open = false,
                            window_scale = 1
                        },
                        Widget_Map = {
                            window_tittle = "MAP",
                            window_pos = {x=10, y=0},
                            window_open = false,
                            window_scale = 2.5,
                            atmo_map_scale = {name = "MAP SCALE", value = "2.5", range = {"1","1.5","2","2.5","3","3.5","4","4.5","5"}}
                        },
                        help_menu = {
                            window_tittle = "HELP",
                            window_pos = {x=720, y=580},
                            window_open = false,
                            window_html = "INSTRUCTION MANUAL",
                            [1] = 'separator',
                            [2] = 'Info_Page',
                            [3] = 'separator',
                            [4] = 'separator',
                            [5] = 'Menu_Settings',
                            [6] = 'separator',
                            [7] = 'Engines_Settings',
                            [8] = 'separator',
                            [9] = 'AutoPilot_Settings',
                            [10] = 'separator',
                            [11] = 'Widgets_Settings',
                            [12] = 'separator',
                            [13] = 'KeyBind_Params',
                            [14] = 'separator',
                            [15] = 'QuickToolBar',
                            [16] = 'separator',
                            [17] = 'separator',
                            Info_Page = {name = "INSTRUCTION MANUAL", html = ""},
                            Menu_Settings = {name = "MENU SETTINGS", html = ""},
                            Engines_Settings = {name = "ENGINES SETTINGS", html = ""},
                            AutoPilot_Settings = {name = "AUTOPILOT SETTINGS", html = ""},
                            Widgets_Settings = {name = "WIDGET SETTINGS", html = ""},
                            KeyBind_Params = {name = "KEYBIND PARAMS", html = ""},
                            QuickToolBar = {name = "QUICK TOOL BAR", html = ""}
                        },
                        Travel_Planner = {
                            window_tittle = "TRAVEL PLANNER",
                            window_pos = {x=10, y=10},
                            window_open = false,
                            
                            Destination = {name = "DESTINATION", value = nil},
                            selected = {name = "n/a", dist = 0, warp = false, pos = {0,0,0}},
                            lockedDestination = {name = "LOCKED DESTINATION", value = nil},
                            warp = {},
                            pageNum = 1
                        }
                    }

                script = {}
                script = {
                    version = 3.63,
                    start = function()
                        system.print("Script initialisation started")
                        onStartParams()
                        system.print("On start params loaded")
                        getGlobals()
                        system.print("Globals loaded")
                        system.print("Closest planet: "..Helios[closestPlanetIndex].name[1])
                        script.onTickData()
                        setParamsFuelTanks()
                        system.print("Fuel tanks loaded: "..#fuelTanksData)
                        loadParamsFromDB()
                        --params.Widgets_Settings.widget_radar_entries.value = 100
                        previousPreset = params.Menu_Settings.PRESET.value
                        loadColorPreset()
                        updateHelpMenu()
                        system.print("Help menu updated")
                        paramsSetColorsRange()
                        system.print("Color range updated")
                        WindowLib:winlibCSSUpdate()
                        system.print("Winlibcss updated")
                        if params.window_open == true then windowsShow() else windowsHide() end
                        system.print("Widgets display updated")
                        WindowLib:update()
                        system.print("Winlib updated")
                        updateParams()
                        system.print("Params updated")
                        if params.Engines_Settings.engines.value == "ON" then enginesToggle() end
                        system.print("Script initialisation successfull")
                        hasFinishedLoading = true
                        helpMenuHTML.print(system)
                        unit.setTimer("DATA",0.5)
                        unit.setTimer("SCREEN",params.Widgets_Settings.widget_refresh.value)
                        unit.setTimer("FPS",1)
                        unit.setTimer("BACKUP",30)
                    end,

                    stop = function()
                        system.print("Saving parameters into Databank")
                        if reset == false and hasFinishedLoading == true then
                            setParams2DB()
                            for i, widget in ipairs(customWidgets) do
                                if type(customWidgets[i].saveData) == 'function' and DB_1 ~= nil then
                                    customWidgets[i]:saveData()
                                end
                            end
                        end
                        reset = false
                        windowsHide()
                        system.showScreen(0)
                        if #switch ~= 0 then switch_1.deactivate() end
                    end,

                    update = function()
                        if ALT == false and params.window_open == false and params.Travel_Planner.window_open == false and params.QuickToolBar.window_open == false and Engines == true then
                            Nav:throttleUpdate()
                        end
                        if ALT == true or params.window_open == true or params.Travel_Planner.window_open == true or params.QuickToolBar.window_open == true then WindowLib:update() end
                        if WindowLib.wlib_drag == true then WindowLib:performDrag() end
                        
                        if params.KeyBind_Params.mouseControl.value == true and params.window_open == false and ALT == false and params.Travel_Planner.window_open == false then
                            mouseControlUpdate()
                        end
                        if params.window_open == true or params.Travel_Planner.window_open == true or params.QuickToolBar.window_open == true then
                            system.lockView(1)
                        elseif params.KeyBind_Params.mouseControl.value == true and ALT == true then
                            system.lockView(0)
                        end
                        currentTime = system.getArkTime()
                        uCount = uCount + 1
                    end,

                    onTickData = function()
                        local ind = 1
                        local function decodeJSON(json)
                            local decodedInput = string.gsub(json, "%\\u(%x%x%x%x)", function(a) return utf8.char(tonumber(a,16))end)
                            return load('return ' .. decodedInput:gsub('[[]', '{'):gsub('[]]', '}'):gsub('"(%w+)":', '["%1"]='))()
                        end
                        getGlobals()
                        fuelTanksData = {}
                        if fueltanks then
                            for i , v in ipairs(fueltanks) do
                                fuelTanksData[i] = {}
                                local decodeFT = decodeJSON(v.getWidgetData())
                                fuelTanksData[i].name = decodeFT.name or "LOADING"
                                fuelTanksData[i].percentage = decodeFT.percentage or 0.01
                                fuelTanksData[i].timeLeft = decodeFT.timeLeft ~= "n/a" and decodeFT.timeLeft or 0.01
                            end
                        end
                        if DB_1 ~= nil and DB_1.getStringValue("fueltanks") and DB_1.getStringValue("fueltanks") ~= "" then
                            local function merge(t1, t2)
                                if type(t1) ~= "table" or type(t2)~= "table" then return nil end
                                local newT = t1
                                for k,v in pairs(t2) do
                                    newT[ind] = v
                                    ind = ind + 1
                                end 
                                return newT
                            end
                            fuelTanksData = merge(fuelTanksData,Data:deserialize(DB_1.getStringValue("fueltanks"))) or fuelTanksData
                        end
                        local ftdl = #fuelTanksData
                        if ftdl ~= 0 then table.sort(fuelTanksData, function(a,b) return a.name < b.name end) end
                        if prevFTD ~= ftdl and ftdl ~= 0 then
                            setParamsFuelTanks()
                        end
                        prevFTD = ftdl
                        local decodeCU = decodeJSON(unit.getWidgetData())
                        unitData.acceleration = decodeCU.acceleration or 0
                        unitData.maxBrake = construct.getMaxBrake()
                        unitData.currentBrake = construct.getCurrentBrake()
                        unitData.atmoThrust = decodeCU.atmoThrust or 0
                        unitData.spaceThrust = decodeCU.spaceThrust or 0
                        unitData.unitOverLoad = decodeCU.showOverload or 0
                        local gMS = construct.getMaxSpeedPerAxis()
                        unitData.maxSpeedMPS = math.max(gMS[1],math.abs(gMS[2]),gMS[3],math.abs(gMS[4]),gMS[5],math.abs(gMS[6]))
                        unitData.maxSpeedkph = unitData.maxSpeedMPS * 3.6
                        Nav:updateMaxSpeed(unitData.maxSpeedkph)
                        if antigrav then
                            local decodeAGG = decodeJSON(antigrav.getWidgetData())
                            aggData.Power = decodeAGG.antiGPower ~= nil and (math.floor(decodeAGG["antiGPower"]*100).."/100") or "LOADING"
                            aggData.Field = decodeAGG.antiGravityField ~= nil and math.floor(decodeAGG["antiGravityField"]*100).."Es" or "LOADING"
                            aggData.Altitude = decodeAGG.baseAltitude ~= nil and decodeAGG.baseAltitude or "LOADING"
                            aggData.State = antigrav.isActive() == true and "ON" or "OFF"
                        end
                        if warpdrive then
                            local decodeW = decodeJSON(warpdrive.getWidgetData())
                            warpData.Info = decodeW.buttonMsg or "LOADING"
                            warpData.Cells = decodeW.cellCount or 0
                            warpData.Destination = decodeW.destination or "LOADING"
                            warpData.Distance = decodeW.distance or "LOADING"
                        end
                        local dockingmode = 1
                        if params.AutoPilot_Settings.docking.value == "CLOSEST" then dockingmode = 2 elseif params.AutoPilot_Settings.docking.value == "OWNER" then dockingmode = 3 end
                        if construct.getDockingMode() ~= dockingmode then construct.setDockingMode(dockingmode) end
                    end,

                    onTickScreen = function()
                        if ALT == false and params.window_open == false and params.Travel_Planner.window_open == false and params.QuickToolBar.window_open == false then WindowLib:update() end
                    end,

                    onTickRadar = function()
                        if #radar ~= 0 then
                            local rdr = radar_1 ~= nil and radar_1.getOperationalState() == 1 and radar_1 or radar_2 ~= nil and radar_2.getOperationalState() == 1 and radar_2 or nil
                            if rdr ~= nil then
                                local concat = table.concat
                                local matchElementId = ""
                                --nS, nD, nT, nA, nW, nTH, nAs = 0, 0, 0, 0, 0, 0, 0

                                local function sortRadarData()
                                    local getData = rdr.getWidgetData()
                                    local matchID = getData:gmatch('({"constructId":".-%b{}.-})')
                                    matchElementId = '],'.. getData:match('"elementId":".+')
                                    for S in matchID do
                                        loopEnd = true
                                        radarCounter = radarCounter + 1
                                        if radarCounter > params.Widgets_Settings.widget_radar_entries.value then
                                            break
                                        elseif radarCounter > 50*radarLoop then
                                            radarLoop = radarLoop + 1
                                            loopEnd = false
                                            break
                                        end

                                        if radarCounter < 50*radarLoop and radarCounter >= 50*(radarLoop-1) then
                                            local matchCId = S:match('"constructId":"([%d%.]*)"')
                                            local cKind = rdr.getConstructKind(matchCId)
                                            
                                            if #staticRadarData ~= 0 and ((params.Widgets_Settings.widget_radar_statics.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_statics.value == "ALT" and ALT == true)) and (cKind == 4 or cKind == 6 or cKind == 7 )then
                                                nS = nS+1
                                                if nS - 1 > 0 then outS[nS] = ',' .. S else outS[1] = '{"constructsList":[' .. S end
                                            end

                                            if #dynamicRadarData ~= 0 and ((params.Widgets_Settings.widget_radar_dynamics.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_dynamics.value == "ALT" and ALT == true)) and cKind == 5 then
                                                nD = nD+1
                                                if nD - 1 > 0 then outD[nD] = ',' .. S else outD[1] = '{"constructsList":[' .. S end
                                            end

                                            if #transponderRadarData ~= 0 and ((params.Widgets_Settings.widget_radar_transponder.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_transponder.value == "ALT" and ALT == true)) and cKind == 5 and rdr.hasMatchingTransponder(matchCId) == 1 then
                                                nT = nT+1
                                                if nT - 1 > 0 then outT[nT] = ',' .. S else outT[1] = '{"constructsList":[' .. S end
                                            end

                                            if #armedRadarData ~= 0 and ((params.Widgets_Settings.widget_radar_armed.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_armed.value == "ALT" and ALT == true)) and rdr.getConstructInfos(matchCId).weapons > 0 then
                                                nA = nA+1
                                                if nA - 1 > 0 then outA[nA] = ',' .. S else outA[1] = '{"constructsList":[' .. S end
                                            end

                                            if #wreckRadarData ~= 0 and ((params.Widgets_Settings.widget_radar_wrecks.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_wrecks.value == "ALT" and ALT == true)) and rdr.isConstructAbandoned(matchCId) == 1 then
                                                nW = nW+1
                                                if nW - 1 > 0 then outW[nW] = ',' .. S else outW[1] = '{"constructsList":[' .. S end
                                            end

                                            if #threatRadarData ~= 0 and ((params.Widgets_Settings.widget_radar_threat.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_threat.value == "ALT" and ALT == true)) and rdr.getThreatRateFrom(matchCId) ~= 1 then
                                                nTh = nTh+1
                                                if nTh - 1 > 0 then outTh[nTh] = ',' .. S else outTh[1] = '{"constructsList":[' .. S end
                                            end

                                            if ((params.Widgets_Settings.widget_radar_asteroid.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_asteroid.value == "ALT" and ALT == true)) and cKind == 3 then
                                                nAs = nAs+1
                                                if nAs - 1 > 0 then outAs[nAs] = ',' .. S else outAs[1] = '{"constructsList":[' .. S end
                                            end
                                        end
                                    end
                                end

                                sortRadarData()
                                if loopEnd == true then
                                    if nS ~= 0 and ((params.Widgets_Settings.widget_radar_statics.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_statics.value == "ALT" and ALT == true))then
                                        if #staticRadarData ~= 0 and staticRadarData[1].getWidgetDataId() ~= nil then
                                            nS = nS+1
                                            outS[nS] = matchElementId
                                            system.updateData(staticRadarData[1].getWidgetDataId(), concat(outS))
                                        end
                                    end

                                    if nD ~= 0 and ((params.Widgets_Settings.widget_radar_dynamics.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_dynamics.value == "ALT" and ALT == true))then
                                        if #dynamicRadarData ~= 0 and dynamicRadarData[1].getWidgetDataId() ~= nil then
                                            nD = nD+1
                                            outD[nD] = matchElementId
                                            system.updateData(dynamicRadarData[1].getWidgetDataId(), concat(outD))
                                        end
                                    end

                                    if nT ~= 0 and ((params.Widgets_Settings.widget_radar_transponder.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_transponder.value == "ALT" and ALT == true))then
                                        if #transponderRadarData ~= 0 and transponderRadarData[1].getWidgetDataId() ~= nil then
                                            nT = nT+1
                                            outT[nT] = matchElementId
                                            system.updateData(transponderRadarData[1].getWidgetDataId(), concat(outT))
                                        end
                                    end

                                    if nA ~= 0 and ((params.Widgets_Settings.widget_radar_armed.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_armed.value == "ALT" and ALT == true))then
                                        if #armedRadarData ~= 0 and armedRadarData[1].getWidgetDataId() ~= nil then
                                            nA = nA+1
                                            outA[nA] = matchElementId
                                            system.updateData(armedRadarData[1].getWidgetDataId(), concat(outA))
                                        end
                                    end

                                    if nW ~= 0 and ((params.Widgets_Settings.widget_radar_wrecks.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_wrecks.value == "ALT" and ALT == true))then
                                        if #wreckRadarData ~= 0 and wreckRadarData[1].getWidgetDataId() ~= nil then
                                            nW = nW+1
                                            outW[nW] = matchElementId
                                            system.updateData(wreckRadarData[1].getWidgetDataId(), concat(outW))
                                        end
                                    end

                                    if nTh ~= 0 and ((params.Widgets_Settings.widget_radar_threat.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_threat.value == "ALT" and ALT == true))then
                                        if #threatRadarData ~= 0 and threatRadarData[1].getWidgetDataId() ~= nil then
                                            nTh = nTh+1
                                            outTh[nTh] = matchElementId
                                            system.updateData(threatRadarData[1].getWidgetDataId(), concat(outTh))
                                        end
                                    end

                                    if nAs ~= 0 and ((params.Widgets_Settings.widget_radar_asteroid.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_asteroid.value == "ALT" and ALT == true))then
                                        if #asteroidRadarData ~= 0 and asteroidRadarData[1].getWidgetDataId() ~= nil then
                                            nAs = nAs+1
                                            outAs[nAs] = matchElementId
                                            system.updateData(asteroidRadarData[1].getWidgetDataId(), concat(outAs))
                                        end
                                    end
                                    radarCounter = 0
                                    radarLoop = 1
                                    outS, outD, outT, outA, outW, outTh, outAs = {}, {}, {}, {}, {}, {}, {}
                                    nS, nD, nT, nA, nW, nTH, nAs = 0, 0, 0, 0, 0, 0, 0
                                end
                            end
                        end
                    end,

                    luaInput = function(text)
                        if text:lower() == "reset all" then
                            if #DB ~= 0 then
                                Data:ResetAll()
                                system.print("Databank has been reseted, please log off the piloting chair for it to take effect") 
                                reset = true 
                                unit.exit()
                            else
                                system.print("No DB Detected, Attach Databank and re-load flight script.")
                            end
                        elseif text:lower() == "reset player" then
                            if #DB ~= 0 then
                                Data:clearKey(tostring(player.getId()))
                                system.print("Player: "..system.getPlayerName(player.getId()).."'s data has been reseted") 
                                reset = true
                                unit.exit()
                            end
                        end

                        if string.sub(text,1,6) == "::pos{" then
                            local px, py, pz = convertToWorldCoordinates(text)
                            system.print(px.." : "..py.." : "..pz)
                            params.Travel_Planner.Destination.value = {convertToWorldCoordinates(text)}
                        end

                        if text:lower() == "help" then helpMenuHTML.print(system) end

                        if string.sub(text:lower(),1,8) == "align to" then
                            system.print(string.sub(text,10,-1))
                            if string.sub(text,10,15) == "::pos{" then
                                system.print("::pos{} loaded")
                                params.Travel_Planner.Destination.value = {convertToWorldCoordinates(string.sub(text,10,-1))}
                                system.print("::pos converted to world pos: "..tostring(vec3(params.Travel_Planner.Destination.value)))
                                params.Travel_Planner.lockedDestination.value = params.Travel_Planner.Destination.value
                                system.setWaypoint(string.sub(text,10,-1))
                            else system.print('Command is: align to "coordinate"')
                                 system.print('coordinate in ::pos{system,planet,x,y,z}')
                            end
                        end

                        if string.sub(text:lower(),1,13) == "add asteroids" then
                            local stt = stringToTable(string.sub(text,15,-1),";")
                            for i, v in ipairs(stt) do
                                asteroids[#asteroids+1] = v
                            end
                            system.print("Added asteroids: "..#stt)
                        end
                        if text:lower() == "clear asteroids" then
                            asteroids = {}
                            system.print("Asteroids list cleared")
                        end

                        for i, widget in ipairs(customWidgets) do
                            if type(customWidgets[i].onInputText) == 'function' then
                                customWidgets[i]:onInputText(text)
                            end
                        end
                    end,

                    receive = function(channel,message)
                    end,

                    onActionStart = function(action)
                        keyBindsOnStartControl(action)
                    end,

                    onActionStop = function(action)
                        keyBindsOnStopControl(action)
                    end,

                    onActionLoop = function(action)
                        keyBindsOnLoopControl(action)
                    end,
                }
                script.start()

        onStop:
            lua: |
                script.stop()

        onTimer:
            args: ["DATA"]
            lua: |
                script.onTickData()

        onTimer:
            args: ["SCREEN"]
            lua: |
                script.onTickScreen()
 
        onTimer:
            args: ["RADAR"]
            lua: |
                script.onTickRadar()

        onTimer:
            args: ["FPS"]
            lua: |
                fps = uCount
                uCount = 0

        onTimer:
            args: ["BACKUP"]
            lua: |
                if reset == false and hasFinishedLoading == true then setParams2DB() end
                for i, widget in ipairs(customWidgets) do
                    if type(customWidgets[i].saveData) == 'function' and DB_1 ~= nil then
                        customWidgets[i]:saveData()
                    end
                end

    system:
        onUpdate:
            lua: |
                script.update()
        onFlush:
            lua: |
                thrustManager()
                
        onActionStart(action):
            lua: |
                script.onActionStart(action)
                
        onActionStop(action):
            lua: |
                script.onActionStop(action)
               
        onActionLoop(action):
            lua: |
                script.onActionLoop(action)
                
        onInputText(text):
            lua: |
                script.luaInput(text)
                
        onActionStart:
            args: [booster]
            lua: |
                unit.setEngineThrust('rocket_engine',1)
                system.print("boosters on")
                if Nav:getMasterMode() == "CRUISE" then
                    PreviousMasterMode = "CRUISE"
                    Nav:setMasterMode("TRAVEL")
                end
                boosterInput = 1
                Nav:setThrottleValue(1)
                
        onActionStop:
            args: [booster]
            lua: |
                boosterInput = 0
                unit.setEngineThrust('rocket_engine',0)
                if PreviousMasterMode == "CRUISE" then Nav:setMasterMode("CRUISE") end
                system.print("boosters off")
                
        onActionLoop:
            args: [booster]
            lua: |
                if xyzSpeedKPH > params.AutoPilot_Settings.rocketMaxSpeed.value and inspace == 0 and boosterInput == 1 then
                    unit.setEngineThrust('rocket_engine',0)
                    if PreviousMasterMode == "CRUISE" then Nav:setMasterMode("CRUISE") end
                    boosterInput = 0
                    system.print("boosters off")
                end


    library:
        onStart:
            lua: |
                ----------------------------------------------------------------
                --                    CUSTOM WINDOWS                          --
                ----------------------------------------------------------------
                windowWidth = 300
                tittleHeight = 25
                buttonWidth = 200
                buttonHeight = 25
                buttonGape = 5

                local TABLE = {}
                TABLE = {
                    index = function (t,val)
                        for i,v in ipairs(t) do
                            if v == val then 
                                return i
                            end
                        end
                        return nil
                    end,

                    valUp = function (t,val)
                        local index = TABLE.index(t,val)
                        local newVal 
                        if index == nil then
                            newVal = t[1]
                        elseif t[index+1] == nil then
                            newVal = t[1]
                        else
                            newVal = t[index+1]
                        end
                        return newVal
                    end,

                    valDown = function (t,val)
                        local index = TABLE.index(t,val)
                        local newVal
                        if index == nil then
                            newVal = t[1]
                        elseif t[index-1] == nil then
                            newVal = t[#t]
                        else
                            newVal = t[index-1]
                        end
                        return newVal
                    end,
                }

                function Save_Window_Pos(name,posX,posY)
                    for i, v in ipairs(params) do
                        if params.window_tittle == name then
                            params.window_pos.x = posX
                            params.window_pos.y = posY
                            return
                        else
                            for k, l in ipairs(params[v]) do
                                if params[v].window_tittle == name then
                                    params[v].window_pos.x = posX
                                    params[v].window_pos.y = posY
                                    return
                                end
                            end
                        end
                    end
                    if name == params.help_menu.window_tittle then 
                        params.help_menu.window_pos.x = posX
                        params.help_menu.window_pos.y = posY
                        return
                    elseif name == params.QuickToolBar.window_tittle then 
                        params.QuickToolBar.window_pos.x = posX
                        params.QuickToolBar.window_pos.y = posY
                        return
                    elseif name == params.Travel_Planner.window_tittle then
                        params.Travel_Planner.window_pos.x = posX
                        params.Travel_Planner.window_pos.y = posY
                        return
                    end
                    
                    for i, v in pairs(params) do
                        if string.sub (tostring(i),1,7) == "Widget_" and params[i].window_tittle == name then
                            params[i].window_pos.x = posX
                            params[i].window_pos.y = posY
                            return
                        end
                    end
                end

                SubMenusButtonsClickFunction = function(v, l)
                    return function()
                        local tv = type(params[v][l].value)
                        if CTRL == false then
                            if mouseWheel == 0 then
                                if tv == "number" then  -- Set buttons functions
                                    params[v][l].increment = TABLE.valUp(params[v][l].incrementRange, params[v][l].increment)
                                elseif tv == "string" then
                                    params[v][l].value = TABLE.valUp(params[v][l].range, params[v][l].value)
                                elseif tv == "boolean" then
                                    params[v][l].value = not params[v][l].value
                                elseif tv == "function" then
                                    params[v][l].value()
                                end
                            elseif mouseWheel > 0 then
                                if tv == "number" then
                                    params[v][l].value = params[v][l].value + params[v][l].increment
                                    params[v][l].value = utils.clamp(params[v][l].value,params[v][l].range[1],params[v][l].range[2])
                                    if math.abs(params[v][l].value) < 0.0009 then params[v][l].value = 0 end
                                elseif tv == "string" then
                                    params[v][l].value = TABLE.valUp(params[v][l].range, params[v][l].value)
                                elseif tv == "boolean" then
                                    params[v][l].value = not params[v][l].value
                                end
                            elseif mouseWheel < 0 then
                                if tv == "number" then
                                    params[v][l].value = params[v][l].value - params[v][l].increment
                                    params[v][l].value = utils.clamp(params[v][l].value,params[v][l].range[1],params[v][l].range[2])
                                    if math.abs(params[v][l].value) < 0.0009 then params[v][l].value = 0 end
                                elseif tv == "string" then
                                    params[v][l].value = TABLE.valDown(params[v][l].range, params[v][l].value)
                                elseif tv == "boolean" then
                                    params[v][l].value = not params[v][l].value
                                end
                            end
                        else
                            if params.window_open == true then
                                params[v][l].quickToolBar = not params[v][l].quickToolBar
                            end
                        end
                        updateParams()
                        if v == "Menu_Settings" then WindowLib:winlibCSSUpdate() end
                        if params.QuickToolBar.window_open == true then checkWidgets() end
                        windowsShow()
                    end
                end

                function Cursor_Builder()
                    if params.window_open == true or params.QuickToolBar.window_open == true or params.Travel_Planner.window_open == true then
                        local cursorPos = vec2(WindowLib:getMousePos())
                        local window = WindowLib:new(
                            [[<div style='background:rgba(0, 0, 0, 0)'>
                            <svg height="50" width="50">
                            <polygon points="0,0 25,22.5 10,20 5,32.5" 
                            stroke="lightsteelblue" stroke-width="1.5" fill="white"/>
                            </svg></div>
                            ]],{class = "widgets", name = "cursor", width = 50, height = 50, posX = cursorPos.x, posY = cursorPos.y, fixed = false, draggable = false, alwaysOnTop = true})
                    end
                end

                function Quick_Menu_Builder()
                    if params.window_open == false and ALT == true and params.Travel_Planner.window_open == false then
                    system.showHelper(0)
                        local svg = [[<style>
                        .button {fill:]]..params.Menu_Settings.WINDOW_TEXT_COLOR.value..[[; font-size:12px; text-anchor:end; font-family:Play; alignment-baseline:middle}
                        </style>]]
                        local buttons = {}
                        local ind = 0
                        -- Creating favorit buttons
                        for i, v in ipairs(params) do
                            for k, l in ipairs(params[v]) do
                                if l ~= "separator" then
                                    if params[v][l].quickToolBar == true then
                                        local increment = ""
                                        if params[v][l].increment ~= nil then increment = "  (+-"..tostring(params[v][l].increment)..")" end
                                        if type(params[v][l].value) ~= "function" then
                                            svg = svg .. [["<text class="button" x="290" y="]].. 15 + ind * (buttonHeight + buttonGape) ..[[" >]]..string.sub (tostring(params[v][l].value),1,10):upper()..increment..[[</text>"]]
                                        end
                                        local nb = WindowLib:buttonsNew(params[v][l].name, SubMenusButtonsClickFunction(v,l), {width = buttonWidth, height = buttonHeight, posX = 5, posY = (tittleHeight + 5 + ind * (buttonHeight + buttonGape))})
                                        ind = ind + 1
                                        buttons[ind] = nb
                                    end
                                end
                            end
                        end
                        -- Creating the window t1
                        if ind > 0 then
                            local window = WindowLib:new(
                                [[<div style='background:rgba(0, 0, 0, 0); text-align:middle; vertical-align: text-top'>
                                <svg height="5000" width="500">
                                ]]..svg..[[
                                </svg></div>
                                ]],
                                {name = params.QuickToolBar.window_tittle, title = params.QuickToolBar.window_tittle, width = windowWidth, height = (tittleHeight + ind*(buttonHeight+buttonGape)+buttonGape), posX = params.QuickToolBar.window_pos.x, posY = params.QuickToolBar.window_pos.y, fixed = false, draggable = true, alwaysOnTop = false},buttons)
                        end
                    end
                end

                function Params_Menu_Builder()
                    if params.window_open == true and params.Travel_Planner.window_open == false then
                        system.showHelper(0)
                        local mainMenuButtons = {}
                        local buttonClickFunction = nil
                        local indMMB = 0
                        local ind = 0
                        --ComposeQuickToolMenu()
                        for i, v in ipairs(params) do
                            ind = 0
                            local svg = [[<style>
                            .button {fill:]]..params.Menu_Settings.WINDOW_TEXT_COLOR.value..[[; font-size:12px; text-anchor:end; font-family:Play; alignment-baseline:middle}
                            </style>]]
                            local buttons = {}
                            --Building the main menu bar buttons
                            if params[v] ~= params.QuickToolBar then
                                buttonClickFunction = function()
                                    params[v].window_open = not params[v].window_open
                                    WindowLib = WindowLibPlusPlus.init(system)
                                    Params_Menu_Builder()
                                    Help_Menu_Builder()
                                    Cursor_Builder()
                                end
                                local mmb = WindowLib:buttonsNew(params[v].window_tittle, buttonClickFunction, {width = 300, height = buttonHeight, posX = (5 + indMMB * (300 + buttonGape)), posY = 5})
                                indMMB = indMMB + 1
                                mainMenuButtons[indMMB] = mmb
                            end
                            --Building the windows buttons
                            for k, l in ipairs(params[v]) do
                                local increment = ""
                                local QTBtag = ""
                                if params[v].window_open == true then
                                    if l ~= "separator" then
                                        if params[v][l].increment ~= nil then increment = "  (+-"..tostring(params[v][l].increment)..")" end
                                        if params[v][l].quickToolBar == true then QTBtag = "*" end
                                        local nb = WindowLib:buttonsNew(params[v][l].name..QTBtag, SubMenusButtonsClickFunction(v,l), {width = buttonWidth, height = buttonHeight, posX = 5, posY = (tittleHeight + 5 + (k-1) * (buttonHeight + buttonGape))})
                                        ind = ind + 1
                                        buttons[ind] = nb
                                        if type(params[v][l].value) ~= "function" then
                                            svg = svg .. [["<text class="button" x="290" y="]].. 15 + (k-1) * (buttonHeight + buttonGape) ..[[" >]]..string.sub (tostring(params[v][l].value),1,10):upper()..increment..[[</text>"]]
                                        end
                                    else
                                        local nb = WindowLib:buttonsNew("", nil, {class= "separator", width = 0, height = 0, posX = 0, posY = (tittleHeight + 5 + (k-1) * (buttonHeight + buttonGape))})
                                        ind = ind + 1
                                        buttons[ind] = nb
                                        svg = svg .. [["<line x1="5" y1="]].. 12 + (k-1) * (buttonHeight + buttonGape) ..[[" x2="]]..windowWidth - 10 ..[[" y2="]].. 12 + (k-1) * (buttonHeight + buttonGape) ..[[" stroke="]]..params.Menu_Settings.BUTTON_BORDER_COLOR.value..[[" fill="None" stroke-width="0.5"/>"]]
                                    end
                                end
                            end
                            
                            -- Creating the sub menu window
                            if ind > 0 and v ~= params.QuickToolBar then
                                local ww = windowWidth
                                local wclass = nil
                                local whtml = ""
                                local window = WindowLib:new(
                                [[<div><svg height="1080" width="1920">
                                ]]..svg..whtml..[[
                                </svg></div>
                                ]],
                                {name = params[v].window_tittle, title = params[v].window_tittle, width = ww, height = (tittleHeight + ind *(buttonHeight+buttonGape)+buttonGape), posX = params[v].window_pos.x, posY = params[v].window_pos.y, draggable = true},buttons)
                            end
                        end
                        
                        -- Creating the main menu bar window
                        local window = WindowLib:new(
                                [[<div><svg height="1080" width="3840">
                                <text x="1830" y="17" font-size="16" font-family="Play" text-anchor="start" fill="]]..params.Menu_Settings.BUTTON_TEXT_COLOR.value..[[">DEFAULT++ TECHNOLOGY 2016-2023 v]]..script.version..[[ - ALL RIGHTS RESERVED</text>
                                </svg></div>
                                ]],{name = params.window_tittle, width = 3840, height = buttonHeight + buttonGape , posX = params.window_pos.x, posY = params.window_pos.y, draggable = false},mainMenuButtons)
                    end
                end

                function Help_Menu_Builder()
                    if params.window_open == true and params.help_menu.window_open == true then
                        local buttons = {}
                        local svg = ""
                        local ind = 0
                        for i, v in ipairs(params.help_menu) do
                            if v ~= "separator" then
                                local help_button_function = function(v)
                                    return function()
                                            params.help_menu.window_html = params.help_menu[v].html
                                            WindowLib = WindowLibPlusPlus.init(system)
                                            Params_Menu_Builder()
                                            Help_Menu_Builder()
                                            Cursor_Builder()
                                            end
                                end
                                local nb = WindowLib:buttonsNew(params.help_menu[v].name, help_button_function(v), {width = buttonWidth, height = buttonHeight, posX = 5, posY = (tittleHeight + 5 + (i-1) * (buttonHeight + buttonGape))})
                                ind = ind + 1
                                buttons[ind] = nb
                            else
                                local nb = WindowLib:buttonsNew("", nil, {class= "separator", width = 0, height = 0, posX = 0, posY = (tittleHeight + 5 + (i-1) * (buttonHeight + buttonGape))})
                                ind = ind + 1
                                buttons[ind] = nb
                                svg = svg .. [["<line x1="5" y1="]].. 12 + (i-1) * (buttonHeight + buttonGape) ..[[" x2="]]..buttonWidth - 5 ..[[" y2="]].. 12 + (i-1) * (buttonHeight + buttonGape) ..[[" stroke="]]..params.Menu_Settings.BUTTON_BORDER_COLOR.value..[[" fill="None" stroke-width="0.5"/>"]]
                            end
                        end
                        local ww = 800
                        local whtml = params.help_menu.window_html
                        local window = WindowLib:new(
                        [[<div><svg height="1080" width="1920">
                        ]]..svg..whtml..[[
                        </svg></div>
                        ]],
                        {name = params.help_menu.window_tittle, title = params.help_menu.window_tittle, width = ww, height = (tittleHeight + ind *(buttonHeight+buttonGape)+buttonGape), posX = params.help_menu.window_pos.x, posY = params.help_menu.window_pos.y, draggable = true},buttons)
                    end
                end

                function Widgets_Builder()
                    if params.window_open == false and params.Travel_Planner.window_open == false then
                        for i, v in ipairs(customWidgets) do
                            if params["Widget_Custom"..i].window_open == true then
                                local svg = customWidgets[i]:SVG_Update()
                                local bt = customWidgets[i]:getButtons() --local bt = customWidgets[i].buttons
                                local nbt = {}
                                for i2, v2 in ipairs(bt) do
                                    nbt[i2] = WindowLib:buttonsNew(v2[1], v2[2], v2[3])
                                end
                                if #nbt == 0 then nbt = nil end
                                local draggable = true
                                if customWidgets[i].draggable == 0 then draggable = false end
                                local window = WindowLib:new(svg,
                                                                    {class = customWidgets[i].class,
                                                                    name = params["Widget_Custom"..i].window_tittle,
                                                                    title = customWidgets[i]:getTittle(),
                                                                    width = params["Widget_Custom"..i].window_size.x*params["Widget_Custom"..i].window_scale, 
                                                                    height = params["Widget_Custom"..i].window_size.y*params["Widget_Custom"..i].window_scale, 
                                                                    posX = params["Widget_Custom"..i].window_pos.x, 
                                                                    posY = params["Widget_Custom"..i].window_pos.y, 
                                                                    draggable = customWidgets[i].draggable,
                                                                    fixed = customWidgets[i].fixed},
                                                                    nbt)
                            end
                        end

                        if params.Widget_Map.window_open == true then
                            local svg = widget:Map_Update()
                            local bf = function()
                                    if mouseWheel > 0 then
                                        params.Widget_Map.atmo_map_scale.value = TABLE.valUp(params.Widget_Map.atmo_map_scale.range, params.Widget_Map.atmo_map_scale.value)
                                        system.print("Map scale: "..params.Widget_Map.atmo_map_scale.value)
                                    elseif mouseWheel < 0 then
                                        params.Widget_Map.atmo_map_scale.value = TABLE.valDown(params.Widget_Map.atmo_map_scale.range, params.Widget_Map.atmo_map_scale.value)
                                        system.print("Map scale: "..params.Widget_Map.atmo_map_scale.value)
                                    end
                            end
                            local nb = WindowLib:buttonsNew("", bf, {class= "separator", width = 75*params.Widget_Map.window_scale, height = 17*params.Widget_Map.window_scale, posX = 1, posY = 1})
                            local window = WindowLib:new(svg,{class = "widgets", name = params.Widget_Map.window_tittle, width = 280*params.Widget_Map.window_scale, height = 280*params.Widget_Map.window_scale, posX = params.Widget_Map.window_pos.x, posY = params.Widget_Map.window_pos.y, draggable = true},{nb})
                        end

                        if params.Widget_Speedo.window_open == true then
                            local svg = widget:Speedometer_Update()
                            local window = WindowLib:new(svg,{class = "widgets", name = params.Widget_Speedo.window_tittle, width = 280*params.Widget_Speedo.window_scale, height = 280*params.Widget_Speedo.window_scale, posX = params.Widget_Speedo.window_pos.x, posY = params.Widget_Speedo.window_pos.y, draggable = true})
                        end

                        if params.Widget_Gyro.window_open == true then
                            local svg = widget:Gyroscope_Update()
                            local window = WindowLib:new(svg,{class = "widgets", name = params.Widget_Gyro.window_tittle, width = 280*params.Widget_Gyro.window_scale, height = 280*params.Widget_Gyro.window_scale, posX = params.Widget_Gyro.window_pos.x, posY = params.Widget_Gyro.window_pos.y, draggable = true})
                        end

                        if params.Widget_FuelTanks.window_open == true then
                            for i, v in ipairs(fuelTanksData) do
                                local svg = widget:Fueltanks_Update(i)
                                local window = WindowLib:new(svg,{class = "widgets", name = params["Widget_FuelTank_"..i].window_tittle, width = FuelWindowSize*params["Widget_FuelTank_"..i].window_scale, height = FuelWindowSize*params["Widget_FuelTank_"..i].window_scale , posX = params["Widget_FuelTank_"..i].window_pos.x, posY = params["Widget_FuelTank_"..i].window_pos.y, draggable = true})
                            end
                        end

                        if params.Widget_Info.window_open == true then
                            local svg = widget:Info_Update()
                            local window = WindowLib:new(svg,{class = "widgetnopadding", title = "INFO", name = params.Widget_Info.window_tittle, width = 307*params.Widget_Info.window_scale, height = info_window_height*params.Widget_Info.window_scale, posX = params.Widget_Info.window_pos.x, posY = params.Widget_Info.window_pos.y, draggable = true})
                        end
                    end
                end

                function Autopilot_Builder()
                    if params.Travel_Planner.window_open == true then
                        local APW_builder = function()
                            local svg = customWidgets[2]:SVG_Update()
                            local bt = customWidgets[2].buttons
                            local nbt = {}
                            for i2, v2 in ipairs(bt) do
                                nbt[i2] = WindowLib:buttonsNew(v2[1], v2[2], v2[3])
                            end
                            if #nbt == 0 then nbt = nil end
                            local draggable = true
                            if customWidgets[2].draggable == 0 then draggable = false end
                            local window = WindowLib:new(svg,{class = customWidgets[2].class,
                                                                name = params["Widget_Custom2"].window_tittle, 
                                                                width = params["Widget_Custom2"].window_size.x*params["Widget_Custom2"].window_scale, 
                                                                height = params["Widget_Custom2"].window_size.y*params["Widget_Custom2"].window_scale, 
                                                                posX = params["Widget_Custom2"].window_pos.x, 
                                                                posY = params["Widget_Custom2"].window_pos.y, 
                                                                draggable = customWidgets[2].draggable,
                                                                fixed = customWidgets[2].fixed},
                                                                nbt)
                        end
                        APW_builder()
                        system.showHelper(0)
                        if warpdrive then warpdrive.showWidget() end
                        local svg, buttons = widget:Planner_Update()
                        local autopilot_window = WindowLib:new(svg,{class = "widgetnopadding", title = "TRAVEL PLANNER++", name = params.Travel_Planner.window_tittle, width = 1300, height = 1000, posX = params.Travel_Planner.window_pos.x, posY = params.Travel_Planner.window_pos.y, draggable = true},buttons)
                    end
                end
        onStart:
            lua: |
                ----------------------------------------------------------------
                --                    ON START PARAMS                         --
                ----------------------------------------------------------------
                function onStartParams()
                    system.print("Loading onStartParams")
                    hasFinishedLoading = false
                    system.showScreen(1)

                    info_window_height = 0
                    fps = 0
                    uCount = 0

                    cursorX = 860
                    cursorY = 440
                    cursorWin = ""
                    reset = false
                    mouseWheel = 0
                    mwCLICK = false
                    CLICK = false
                    CTRL = false
                    ALT = false
                    SHIFT = false
                    GEAR = false
                    
                    pitchInput = 0
                    rollInput = 0
                    yawInput = 0
                    brakeInput = 0
                    strafeInput = 0
                    upInput = 0
                    forwardInput = 0
                    boosterInput = 0
                    ThrottlePos = 0

                    previousDeltaY = 0
                    previousDeltaX = 0

                    xSpeedKPH = 0
                    ySpeedKPH = 0
                    zSpeedKPH = 0
                    xyzSpeedKPH = 0
                    Az = 0
                    Ax = 0
                    Ax0 = 0
                    Ay0 = 0

                    MasterMode = "CRUISE"

                    VStabPrevAlt = 0
                    VStabPrevPosx, VStabPrevPosy, VStabPrevPosz = 0, 0, 0
                    targetAutoPitchDeg = 0
                    VStabAltLock = nil
                    VStabCount = 0
                    VStabAdjustedAngle = 0
                    SAMflat = false
                    turnAssist_toggle = false
                    atmoSpeedLock = true

                    PKP = ""
                    PKPT = 999
                    DTK = ""
                    Engines = false
                    EnginesUpdate = true
                    HoverUpdate = true
                    VboosterUpdate = true

                    landPos = {0,0,0}
                    landTime = 0
                    fuelTanksData = {}
                    unitData = {}
                    aggData = {}
                    warpData = {}
                    asteroids = {}

                    lockedDestination = nil
                    warpInfo = ""
                    cWOUPx, cWOUPy, cWOUPz = 0, 0, 0 --getConstructWorldOrientationUp
                    cWOFx, cWOFy, cWOFz = 0, 0, 0 --getConstructWorldOrientationForward
                    cWORx, cWORy, cWORz = 0, 0, 0 --getConstructWorldOrientationRight
                    autoBrake = false

                    BackBurn = false
                    BackBurnToggle = false
                    VerticalBackBurnToggle = false
                    PreviousACM = nil
                    resetingBackBurn = false
                    MaxBrakesForce = 0

                    vec2 = require "cpml.vec2"
                    webColors = require "autoconf.custom.DEFAULT++V3.webColors"
                    system.print("Webcolors loaded")
                    if DB ~= nil then
                        system.print("Databank found")
                        require "autoconf.custom.DEFAULT++V3.DBmanagement"
                        system.print("Databank manager loaded")
                        Data = Databank.new(DB_1)
                        system.print("Databank new created")
                    else system.print("No Databank linked, please connect one and restart the script!") unit.exit()
                    end
                    local Atlas = require "atlas"
                    Helios = Atlas[0]
                    Atlas = nil
                    system.print("Atlas loaded")

                    helpMenuHTML = require "autoconf.custom.DEFAULT++V3.helpMenu"
                    system.print("Help menu loaded")
                    require "autoconf.custom.DEFAULT++V3.Navigator++"
                    system.print("Navigator++ loaded")
                    Nav = NavigatorPlusPlus.new(core,unit)
                    system.print("Navigator++ new created")
                    BookmarksPOI = require "autoconf.custom.DEFAULT++V3.BookmarksPOI"
                    system.print("POI bookmarks loaded")
                    BookmarksCustoms = require "autoconf.custom.DEFAULT++V3.BookmarksCustoms"
                    system.print("Custom bookmarks loaded")
                    require "autoconf.custom.DEFAULT++V3.widgets++"
                    system.print("Widgets++ loaded")
                    widget = WidgetsPlusPlus.new(core, unit, (antigrav ~= nil) and antigrav or nil, (warpdrive ~= nil) and warpdrive or nil)
                    system.print("Widgets++ new created")

                    local function pRequire(libName)
                        return xpcall( require, system.print, libName)
                    end
                    customWidgets = {}
                    
                    for i=1, 20 do
                        local fileName = "autoconf.custom.DEFAULT++V3.widget++custom"..i
                        if pRequire(fileName) ~= false then
                            require (fileName)
                            system.print("Widgets++ Custom"..i.." loaded")
                            customWidgets[i] = WidgetsPlusPlusCustom.new(core, unit, (DB ~= nil) and DB or nil, (antigrav ~= nil) and antigrav or nil, (warpdrive ~= nil) and warpdrive or nil, (shield ~= nil) and shield or nil, (switch ~= nil) and switch or nil, player, telemeter)
                            params.Widgets_Custom[i] = "widget_custom"..i
                            params.Widgets_Custom["widget_custom"..i] = {name = "CUSTOM 1", value = "None", range = {"Default ++", "ALT", "None"}, quickToolBar = false}
                            params.Widgets_Custom["widget_custom"..i].name = customWidgets[i]:getName()
                            params["Widget_Custom"..i] = {
                                window_tittle = customWidgets[i]:getName(),
                                window_pos = customWidgets[i]:getPos(),
                                window_size = customWidgets[i]:getSize(),
                                window_open = false,
                                window_scale = 1
                            }
                            --system.print(tostring(params["Widget_Custom"..i]['window_open']))
                            --system.print(tostring(params["Widget_Custom"..i]['window_scale']))
                            system.print("Widgets++ Custom"..i.." new created")
                            if type(customWidgets[i].loadData) == 'function' and DB_1 ~= nil then
                                customWidgets[i]:loadData()
                                system.print("Widgets++ Custom"..i.." data loaded")
                            end
                        else
                            break
                        end
                    end
                    system.print("Finished loading custom widgets: "..#customWidgets)

                    require "autoconf.custom.DEFAULT++V3.winlib++"
                    system.print("Winlib++ loaded")
                    WindowLib = WindowLibPlusPlus.init()
                    system.print("winlib++ new created")

                    gearExtended = (unit.isAnyLandingGearDeployed() == true)
                    if gearExtended then
                        unit.deployLandingGears()
                    else
                        unit.retractLandingGears()
                    end
                    unit.switchOnHeadlights()
                    Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)

                    local function decodeJSON(json)
                         local decodedInput = string.gsub(json, "%\\u(%x%x%x%x)", function(a) return utf8.char(tonumber(a,16))end)
                         return load('return ' .. decodedInput:gsub('[[]', '{'):gsub('[]]', '}'):gsub('"(%w+)":', '["%1"]='))()
                     end
                    local RemoteControl = false
                    local helperId = decodeJSON(unit.getWidgetData())["helperId"] if helperId == nil then helperId = "nan" end
                    local name = decodeJSON(unit.getWidgetData())["name"] if name == nil then name = "nan" end
                    system.print(tostring(helperId))
                    system.print(tostring(name))

                    if helperId == "basic_control_unit" or unit.isRemoteControlled() == true then RemoteControl = true end
                    if RemoteControl == true then
                        player.freeze(1)
                        system.print("Is remote controled")
                        params.KeyBind_Params.movementLock.value = true
                        params.KeyBind_Params.movementLock.quickToolBar = true
                    end

                    local function merge(t1, t2)
                        if type(t1) ~= "table" or type(t2)~= "table" then return nil end
                        local newT = t1
                        local ind = #t1
                        for k,v in pairs(t2) do
                            ind = ind + 1
                            newT[ind] = v
                        end 
                        return newT
                    end
                    fueltanks_size = atmofueltank_size + spacefueltank_size + rocketfueltank_size
                    fueltanks = {}
                    fueltanks = merge(fueltanks,atmofueltank) or fueltanks
                    fueltanks = merge(fueltanks,spacefueltank) or fueltanks
                    fueltanks = merge(fueltanks,rocketfueltank) or fueltanks
                    system.print("Merged fuel tanks")
                    prevFTD = 0
                end
        onStart:
            lua: |
                ----------------------------------------------------------------
                --                    Keybinds library                        --
                ----------------------------------------------------------------
                local sSS = true
                local function checkKeybinds(option)
                    system.print("Option "..option)
                    if string.sub(params.KeyBind_Params.mouseControlKB.value,-1,-1) == option then
                        system.print("Toggling mouse control")
                        params.KeyBind_Params.mouseControl.value = not params.KeyBind_Params.mouseControl.value
                    elseif string.sub(params.KeyBind_Params.movementLockKB.value,-1,-1) == option then
                        system.print("Toggling movement lock")
                        params.KeyBind_Params.movementLock.value = not params.KeyBind_Params.movementLock.value
                    elseif string.sub(params.KeyBind_Params.viewLockKB.value,-1,-1) == option then
                        system.print("Toggling view lock")
                        params.KeyBind_Params.viewLock.value = not params.KeyBind_Params.viewLock.value
                    elseif string.sub(params.KeyBind_Params.flightModeKB.value,-1,-1) == option then
                        system.print("Cycling Flight mode")
                        if MasterMode ~= "CRUISE" then params.KeyBind_Params.flightMode.value = "CRUISE" Nav:setMasterMode("CRUISE") system.print("Cruise mode set")
                        elseif MasterMode == "CRUISE" then params.KeyBind_Params.flightMode.value = "TRAVEL" Nav:setMasterMode("TRAVEL") system.print("Travel mode set") end
                    elseif string.sub(params.KeyBind_Params.speedLockKB.value,-1,-1) == option then
                        atmoSpeedLock = not atmoSpeedLock
                        if atmoSpeedLock == true then Nav:setAtmoMaxSpeed(params.Engines_Settings.amtoMaxSpeed.value) system.print("Atmospheric speed limite activated")
                        else Nav:setAtmoMaxSpeed(49999) system.print("Atmospheric speed limite deactivated") end
                    elseif string.sub(params.KeyBind_Params.showScreenKB.value,-1,-1) == option then
                        system.print("Toggling system.showScrren")
                        sSS = not sSS
                        if sSS == true then system.showScreen(1) else system.showScreen(0) end
                    end
                    updateParams()
                end
                local abs, sqrt = math.abs, math.sqrt
                local function vectorLen(x,y,z)
                    return sqrt(x * x + y * y + z * z)
                end
                
                lPx, lPy, lPz = 0,0,0
                
                function keyBindsOnStartControl(action)
                    if action ~= nil then
                        --system.print('on action start: '..action)
                        for i, widget in ipairs(customWidgets) do
                            if type(customWidgets[i].onActionStart) == 'function' then
                                customWidgets[i]:onActionStart(action)
                            end
                        end
                    end
                    if action == 'option1'  then
                        params.window_open = not params.window_open
                        params.QuickToolBar.window_open = false
                        params.Travel_Planner.window_open = false
                        if params.window_open == false then
                            windowsHide()
                        else windowsShow() end
                        ALT = false
                    elseif action == 'option2'  then
                        params.Travel_Planner.window_open = not params.Travel_Planner.window_open
                        params.QuickToolBar.window_open = false
                        params.window_open = false
                        if params.Travel_Planner.window_open == false then
                            windowsHide()
                        else windowsShow() end
                        ALT = false
                    elseif action == 'option3'  then
                        checkKeybinds("3")
                    elseif action == 'option4'  then
                        checkKeybinds("4")
                    elseif action == 'option5'  then
                        checkKeybinds("5")
                    elseif action == 'option6'  then
                        checkKeybinds("6")
                    elseif action == 'option7'  then
                        checkKeybinds("7")
                    elseif action == 'option8'  then
                        checkKeybinds("8")
                    elseif action == 'option9'  then
                        checkKeybinds("9")
                    elseif action == 'option0'  then
                        
                    elseif action == 'option10'  then
                        
                    elseif action == 'option11'  then
                        
                    elseif action == 'option12'  then
                        
                    elseif action == 'option13'  then
                        
                    elseif action == 'option14'  then
                        
                    elseif action == 'option15'  then
                        
                    elseif action == 'option16'  then
                        
                    elseif action == 'option17'  then
                        
                    elseif action == 'option18'  then
                        
                    elseif action == 'option19'  then
                        
                    elseif action == 'option20'  then
                        
                    elseif action == 'option21'  then
                        
                    elseif action == 'option22'  then
                        
                    elseif action == 'option23'  then
                        
                    elseif action == 'option24'  then
                        
                    elseif action == 'option25'  then
                        
                    elseif action == 'option26'  then
                        
                    elseif action == 'option27'  then
                        
                    elseif action == 'option28'  then
                        
                    elseif action == 'option29'  then
                        
                    end
                    if params.window_open == true or params.Travel_Planner.window_open == true then
                        system.showHelper(0)
                        if action == 'forward' then
                            cursorY = cursorY - 1
                            cursorYT = currentTime
                        elseif action == 'backward' then
                            cursorY = cursorY + 1
                            cursorYT = currentTime
                        elseif action == 'straferight' then
                            cursorX = cursorX + 1
                            cursorXT = currentTime
                        elseif action == 'strafeleft' then
                            cursorX = cursorX - 1
                            cursorXT = currentTime
                        elseif action == 'stopengines' or action == 'leftmouse' then
                            WindowLib:toggleClick(true)
                        elseif action == 'brake' then
                            CTRL = true
                        end
                    elseif params.QuickToolBar.window_open == true then
                        system.showHelper(0)
                        if action == 'stopengines' or action == 'leftmouse' then
                            WindowLib:toggleClick(true)
                        elseif action == 'forward' then
                            cursorY = cursorY - 1
                            cursorYT = currentTime
                        elseif action == 'backward' then
                            cursorY = cursorY + 1
                            cursorYT = currentTime
                        elseif action == 'straferight' then
                            cursorX = cursorX + 1
                            cursorXT = currentTime
                        elseif action == 'strafeleft' then
                            cursorX = cursorX - 1
                            cursorXT = currentTime
                        end
                    elseif MasterMode == "CRUISE" or MasterMode == "TRAVEL" then
                        if PKP == action and currentTime - PKPT  < params.KeyBind_Params.doubleTapTime.value then DTK = action system.print("Double tap: "..action) end
                        PKP = action
                        PKPT = currentTime
                        
                        if action ~= 'option1' and action ~= 'lalt' then enginesToggle() end
                        
                        if action == 'speedup' then
                            Nav:updateThrottleValue(0.1)
                        elseif action == 'speeddown' then
                            Nav:updateThrottleValue(-0.1)
                        elseif action == 'stopengines' then
                            Nav:resetThrottleValue()
                            Nav:setThrottleValue(0)
                            brakeInput = 1
                            mwCLICK = true
                        elseif action == 'forward' then
                            pitchInput = -1
                        elseif action == 'backward' then
                            pitchInput = 1
                        elseif action == 'yawright' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            yawInput = -1 else rollInput = 1 end
                        elseif action == 'yawleft' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            yawInput = 1 else rollInput = -1 end
                        elseif action == 'right' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            rollInput = 1 else yawInput = -1 end
                        elseif action == 'left' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            rollInput = -1 else yawInput = 1 end
                        elseif action == 'straferight' then
                            strafeInput = 1
                        elseif action == 'strafeleft' then
                            strafeInput = -1
                        elseif action == 'up' then
                            upInput = 1
                            Nav:updateHovers(upInput,nil,params.Engines_Settings.hoverMode.value)
                        elseif action == 'down' then
                            upInput = -1
                            Nav:updateHovers(upInput,nil,params.Engines_Settings.hoverMode.value)
                        elseif action == 'lshift' then
                            SHIFT = true
                        elseif action == 'lalt' then
                            system.showHelper(0)
                            ALT = true
                            if DTK == 'lalt' then
                                params.QuickToolBar.window_open = true
                                windowsShow()
                            end
                        elseif action == 'brake' then
                            brakeInput = 1
                            if DTK ~= "brake" and Nav:getMasterMode() == "CRUISE" then
                                if Nav:getThrottleValue() > constants.epsilon then
                                    Nav:updateThrottleValue(-0.5)
                                end
                            end
                        elseif action == 'gear' then
                            GEAR = true
                            gearExtended = not gearExtended
                            if gearExtended then
                                unit.deployLandingGears()
                            else
                                unit.retractLandingGears()
                            end
                        elseif action == 'light' then
                            if unit.isAnyHeadlightSwitchedOn() == true then
                                unit.switchOffHeadlights()
                            else
                                unit.switchOnHeadlights()
                            end
                        elseif action == 'booster' then
                        elseif action == 'antigravity' then
                            if antigrav ~= nil then antigrav.toggle() end
                        elseif action == 'groundaltitudedown' then
                            params.Engines_Settings.hoverAlt.value = params.Engines_Settings.hoverAlt.value - 1
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'groundaltitudeup' then
                            params.Engines_Settings.hoverAlt.value = params.Engines_Settings.hoverAlt.value + 1
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'warp' then
                            
                        end
                    elseif MasterMode == "PARKING" then
                        if PKP == action and currentTime - PKPT  < params.KeyBind_Params.doubleTapTime.value then DTK = action system.print("Double tap: "..action) end
                        PKP = action
                        PKPT = currentTime
                    
                        if action ~= 'option1' and action ~= 'lalt' then enginesToggle() end
                        if action == 'forward' then
                            forwardInput = 1
                        elseif action == 'backward' then
                            forwardInput = -1
                        elseif action == 'yawright' then
                            yawInput = -1
                        elseif action == 'yawleft' then
                            yawInput = 1
                        elseif action == 'right' then
                            strafeInput = 1
                        elseif action == 'left' then
                            strafeInput = -1
                        elseif action == 'up' then
                            upInput = 1
                            Nav:updateHovers(upInput,nil,params.Engines_Settings.hoverMode.value)
                        elseif action == 'down' then
                            upInput = -1
                            Nav:updateHovers(upInput,nil,params.Engines_Settings.hoverMode.value)
                        elseif action == 'brake' or action == 'stopengines' then
                            brakeInput = 1
                        elseif action == 'lalt' then
                            ALT = true
                            if DTK == 'lalt' then
                                params.QuickToolBar.window_open = true
                                windowsShow()
                            end
                        elseif action == 'lshift' then
                            SHIFT = true
                        elseif action == 'gear' then
                            GEAR = true
                            gearExtended = not gearExtended
                            if gearExtended then
                                unit.deployLandingGears()
                            else
                                unit.retractLandingGears()
                            end
                        elseif action == 'light' then
                            if unit.isAnyHeadlightSwitchedOn() == true then
                                unit.switchOffHeadlights()
                            else
                                unit.switchOnHeadlights()
                            end
                        elseif action == 'groundaltitudedown' then
                            params.Engines_Settings.hoverAlt.value = params.Engines_Settings.hoverAlt.value - 1
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'groundaltitudeup' then
                            params.Engines_Settings.hoverAlt.value = params.Engines_Settings.hoverAlt.value + 1
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        end
                    elseif MasterMode == "SPORT" then
                        if PKP == action and currentTime - PKPT  < params.KeyBind_Params.doubleTapTime.value then DTK = action system.print("Double tap: "..action) end
                        PKP = action
                        PKPT = currentTime
                    
                        if action ~= 'option1' and action ~= 'lalt' then enginesToggle() end
                        if action == 'forward' then
                            brakeInput = 0
                            Nav:setThrottleValue(1)
                        elseif action == 'backward' then
                            Nav:setThrottleValue(-1)
                            brakeInput = 0
                        elseif action == 'yawright' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            yawInput = -1 else strafeInput = 1 brakeInput = 0 Nav:setThrottleValue(0) end
                        elseif action == 'yawleft' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            yawInput = 1 else strafeInput = -1 brakeInput = 0 Nav:setThrottleValue(0) end
                        elseif action == 'right' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            strafeInput = 1 brakeInput = 0 Nav:setThrottleValue(0) else yawInput = -1 end
                        elseif action == 'left' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            strafeInput = -1 brakeInput = 0 Nav:setThrottleValue(0) else yawInput = 1 end
                        elseif action == 'up' then
                            upInput = 1
                            Nav:updateHovers(upInput,nil,params.Engines_Settings.hoverMode.value)
                        elseif action == 'down' then
                            upInput = -1
                            Nav:updateHovers(upInput,nil,params.Engines_Settings.hoverMode.value)
                        elseif action == 'brake' then
                            brakeInput = 1
                        elseif action == 'stopengines' then
                            Nav:setThrottleValue(0)
                            brakeInput = 1
                            mwCLICK = true
                        elseif action == 'lalt' then
                            ALT = true
                            if DTK == 'lalt' then
                                params.QuickToolBar.window_open = true
                                windowsShow()
                            end
                        elseif action == 'lshift' then
                            SHIFT = true
                        elseif action == 'gear' then
                            GEAR = true
                            gearExtended = not gearExtended
                            if gearExtended then
                                unit.deployLandingGears()
                            else
                                unit.retractLandingGears()
                            end
                        elseif action == 'light' then
                            if unit.isAnyHeadlightSwitchedOn() == true then
                                unit.switchOffHeadlights()
                            else
                                unit.switchOnHeadlights()
                            end
                        elseif action == 'booster' then
                            Nav:setThrottleValue(1)
                            brakeInput = 1
                        elseif action == 'groundaltitudedown' then
                            params.Engines_Settings.hoverAlt.value = params.Engines_Settings.hoverAlt.value - 1
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'groundaltitudeup' then
                            params.Engines_Settings.hoverAlt.value = params.Engines_Settings.hoverAlt.value + 1
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        end
                    end
                end
                
                function keyBindsOnStopControl(action)
                    if action ~= nil then
                        --system.print('on action stop: '..action)
                        for i, widget in ipairs(customWidgets) do
                            if type(customWidgets[i].onActionStop) == 'function' then
                                customWidgets[i]:onActionStop(action)
                            end
                        end
                    end
                    if action == DTK then system.print("Double tap released: "..DTK) DTK = "" end
                    if params.window_open == true then
                        if action == 'stopengines' or action == 'leftmouse' then
                            WindowLib:toggleClick(false)
                        elseif action == 'brake' then
                            CTRL = false
                        end
                    elseif params.QuickToolBar.window_open == true then
                    system.showHelper(1)
                        if action == 'stopengines' or action == 'leftmouse' then
                            WindowLib:toggleClick(false)
                        elseif action == 'lalt' then
                            params.QuickToolBar.window_open = false
                            ALT = false
                            windowsHide()
                        end
                    elseif params.Travel_Planner.window_open == true then
                        if action == 'stopengines' or action == 'leftmouse' then
                            WindowLib:toggleClick(false)
                        end
                    elseif action ~= 'lshift' and (SHIFT == false or SHIFT == true and params.KeyBind_Params.shiftLock.value == false) and MasterMode ~= "PARKING" and MasterMode ~= "SPORT" then
                        if action == DTK then system.print("Double tap released: "..DTK) DTK = "" end
                        if action == 'stopengines' then
                            brakeInput = 0
                            mwCLICK = false
                        elseif action == 'forward' then
                            pitchInput = 0
                        elseif action == 'backward' then
                            pitchInput = 0
                        elseif action == 'yawright' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            yawInput = 0 else rollInput = 0 end
                        elseif action == 'yawleft' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            yawInput = 0 else rollInput = 0 end
                        elseif action == 'right' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            rollInput = 0 else yawInput = 0 end
                        elseif action == 'left' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            rollInput = 0 else yawInput = 0 end
                        elseif action == 'straferight' then
                            strafeInput = 0
                        elseif action == 'strafeleft' then
                            strafeInput = 0
                        elseif action == 'up' then 
                            upInput = 0
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'down' then
                            upInput = 0
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'brake' then
                            brakeInput = 0
                        elseif action == 'gear' then
                            GEAR = false
                        elseif action == 'light' then
                            
                        elseif action == 'booster' then

                        elseif action == 'antigravity' then
                            
                        elseif action == 'warp' then
                            
                        elseif action == 'lalt' then
                            ALT = false
                        end
                    elseif MasterMode == "PARKING" then
                        if action == 'forward' then
                            forwardInput = 0
                        elseif action == 'backward' then
                            forwardInput = 0
                        elseif action == 'yawright' then
                            yawInput = 0
                        elseif action == 'yawleft' then
                            yawInput = 0
                        elseif action == 'right' then
                            strafeInput = 0
                        elseif action == 'left' then
                            strafeInput = 0
                        elseif action == 'up' then
                            upInput = 0
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'down' then
                            upInput = 0
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'brake' or action == 'stopengines' then
                            brakeInput = 0
                        elseif action == 'lshift' then
                            SHIFT = false
                        elseif action == 'lalt' then
                            ALT = false
                        end
                    elseif MasterMode == "SPORT" then
                        if action == 'forward' then
                            brakeInput = 1
                        elseif action == 'backward' then
                            Nav:setThrottleValue(0)
                            brakeInput = 1
                        elseif action == 'yawright' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            yawInput = 0 else strafeInput = 0 brakeInput = 1 end
                        elseif action == 'yawleft' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            yawInput = 0 else strafeInput = 0 brakeInput = 1 end
                        elseif action == 'right' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            strafeInput = 0 brakeInput = 1 else yawInput = 0 end
                        elseif action == 'left' then
                            if params.KeyBind_Params.InvertControlsQEAD.value == false then
                            strafeInput = 0 brakeInput = 1 else yawInput = 0 end
                        elseif action == 'up' then
                            upInput = 0
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'down' then
                            upInput = 0
                            Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                        elseif action == 'brake' then
                            brakeInput = 0
                        elseif action == 'stopengines' then
                            mwCLICK = false
                        elseif action == 'gear' then
                            GEAR = false
                        elseif action == 'light' then
                            
                        elseif action == 'booster' then
                            
                        elseif action == 'lalt' then
                            ALT = false
                        end
                    elseif action == 'lshift' then SHIFT = false
                    end
                end
                
                function keyBindsOnLoopControl(action)
                    if action ~= nil then
                        --system.print('on action loop: '..action)
                        for i, widget in ipairs(customWidgets) do
                            if type(customWidgets[i].onActionLoop) == 'function' then
                                customWidgets[i]:onActionLoop(action)
                            end
                        end
                    end
                    if params.window_open == true then
                        if action == 'forward' then
                            if currentTime - cursorYT > 0.1 then
                                cursorY = cursorY - 10
                            end
                        elseif action == 'backward' then
                            if currentTime - cursorYT > 0.1 then
                                cursorY = cursorY + 10
                            end
                        elseif action == 'straferight' then
                            if currentTime - cursorXT > 0.1 then
                                cursorX = cursorX + 10
                            end
                        elseif action == 'strafeleft' then
                            if currentTime - cursorXT > 0.1 then
                                cursorX = cursorX - 10
                            end
                         end
                    elseif params.QuickToolBar.window_open == true then
                        if action == 'forward' then
                            if currentTime - cursorYT > 0.1 then
                                cursorY = cursorY - 10
                            end
                        elseif action == 'backward' then
                            if currentTime - cursorYT > 0.1 then
                                cursorY = cursorY + 10
                            end
                        elseif action == 'straferight' then
                            if currentTime - cursorXT > 0.1 then
                                cursorX = cursorX + 10
                            end
                        elseif action == 'strafeleft' then
                            if currentTime - cursorXT > 0.1 then
                                cursorX = cursorX - 10
                            end
                        end
                    elseif action ~= 'lshift' and SHIFT == false then
                        if MasterMode ~= "PARKING" and MasterMode ~= "SPORT" then
                            if action == 'speedup' then
                                Nav:updateThrottleValue(0.01)
                            elseif action == 'speeddown' then
                                Nav:updateThrottleValue(-0.01)
                            elseif action == 'brake' then
                                if DTK ~= "brake" and Nav:getMasterMode() == "CRUISE" then
                                    if Nav:getThrottleValue() > constants.epsilon then
                                        Nav:updateThrottleValue(-0.05)
                                    end
                                end
                            elseif action == 'booster' then
                            end
                        end
                       if action == 'down' then
                            if params.Engines_Settings.engines.value == "AUTO" then
                                local cWP = construct.getWorldPosition()
                                local cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]
                                if currentTime - landTime > 3 and abs(vectorLen(cWPx, cWPy, cWPz) - vectorLen(lPx, lPy, lPz)) < 0.05 and Engines == true then
                                    DUSystem.print("Switching off engines")
                                    Engines = false
                                    updateParams()
                                elseif abs(vectorLen(cWPx, cWPy, cWPz) - vectorLen(lPx, lPy, lPz)) > 0.05 then
                                    lPx, lPy, lPz = cWPx, cWPy, cWPz -- land position
                                    landTime = currentTime
                                end
                            end
                        end
                    end
                end
                
        onStart:
            lua: |
                ----------------------------------------------------------------
                --              Divers Functions                              --
                ----------------------------------------------------------------
                local sqrt = math.sqrt
                local function vectorLen(x,y,z)
                    return sqrt(x * x + y * y + z * z)
                end
                function getGlobals()
                    --currentWorldPos = vec3(construct.getWorldPosition())
                    local cWP = construct.getWorldPosition()
                    local cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]
                    closestPlanetIndex = 0
                    local planetDistance = 999999999999
                    for i, v in pairs(Helios) do
                        local pDist = vectorLen(cWPx - v.center[1], cWPy - v.center[2], cWPz - v.center[3])
                        if pDist < planetDistance then
                            planetDistance = pDist
                            closestPlanetIndex = i
                        end
                    end
                    currentPlanetName = Helios[closestPlanetIndex].name[1]
                    currentPlanetRadius = Helios[closestPlanetIndex].radius
                    currentPlanetCenter = Helios[closestPlanetIndex].center
                    currentPlanetAtmoAltitude = Helios[closestPlanetIndex].atmosphereThickness or 0
                    currentPlanetGM = Helios[closestPlanetIndex].GM

                    local cPCx, cPCy, cPCz = currentPlanetCenter[1], currentPlanetCenter[2], currentPlanetCenter[3]
                    alt = vectorLen(cWPx-cPCx, cWPy-cPCy, cWPz-cPCz) - currentPlanetRadius or 0
                    inspace = 0
                    if unit.getAtmosphereDensity() < 0.075 then
                        inspace = 1
                    end
                    MasterMode = Nav:getMasterMode()
                end

                function paramsSetColorsRange()
                    for i, v in ipairs (params.Menu_Settings) do
                        if type(params.Menu_Settings[v]) == "table" then
                            if params.Menu_Settings[v].value then
                                if type( params.Menu_Settings[v].value) == "string" and v ~= "PRESET" and v ~= "HELP_MENU" then
                                    for k, l in ipairs (webColors.namedColors) do
                                        params.Menu_Settings[v].range[#params.Menu_Settings[v].range+1] = l
                                    end
                                end
                            end
                        end
                    end
                end

                function checkWidgets()
                    hideAllDefaultWidgets()
                    -- SPEEDOMETER 
                    if params.window_open == false and params.Travel_Planner.window_open == false then
                        if params.Widgets_Settings.widget_speedometer.value == "None" or params.Widgets_Settings.widget_speedometer.value == "Default" then
                            params.Widget_Speedo.window_open = false
                        end
                        if params.Widgets_Settings.widget_speedometer.value == "Default" or params.Widgets_Settings.widget_speedometer.value == "Both" then
                            if unit then unit.showWidget() end
                        end
                        if params.Widgets_Settings.widget_speedometer.value == "Default ++" or params.Widgets_Settings.widget_speedometer.value == "Both" then
                            params.Widget_Speedo.window_open = true
                        end

                        -- GYRO
                        if params.Widgets_Settings.widget_gyro.value == "None" or params.Widgets_Settings.widget_gyro.value == "Default" then
                            params.Widget_Gyro.window_open = false
                        end
                        if params.Widgets_Settings.widget_gyro.value == "Default" or  params.Widgets_Settings.widget_gyro.value == "Both" then
                            if gyro then gyro.showWidget() end
                        end
                        if params.Widgets_Settings.widget_gyro.value == "Default ++" or  params.Widgets_Settings.widget_gyro.value == "Both" then
                            params.Widget_Gyro.window_open = true
                        end

                        -- FUEL
                        if params.Widgets_Settings.widget_fuel.value == "None" or params.Widgets_Settings.widget_fuel.value == "Default" then
                            params.Widget_FuelTanks.window_open = false
                        end
                        if params.Widgets_Settings.widget_fuel.value == "Default" or params.Widgets_Settings.widget_fuel.value == "Both" then
                            if atmofueltank then
                                if atmofueltank_size > 0 then
                                    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                                end
                            end
                            if spacefueltank then
                                if spacefueltank_size > 0 then
                                    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                                end
                            end
                            if rocketfueltank then
                                if rocketfueltank_size > 0 then
                                    _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                                end
                            end
                        end
                        if params.Widgets_Settings.widget_fuel.value == "Default ++" or params.Widgets_Settings.widget_fuel.value == "Both" then
                            params.Widget_FuelTanks.window_open = true
                        end

                        -- INFO
                        if (params.Widgets_Settings.widget_info.value == "Default ++" and ALT == false) or (params.Widgets_Settings.widget_info.value == "ALT"  and ALT == true) then
                            params.Widget_Info.window_open = true
                        elseif params.Widgets_Settings.widget_info.value == "None" or (params.Widgets_Settings.widget_info.value == "ALT"  and ALT == false) then
                            params.Widget_Info.window_open = false
                        end

                        -- MAP
                        if (params.Widgets_Settings.widget_map.value == "Default ++" and ALT == false) or (params.Widgets_Settings.widget_map.value == "ALT"  and ALT == true) then
                            params.Widget_Map.window_open = true
                        elseif params.Widgets_Settings.widget_map.value == "None" or (params.Widgets_Settings.widget_map.value == "ALT"  and ALT == false) then
                            params.Widget_Map.window_open = false
                        end

                        -- CORE
                        if (params.Widgets_Settings.widget_core.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_core.value == "ALT" and ALT == true)then
                            if core then core.showWidget() end
                        end

                        -- RADAR
                        if #radar ~= 0 then
                            local rdr = radar_1 ~= nil and radar_1.getOperationalState() == 1 and radar_1 or radar_2 ~= nil and radar_2.getOperationalState() == 1 and radar_2 or nil
                            if rdr ~= nil then
                                local concat = table.concat
                                local matchElementId = ""
                                outS, outD, outT, outA, outW, outTh, outAs = {}, {}, {}, {}, {}, {}, {}
                                nS, nD, nT, nA, nW, nTH, nAs = 0, 0, 0, 0, 0, 0, 0

                                local function sortRadarData()
                                    local getData = rdr.getWidgetData()
                                    local matchID = getData:gmatch('({"constructId":".-%b{}.-})')
                                    matchElementId = '],'.. getData:match('"elementId":".+')
                                    local counter = 0
                                    for S in matchID do
                                        counter = counter +1
                                        if counter > params.Widgets_Settings.widget_radar_entries.value then break end
                                        local matchCId = S:match('"constructId":"([%d%.]*)"')
                                        local cKind = rdr.getConstructKind(matchCId)
                                        if ((params.Widgets_Settings.widget_radar_statics.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_statics.value == "ALT" and ALT == true)) and (cKind == 4 or cKind == 6 or cKind == 7 ) then
                                            nS = nS+1
                                            if nS - 1 > 0 then outS[nS] = ',' .. S else outS[1] = '{"constructsList":[' .. S end
                                        end

                                        if ((params.Widgets_Settings.widget_radar_dynamics.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_dynamics.value == "ALT" and ALT == true)) and cKind == 5 then
                                            nD = nD+1
                                            if nD - 1 > 0 then outD[nD] = ',' .. S else outD[1] = '{"constructsList":[' .. S end
                                        end

                                        if ((params.Widgets_Settings.widget_radar_transponder.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_transponder.value == "ALT" and ALT == true)) and cKind == 5 and rdr.hasMatchingTransponder(matchCId) == true then
                                            nT = nT+1
                                            if nT - 1 > 0 then outT[nT] = ',' .. S else outT[1] = '{"constructsList":[' .. S end
                                        end

                                        if ((params.Widgets_Settings.widget_radar_armed.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_armed.value == "ALT" and ALT == true)) and rdr.getConstructInfos(matchCId).weapons > 0 then
                                            nA = nA+1
                                            if nA - 1 > 0 then outA[nA] = ',' .. S else outA[1] = '{"constructsList":[' .. S end
                                        end

                                        if ((params.Widgets_Settings.widget_radar_wrecks.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_wrecks.value == "ALT" and ALT == true)) and rdr.isConstructAbandoned(matchCId) == true then
                                            nW = nW+1
                                            if nW - 1 > 0 then outW[nW] = ',' .. S else outW[1] = '{"constructsList":[' .. S end
                                        end

                                        if ((params.Widgets_Settings.widget_radar_threat.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_threat.value == "ALT" and ALT == true)) and rdr.getThreatRateFrom(matchCId) ~= 1 then
                                            nTh = nTh+1
                                            if nTh - 1 > 0 then outTh[nTh] = ',' .. S else outTh[1] = '{"constructsList":[' .. S end
                                        end

                                        if ((params.Widgets_Settings.widget_radar_asteroid.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_asteroid.value == "ALT" and ALT == true)) and cKind == 3 then
                                            nAs = nAs+1
                                            if nAs - 1 > 0 then outAs[nAs] = ',' .. S else outAs[1] = '{"constructsList":[' .. S end
                                        end
                                    end
                                end

                                sortRadarData()
                                staticRadarData = {}
                                dynamicRadarData = {}
                                transponderRadarData = {}
                                armedRadarData = {}
                                wreckRadarData = {}
                                threatRadarData = {}
                                asteroidRadarData = {}
                                local ID = 0
                                if (params.Widgets_Settings.widget_radar_statics.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_statics.value == "ALT" and ALT == true)then
                                    nS = nS+1
                                    outS[nS] = matchElementId
                                    ID = system.createData(concat(outS))
                                    staticRadarData[1] = { getWidgetDataId = function() return ID end }
                                    _autoconf.displayCategoryPanel(staticRadarData, 1, "Statics: "..nS-1, "radar")
                                    radarUp = true
                                end

                                if (params.Widgets_Settings.widget_radar_dynamics.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_dynamics.value == "ALT" and ALT == true)then
                                    nD = nD+1
                                    outD[nD] = matchElementId
                                    ID = system.createData(concat(outD))
                                    dynamicRadarData[1] = { getWidgetDataId = function() return ID end }
                                    _autoconf.displayCategoryPanel(dynamicRadarData, 1, "Dynamics: "..nD-1, "radar")
                                    radarUp = true
                                end

                                if (params.Widgets_Settings.widget_radar_transponder.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_transponder.value == "ALT" and ALT == true)then
                                    nT = nT+1
                                    outT[nT] = matchElementId
                                    ID = system.createData(concat(outT))
                                    transponderRadarData[1] = { getWidgetDataId = function() return ID end }
                                    _autoconf.displayCategoryPanel(transponderRadarData, 1, "Transponders: "..nT-1, "radar")
                                    radarUp = true
                                end

                                if (params.Widgets_Settings.widget_radar_armed.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_armed.value == "ALT" and ALT == true)then
                                    nA = nA+1
                                    outA[nA] = matchElementId
                                    ID = system.createData(concat(outA))
                                    armedRadarData[1] = { getWidgetDataId = function() return ID end }
                                    _autoconf.displayCategoryPanel(armedRadarData, 1, "Armed: "..nA-1, "radar")
                                    radarUp = true
                                end

                                if (params.Widgets_Settings.widget_radar_wrecks.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_wrecks.value == "ALT" and ALT == true)then
                                    nW = nW+1
                                    outW[nW] = matchElementId
                                    ID = system.createData(concat(outW))
                                    wreckRadarData[1] = { getWidgetDataId = function() return ID end }
                                    _autoconf.displayCategoryPanel(wreckRadarData, 1, "Wrecks: "..nW-1, "radar")
                                    radarUp = true
                                end

                                if (params.Widgets_Settings.widget_radar_threat.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_threat.value == "ALT" and ALT == true)then
                                    nTh = nTh+1
                                    outTh[nTh] = matchElementId
                                    ID = system.createData(concat(outTh))
                                    threatRadarData[1] = { getWidgetDataId = function() return ID end }
                                    _autoconf.displayCategoryPanel(threatRadarData, 1, "Threats: "..nTh-1, "radar")
                                    radarUp = true
                                end

                                if (params.Widgets_Settings.widget_radar_asteroid.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_radar_asteroid.value == "ALT" and ALT == true)then
                                    nAs = nAs+1
                                    outAs[nAs] = matchElementId
                                    ID = system.createData(concat(outAs))
                                    asteroidRadarData[1] = { getWidgetDataId = function() return ID end }
                                    _autoconf.displayCategoryPanel(asteroidRadarData, 1, "Asteroids: "..nAs-1, "radar")
                                    radarUp = true
                                end
                                if ID ~= 0 then
                                    radarLoop = 1
                                    radarCounter = 0 
                                    outS, outD, outT, outA, outW, outTh, outAs = {}, {}, {}, {}, {}, {}, {}
                                    nS, nD, nT, nA, nW, nTH, nAs = 0, 0, 0, 0, 0, 0, 0
                                    unit.setTimer("RADAR",0.1)
                                else unit.stopTimer("RADAR") end
                            end
                        end

                        -- PERISCOPE
                        if (params.Widgets_Settings.widget_periscope.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_periscope.value == "ALT" and ALT == true)then
                            if #radar ~= 0 then
                                local rdr = radar_1.getOperationalState() == 1 and {radar_1} or {radar_2} or {radar_1}
                                if rdr then _autoconf.displayCategoryPanel(rdr, 1, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope") end
                            end
                        end

                        -- AGG
                        if (params.Widgets_Settings.widget_agg.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_agg.value == "ALT" and ALT == true)then
                            if antigrav then antigrav.showWidget() end
                        end

                        -- WARP
                        if (params.Widgets_Settings.widget_warp.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_warp.value == "Auto" and warpData.Info:lower() == "activate warp") or (params.Widgets_Settings.widget_warp.value == "ALT" and ALT == true)then
                            if warpdrive then warpdrive.showWidget() end
                        end

                        -- PARENTING
                        if (params.Widgets_Settings.widget_parenting.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_parenting.value == "ALT" and ALT == true)then
                            parentingPanelId = system.createWidgetPanel("Docking")
                            parentingWidgetId = system.createWidget(parentingPanelId,"parenting")
                            system.addDataToWidget(unit.getDataId(),parentingWidgetId)
                        end

                        -- COMBAT STRESS
                        if (params.Widgets_Settings.widget_cstress.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_cstress.value == "ALT" and ALT == true)then
                            coreCombatStressPanelId = system.createWidgetPanel("Core combat stress")
                            coreCombatStressgWidgetId = system.createWidget(coreCombatStressPanelId,"core_stress")
                            system.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)
                        end

                        -- SHIELD
                        if (params.Widgets_Settings.widget_shield.value == "Default" and ALT == false) or (params.Widgets_Settings.widget_shield.value == "ALT" and ALT == true) then
                            if shield then shield.showWidget() end
                        end

                        for i, v in ipairs(params.Widgets_Custom) do
                            if (params.Widgets_Custom["widget_custom"..i].value == "Default ++" and ALT == false) or (params.Widgets_Custom["widget_custom"..i].value == "ALT"  and ALT == true) then
                                params["Widget_Custom"..i].window_open = true
                            elseif params.Widgets_Custom["widget_custom"..i].value == "None" or (params.Widgets_Custom["widget_custom"..i].value == "ALT"  and ALT == false) then
                                params["Widget_Custom"..i].window_open = false
                            end
                        end
                    end
                end

                function hideAllDefaultWidgets()
                    if core then core.hideWidget() end
                    if unit then unit.hideWidget() end
                    if gyro then gyro.hideWidget() end
                    if antigrav then antigrav.hideWidget() end
                    if warpdrive then warpdrive.hideWidget() end
                    if shield then shield.hideWidget() end
                    _autoconf.hideCategoryPanels()
                    system.destroyWidgetPanel(parentingPanelId)
                    system.destroyWidgetPanel(coreCombatStressPanelId)
                end

                function windowsShow()
                    system.lockView(1)
                    player.freeze(1)
                    WindowLib = WindowLibPlusPlus.init(system)
                    checkWidgets()
                    Cursor_Builder()
                    Params_Menu_Builder()
                    Help_Menu_Builder()
                    Widgets_Builder()
                    Autopilot_Builder()
                    Quick_Menu_Builder()
                end

                function windowsHide()
                    if params.KeyBind_Params.movementLock.value == false then player.freeze(0) else player.freeze(1) end
                    if params.KeyBind_Params.viewLock.value == false then system.lockView(0) else system.lockView(1) end
                    WindowLib = WindowLibPlusPlus.init()
                    checkWidgets()
                    Params_Menu_Builder()
                    Help_Menu_Builder()
                    Widgets_Builder()
                    Autopilot_Builder()
                    Quick_Menu_Builder()
                    Cursor_Builder()
                end

                function setParamsFuelTanks()
                    for i, v in ipairs(fuelTanksData) do
                        params["Widget_FuelTank_"..i] = {
                            window_tittle = "FUEL TANK "..i,
                            window_pos = {x=150+i*99, y=150},
                            window_open = false,
                            window_scale = 1.5
                            }
                    end
                end

                function enginesToggle()
                    if params.Engines_Settings.engines.value == "AUTO" then 
                        if Engines == false then
                            Engines = true
                            system.print("Engines ON")
                        end
                    elseif params.Engines_Settings.engines.value == "OFF" and Engines == true then
                        Engines = false
                        system.print("Engines OFF")
                    elseif params.Engines_Settings.engines.value == "ON" and Engines == false then
                        Engines = true
                        system.print("Engines ON")
                    end
                end

                function setControlMasterMode(mode)
                    Nav:setMasterMode(mode)
                    if mode ~= Nav:getMasterMode() then
                        params.KeyBind_Params.flightMode.value = Nav:getMasterMode()
                    end
                end

                colorPresets = {
                            preset1 = {TITTLE_COLOR = "white",
                                        TITTLE_COLOR_A = 1,
                                        TITTLE_TEXT_COLOR = "black",
                                        WINDOW_COLOR = "midnightblue",
                                        WINDOW_COLOR_A = 0.4,
                                        WINDOW_TEXT_COLOR = "skyblue",
                                        BUTTON_COLOR = "white",
                                        BUTTON_BORDER_COLOR = "lightgray",
                                        BUTTON_COLOR_A = 0.1,
                                        BUTTON_TEXT_COLOR = "white",
                                        WIDGET_TEXT_COLOR = "skyblue",
                                        WIDGET_ANIM_COLOR = "red",
                                        WIDGET_FIXED_COLOR = "white",
                                        },
                            preset2 = {TITTLE_COLOR = "yellowgreen",
                                        TITTLE_COLOR_A = 1,
                                        TITTLE_TEXT_COLOR = "black",
                                        WINDOW_COLOR = "dimgrey",
                                        WINDOW_COLOR_A = 0.8,
                                        WINDOW_TEXT_COLOR = "greenyellow",
                                        BUTTON_COLOR = "lightgrey",
                                        BUTTON_BORDER_COLOR = "lightgrey",
                                        BUTTON_COLOR_A = 0.3,
                                        BUTTON_TEXT_COLOR = "white",
                                        WIDGET_TEXT_COLOR = "greenyellow",
                                        WIDGET_ANIM_COLOR = "greenyellow",
                                        WIDGET_FIXED_COLOR = "lightgrey",
                                        },
                            preset3 = {TITTLE_COLOR = "black",
                                        TITTLE_COLOR_A = 0.5,
                                        TITTLE_TEXT_COLOR = "chartreuse",
                                        WINDOW_COLOR = "black",
                                        WINDOW_COLOR_A = 0.1,
                                        WINDOW_TEXT_COLOR = "chartreuse",
                                        BUTTON_COLOR = "black",
                                        BUTTON_BORDER_COLOR = "chartreuse",
                                        BUTTON_COLOR_A = 0.3,
                                        BUTTON_TEXT_COLOR = "chartreuse",
                                        WIDGET_TEXT_COLOR = "chartreuse",
                                        WIDGET_ANIM_COLOR = "chartreuse",
                                        WIDGET_FIXED_COLOR = "chartreuse",
                                        },
                            preset4 = {TITTLE_COLOR = "darkorange",
                                        TITTLE_COLOR_A = 0.6,
                                        TITTLE_TEXT_COLOR = "yellow",
                                        WINDOW_COLOR = "black",
                                        WINDOW_COLOR_A = 0.5,
                                        WINDOW_TEXT_COLOR = "yellow",
                                        BUTTON_COLOR = "darkorange",
                                        BUTTON_BORDER_COLOR = "darkorange",
                                        BUTTON_COLOR_A = 0.5,
                                        BUTTON_TEXT_COLOR = "yellow",
                                        WIDGET_TEXT_COLOR = "yellow",
                                        WIDGET_ANIM_COLOR = "yellow",
                                        WIDGET_FIXED_COLOR = "darkorange",
                                        },
                            preset5 = {TITTLE_COLOR = "black",
                                        TITTLE_COLOR_A = 0,
                                        TITTLE_TEXT_COLOR = "white",
                                        WINDOW_COLOR = "black",
                                        WINDOW_COLOR_A = 0,
                                        WINDOW_TEXT_COLOR = "white",
                                        BUTTON_COLOR = "black",
                                        BUTTON_BORDER_COLOR = "white",
                                        BUTTON_COLOR_A = 0,
                                        BUTTON_TEXT_COLOR = "white",
                                        WIDGET_TEXT_COLOR = "white",
                                        WIDGET_ANIM_COLOR = "white",
                                        WIDGET_FIXED_COLOR = "white",
                                        },
                            }

                function saveColorPreset()
                    for k, l in pairs(params.Menu_Settings) do
                        if type(l) == "table" and l.value ~= nil and k ~= "PRESET" and k ~= "HELP_MENU" then
                            colorPresets[previousPreset][k] = params.Menu_Settings[k].value
                        end
                    end
                    
                end

                function loadColorPreset()
                    for k, l in pairs(params.Menu_Settings) do
                        if type(l) == "table" and l.value ~= nil and k ~= "PRESET" and k ~= "HELP_MENU" then
                            params.Menu_Settings[k].value = colorPresets[params.Menu_Settings.PRESET.value][k]
                        end
                    end
                    previousPreset = params.Menu_Settings.PRESET.value
                end

                function updateParams()
                    setControlMasterMode(params.KeyBind_Params.flightMode.value)
                    EnginesUpdate = true
                    HoverUpdate = true
                    VboosterUpdate = true
                    if Nav:getAtmoMaxSpeed() ~= params.Engines_Settings.amtoMaxSpeed.value and atmoSpeedLock == true then
                        Nav:setAtmoMaxSpeed(params.Engines_Settings.amtoMaxSpeed.value)
                    end
                    if gyro then
                        if params.Engines_Settings.gyroAxis.value == true and gyro.isActive() == false then gyro.activate()
                        elseif params.Engines_Settings.gyroAxis.value == false and gyro.isActive() == true then gyro.deactivate()
                        end
                    end
                    if antigrav then antigrav.setTargetAltitude(params.Engines_Settings.aggAltitude.value) end
                    Nav:updateHovers(upInput,params.Engines_Settings.hoverAlt.value,params.Engines_Settings.hoverMode.value)
                    saveColorPreset()
                    loadColorPreset()
                    unit.setTimer("SCREEN",params.Widgets_Settings.widget_refresh.value)
                    if params.KeyBind_Params.movementLock.value == false then player.freeze(0) else player.freeze(1) end
                    if params.KeyBind_Params.viewLock.value == false then system.lockView(0) else system.lockView(1) end
                end

                function updateHelpMenu()
                    params.help_menu.Info_Page.html = helpMenuHTML.info
                    params.help_menu.Menu_Settings.html = helpMenuHTML.menuSettings
                    params.help_menu.Engines_Settings.html = helpMenuHTML.engineSettings
                    params.help_menu.AutoPilot_Settings.html = helpMenuHTML.autopilotSettings
                    params.help_menu.Widgets_Settings.html = helpMenuHTML.widgets
                    params.help_menu.KeyBind_Params.html = helpMenuHTML.keybingParams
                    params.help_menu.QuickToolBar.html = helpMenuHTML.quickToolBar
                    params.help_menu.window_html = params.help_menu.Info_Page.html
                end

                local cos, sin, max, min = math.cos, math.sin, math.max, math.min
                function convertToWorldCoordinates(posString)
                    local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
                    local posPattern = '::pos{' .. num .. ',' .. num .. ',' .. num .. ',' .. num ..  ',' .. num .. '}'
                    local systemId, bodyId, latitude, longitude, altitude = string.match(posString,posPattern)
                    systemId = tonumber(systemId)
                    bodyId = tonumber(bodyId)
                    latitude = tonumber(latitude)
                    longitude = tonumber(longitude)
                    altitude = tonumber(altitude)
                    if tonumber(bodyId) == 0 then
                        return latitude,longitude,altitude
                    end
                    latitude = 0.0174532925199 * max(min(latitude, 90), -90)
                    longitude = 0.0174532925199 * (longitude % 360)
                    local center, radius = Helios[bodyId].center, tonumber(Helios[bodyId].radius)
                    local xproj = cos(latitude)
                    local px, py, pz = center[1]+(radius+altitude) * xproj*cos(longitude),
                                        center[2]+(radius+altitude) * xproj*sin(longitude),
                                        center[3]+(radius+altitude) * sin(latitude)
                    return px, py, pz
                end

                function stringToTable(String, Separator)
                    local Separator = Separator or ','
                    local axes = {}
                    for axis in String:gmatch('[^'..Separator..']+') do
                        axes[#axes + 1] = axis
                    end
                    return axes
                end

                function mouseControlUpdate()
                    system.lockView(1)
                    if system.getMouseDeltaY() ~= 0 or previousDeltaY ~= 0 then 
                        pitchInput = system.getMouseDeltaY() * params.KeyBind_Params.mouseControlSensibility.value *-0.25
                        previousDeltaY = pitchInput
                    end
                    if system.getMouseDeltaX() ~= 0 or previousDeltaX ~= 0  then 
                        yawInput = system.getMouseDeltaX() * params.KeyBind_Params.mouseControlSensibility.value *-0.25
                        previousDeltaX = yawInput
                    end
                end
        onStart:
            lua: |
                --------------------------------------------------------------
                --                  DATABANK MANAGEMENT                     --
                --------------------------------------------------------------
                function setParams2DB()
                    if #DB ~= 0 then
                        local data2Save = {}
                        data2Save["MBP"] = params.window_pos
                        data2Save["QMP"] = params.QuickToolBar.window_pos
                        data2Save["MBO"] = params.window_open
                        data2Save["V"] = script.version
                        data2Save["WAMS"] = params.Widget_Map.atmo_map_scale.value
                        data2Save["CP"] = colorPresets
                        data2Save["HMP"] = params.help_menu.window_pos
                        data2Save["HMO"] = params.help_menu.window_open
                        data2Save["TPP"] = params.Travel_Planner.window_pos

                        local shortKey = ""
                        for i, v in ipairs(params) do
                            if params[v].window_pos ~= nil then
                                shortKey = ""
                                for uppercase in string.gmatch(tostring(v), "%u") do
                                    shortKey = shortKey..uppercase
                                end
                                data2Save[shortKey.."_p"] = params[v].window_pos
                                data2Save[shortKey.."_o"] = params[v].window_open
                            end
                            for k, l in ipairs(params[v]) do
                                if params[v][l] then
                                    if params[v][l].value ~= nil  then
                                        shortKey = ""
                                        for uppercase in string.gmatch(tostring(v), "%u") do
                                            shortKey = shortKey..uppercase
                                        end
                                        if string.sub (tostring(l),1,7) == "widget_" then
                                            if string.sub (tostring(l),8,13) == "radar_" then
                                                shortKey = shortKey.."_r_"..string.sub(tostring(l),14,16)
                                            else
                                                shortKey = shortKey.."_w_"..string.sub(tostring(l),8,10)..string.sub(tostring(l),-1)
                                            end
                                        else
                                            shortKey = shortKey.."_"..string.sub(tostring(l),1,1)
                                            for uppercase in string.gmatch(tostring(l), "%u") do
                                                shortKey = shortKey..uppercase
                                            end
                                        end
                                        --shortKey = shortKey..string.sub(tostring(l),-1)
                                        if type(params[v][l].value) ~= "function" then
                                            data2Save[shortKey.."_v"] = params[v][l].value
                                        end
                                        data2Save[shortKey.."_q"] = params[v][l].quickToolBar
                                        --system.print(shortKey)
                                    end
                                end
                            end
                        end
                        for k, v in pairs(params) do
                            if string.sub (tostring(k),1,7) == "Widget_" then
                                shortKey = "W_"..string.sub(tostring(k),8,9)..string.sub(tostring(k),-1)
                                data2Save[shortKey.."_p"] = params[k].window_pos
                                data2Save[shortKey.."_o"] = params[k].window_open
                                data2Save[shortKey.."_s"] = params[k].window_scale
                                --system.print(shortKey)
                            end
                        end
                        data2Save["D"] = params.Travel_Planner.Destination.value
                        data2Save["LD"] = params.Travel_Planner.lockedDestination.value
                        data2Save["CT"] = Nav:getThrottleValue()
                        data2Save["E"] = Engines
                        data2Save["A"] = asteroids
                        Data:setData(tostring(player.getId()),data2Save)
                        system.print(system.getPlayerName(player.getId()).."'s data saved: "..string.len(Data:serialize(data2Save)).." characters")
                    end
                end

                local masterDataID = true --export: will use construct owner data as default
                function loadParamsFromDB()
                local SP = system.print
                local PE = function(t) SP(t.." data corrupted: using default parameter") end --print error message
                if #DB ~= 0 then
                    SP("Initiating Databank loading")
                    local d2L = Data:getData(tostring(player.getId()))
                    local val = ""
                    local nU = false --new User

                    if not Data:getData("masterUserID") then
                        system.print("Master user default settings set to: "..system.getPlayerName(player.getId()))
                        Data:setData("masterUserID",player.getId())
                    end

                    if not d2L and masterDataID == true and Data:getData("masterUserID") ~= player.getId() then
                        nU = true
                        d2L = Data:getData(tostring(Data:getData("masterUserID")))
                        system.print("New User detected, default params loaded from Master User")
                    end
                    local shortkey = ""

                    if d2L and type(d2L) == "table" then
                        SP("Loading parameters from Databank")
                        if nU == false then
                            val = d2L["MBP"]
                            if type(val) == "table" then
                                params.window_pos = vec2(val)
                            else
                                PE("Menu_Bar_Pos")
                            end
                            val = d2L["QMP"]
                            if type(val) == "table" then
                                params.QuickToolBar.window_pos = vec2(val)
                            else
                                PE("Quick_Menu_Pos")
                            end
                            val = d2L["MBO"]
                            if type(val) == "boolean" then
                                params.window_open = val
                            else
                                PE("Menu_Bar_Open")
                            end
                            val = d2L["CP"]
                            if type(val) == "table" then
                                colorPresets = val
                            else
                                PE("colorPresets")
                            end
                            val = d2L["HMP"]
                            if type(val) == "table" then
                                params.help_menu.window_pos = vec2(val)
                            else
                                PE("Help_Menu_Pos")
                            end
                            val = d2L["HMO"]
                            if type(val) == "boolean" then
                                params.help_menu.window_open = val
                            else
                                PE("Help_Menu_Open")
                            end
                            val = d2L["WAMS"]
                            if type(val) == "string" then
                                params.Widget_Map.atmo_map_scale.value = val
                            else
                                PE("Widget_Atmo_Map_Scale_"..tostring(val))
                            end
                            val = d2L["TPP"]
                            if type(val) == "table" then
                                params.Travel_Planner.window_pos = vec2(val)
                            else
                                PE("Travel_Planner_Pos")
                            end
                        end
                        for i, v in ipairs(params) do
                            if params[v].window_pos ~= nil then
                                shortKey = ""
                                for uppercase in string.gmatch(tostring(v), "%u") do
                                    shortKey = shortKey..uppercase
                                end
                                if type(d2L[shortKey.."_p"]) == "table" and nU == false then
                                    params[v].window_pos = vec2(d2L[shortKey.."_p"])
                                else
                                    PE(tostring(v).."_w_pos")
                                end
                                if type(d2L[shortKey.."_o"]) == "boolean" and nU == false then
                                    params[v].window_open = d2L[shortKey.."_o"]
                                else
                                    PE(tostring(v).."_w_open")
                                end
                            end
                            for k, l in ipairs(params[v]) do
                                if params[v][l] then
                                    if params[v][l].value ~= nil then
                                        shortKey = ""
                                        for uppercase in string.gmatch(tostring(v), "%u") do
                                            shortKey = shortKey..uppercase
                                        end
                                        if string.sub (tostring(l),1,7) == "widget_" then
                                            if string.sub (tostring(l),8,13) == "radar_" then
                                                shortKey = shortKey.."_r_"..string.sub(tostring(l),14,16)
                                            else
                                                shortKey = shortKey.."_w_"..string.sub(tostring(l),8,10)..string.sub(tostring(l),-1)
                                            end
                                        else
                                            shortKey = shortKey.."_"..string.sub(tostring(l),1,1)
                                            for uppercase in string.gmatch(tostring(l), "%u") do
                                                shortKey = shortKey..uppercase
                                            end
                                        end
                                        if type(params[v][l].value) ~= "function" then
                                            val = d2L[shortKey.."_v"]
                                            if type(val) == type(params[v][l].value) then
                                                params[v][l].value = val
                                            else
                                                PE(tostring(v)..tostring(l).."_value")
                                            end
                                        end
                                        val = d2L[shortKey.."_q"]
                                        if type(val) == "boolean" then
                                            params[v][l].quickToolBar = val
                                        else
                                            PE(tostring(v)..tostring(l).."_quick")
                                        end
                                    end
                                end
                            end
                        end
                        for k, v in pairs(params) do
                            if string.sub(tostring(k),1,7) == "Widget_" then
                                shortKey = "W_"..string.sub(tostring(k),8,9)..string.sub(tostring(k),-1)
                                val = d2L[shortKey.."_p"]
                                if type(val) == "table" and nU == false then
                                    params[k].window_pos = vec2(val)
                                else
                                    PE(tostring(k).."_w_pos "..tostring(val))
                                end
                                val = d2L[shortKey.."_o"]
                                if type(val) == "boolean" then
                                    params[k].window_open = val
                                else
                                    PE(tostring(k).."_w_open "..tostring(val))
                                end
                                val = d2L[shortKey.."_s"]
                                if type(val) == "number" and nU == false then
                                    params[k].window_scale = val
                                else
                                    PE(tostring(k).."_w_scale "..tostring(val))
                                end
                            end
                        end
                        val = d2L["CT"]
                        if type(val) == "number" then
                            Nav:setThrottleValue(val)
                        else
                            PE("Current Throttle")
                        end
                        val = d2L["E"]
                        if type(val) == "boolean" then
                            Engines = val
                        else
                            PE("Engines")
                        end
                        val = d2L["D"]
                        if type(val) == "table" then
                            params.Travel_Planner.Destination.value = val
                        else
                            PE("Destination")
                        end
                        val = d2L["LD"]
                        if type(val) == "table" then
                            params.Travel_Planner.lockedDetination.value = val
                        else
                            PE("Locked Destination")
                        end
                        val = d2L["A"]
                        if type(val) == "table" then
                            asteroids = val
                        else
                            PE("Asteroids")
                        end
                        val = nil
                        d2L = nil
                        SP("Load params from DB successfull")
                        else SP("No data found for player: "..system.getPlayerName(player.getId()).."! Loading default paramters")
                        end
                    end
                end

        onStart:
            lua: |
                local abs, floor, asin, sqrt, cos, acos, sin, deg, atan, rad, sign, clamp, rad2deg = math.abs, math.floor, math.asin, math.sqrt, math.cos, math.acos, math.sin, math.deg, math.atan, math.rad, utils.sign, utils.clamp, constants.rad2deg
                ----------------------------------
                -- BRAKING DISTANCE CALCULATION --
                ----------------------------------
                function brakingCalculation()
                    local MaxBrakesForce = construct.getMaxBrake() or 0
                    local maxSpeed = 50000*0.27777777777
                    local cAV = construct.getVelocity()
                    local cAVx, cAVy, cAVz = cAV[1], cAV[2], cAV[3]
                    local cWAV = construct.getWorldVelocity()
                    local xyzSpeedMPS = sqrt(cAVx^2+cAVy^2+cAVz^2)
                    local cM = construct.getTotalMass()
                    local forwardEnginesForce, backwardEnginesForce = Nav:getMaxKPA()
                    local gravity = core.getWorldGravity()
                    local g = core.getGravityIntensity()
                    local G_axis = -1*utils.sign(cWAV[1]*gravity[1] + cWAV[2]*gravity[2] + cWAV[3]*gravity[3])
                    local brakesAcceleration = MaxBrakesForce + g*G_axis * cM
                    local forwardAcceleration = forwardEnginesForce + g*G_axis * cM
                    local backwardAcceleration = backwardEnginesForce + g*G_axis * cM
                    local forwardBrakeDistance = cM * maxSpeed^2 / (brakesAcceleration + backwardEnginesForce/2) * (1 - sqrt(1 - ((xyzSpeedMPS)^2 / maxSpeed^2)))
                    local backburnBrakeDistance = cM * maxSpeed^2 / (brakesAcceleration + forwardAcceleration/2) * (1 - sqrt(1 - ((xyzSpeedMPS)^2 / maxSpeed^2)))
                    
                    return forwardBrakeDistance, backburnBrakeDistance
                end
                ----------------------------------------------------------------
                --               Thrust Management library                    --
                ----------------------------------------------------------------
                -- Vectors manipulations --
                ---------------------------
                local function normalizeVec(x,y,z)
                    local l = sqrt(x*x + y*y + z*z)
                    return x/l, y/l, z/l
                end

                local function dotVec(x1,y1,z1,x2,y2,z2)
                    return x1*x2 + y1*y2 + z1*z2
                end

                local function rotateVec(vx, vy, vz, phi, ax, ay, az)
                    local l = sqrt(ax*ax + ay*ay + az*az)
                    local ux, uy, uz = ax/l, ay/l, az/l
                    local c, s = cos(phi), sin(phi)
                    local m1x, m1y, m1z = (c + ux * ux * (1-c)), (ux * uy * (1-c) - uz * s), (ux * uz * (1-c) + uy * s)
                    local m2x, m2y, m2z = (uy * ux * (1-c) + uz * s), (c + uy * uy * (1-c)), (uy * uz * (1-c) - ux * s)
                    local m3x, m3y, m3z = (uz * ux * (1-c) - uy * s), (uz * uy * (1-c) + ux * s), (c + uz * uz * (1-c))
                    return m1x*vx+m1y*vy+m1z*vz, m2x*vx+m2y*vy+m2z*vz, m3x*vx+m3y*vy+m3z*vz
                end

                local function vectorLen(x,y,z)
                    return sqrt(x * x + y * y + z * z)
                end
                
                local function cross(x, y, z, vx, vy, vz)
                    return y*vz - z*vy, z*vx - x*vz, x*vy - y*vx
                end

                -- Rotations control --
                -----------------------
                function angle3DVec(x1,y1,z1, x2,y2,z2, x3,y3,z3, x4,y4,z4) -- x1 = first vector(ex: velocity vec) / x2 = second vector(ex: construct X axis) / x3 = reference X axis / x4 = reference Z axis
                    local angle = acos(dotVec(x1,y1,z1,x2,y2,z2) / (vectorLen(x1,y1,z1) * vectorLen(x2,y2,z2))) * rad2deg
                    local cx,cy,cz = cross(cross(x1,y1,z1,x4,y4,z4),x3,y3,z3)
                    return angle*sign(dotVec(cx,cy,cz,x4,y4,z4))
                end
                
                local function getConstructRot(x, y, z)
                    if x == nil then x, y, z = -1,0,0 end
                    x, y, z = normalizeVec(x,y,z)
                    local CRx, CRy, CRz = cWORx, cWORy, cWORz
                    local CUx, CUy, CUz = cWOUPx, cWOUPy, cWOUPz
                    local cx, cy, cz = cross(x, y, z, CUx, CUy, CUz)
                    local rAx, rAy, rAz =  normalizeVec(cx, cy, cz) -- rot axis
                    local ConstructRot = acos(clamp(dotVec(rAx, rAy, rAz,CRx, CRy, CRz), -1, 1)) * rad2deg
                    cx, cy, cz = cross(rAx, rAy, rAz, CRx, CRy, CRz)
                    if dotVec(cx, cy, cz, CUx, CUy, CUz) > 0 then ConstructRot = -ConstructRot end
                    return ConstructRot
                end

                local function getConstructPitch(x, y, z)
                    if x == nil then x, y, z = 0,0,1 end
                    x, y, z = normalizeVec(x,y,z)
                    local CRx, CRy, CRz = cWORx, cWORy, cWORz
                    local CFx, CFy, CFz = cWOFx, cWOFy, cWOFz
                    local cx, cy, cz = cross(x, y, z, CRx, CRy, CRz)
                    local pAx, pAy, pAz =  normalizeVec(cx, cy, cz) --pith axis
                    local ConstructPitch = acos(clamp(dotVec(pAx, pAy, pAz, CFx, CFy, CFz), -1, 1)) * rad2deg
                    cx, cy, cz = cross(pAx, pAy, pAz, CFx, CFy, CFz)
                    if dotVec(cx, cy, cz, CRx, CRy, CRz) < 0 then ConstructPitch = -ConstructPitch end
                    return ConstructPitch
                end

                local function getConstructRoll(x,y,z)
                    if x == nil then x, y, z = 0,0,1 end
                    x, y, z = normalizeVec(x,y,z)
                    local CRx, CRy, CRz = cWORx, cWORy, cWORz
                    local CFx, CFy, CFz = -cWOFx, -cWOFy, -cWOFz
                    local cx, cy, cz = cross(x, y, z, CFx, CFy, CFz)
                    local rAx, rAy, rAz =  normalizeVec(cx, cy, cz) --roll Axis
                    local ConstructRoll = acos(clamp(dotVec(rAx, rAy, rAz, CRx, CRy, CRz), -1, 1)) * rad2deg
                    cx, cy, cz = cross(rAx, rAy, rAz, CRx, CRy, CRz)
                    if dotVec(cx, cy, cz, CFx, CFy, CFz) < 0 then ConstructRoll = -ConstructRoll end
                    return ConstructRoll
                end

                local function rollAngularVelocity(x,y,z, angle, speed)
                    if x == nil then x, y, z = 0,0,1 end
                    x, y, z = normalizeVec(x,y,z)
                    local CFx, CFy, CFz = -cWOFx, -cWOFy, -cWOFz
                    if angle ~= 0 then x, y, z = rotateVec(x, y, z, rad(-angle), CFx, CFy, CFz) end
                    local RollDeg = getConstructRoll(x, y, z)
                        if (RollPID == nil) then 
                        RollPID = pid.new(0.05, 0, 1)
                        end
                    RollPID:inject(0 - RollDeg)
                    local PIDget = RollPID:get()
                    return PIDget * CFx * speed, PIDget * CFy * speed, PIDget * CFz * speed
                end

                local function pitchAngularVelocity (x,y,z, angle, speed)
                    if x == nil then x, y, z = 0,0,1 end
                    x, y, z = normalizeVec(x,y,z)
                    local CRx, CRy, CRz = cWORx, cWORy, cWORz
                    if angle ~= 0 then x, y, z = rotateVec(x, y, z, rad(-angle), CRx, CRy, CRz) end
                    local PitchDeg = getConstructPitch(x, y, z)
                        if (PitchPID == nil) then 
                        PitchPID = pid.new(0.05, 0, 1)
                        end
                    PitchPID:inject(0-PitchDeg)
                    local PIDget = PitchPID:get() --system.print(angle.." / "..PitchDeg.." / "..PIDget)
                    return PIDget * CRx * speed, PIDget * CRy * speed, PIDget * CRz * speed
                end

                local function yawAngularVelocity (x,y,z, angle, speed)
                    if x == nil then x, y, z = -1,0,0 end
                    x, y, z = normalizeVec(x,y,z)
                    local CUx, CUy, CUz = -cWOUPx, -cWOUPy, -cWOUPz
                    if angle ~= 0 then x, y, z = rotateVec(x, y, z, rad(-angle), CUx, CUy, CUz) end
                    local YawDeg = getConstructRot(x, y, z)
                        if (YawPID == nil) then 
                        YawPID = pid.new(0.05, 0, 1)
                        end
                    YawPID:inject(0 - YawDeg)
                    local PIDget = YawPID:get()
                    return PIDget * CUx * speed, PIDget * CUy * speed, PIDget * CUz * speed
                end

                local function getAAR(ox, oy, oz, nx, ny, nz, px, py, pz)
                    ox, oy, oz = normalizeVec(ox, oy, oz)
                    nx, ny, nz = normalizeVec(nx, ny, nz)
                    local ax, ay, az = cross(ox, oy, oz, nx, ny, nz)
                    local axisLen = vectorLen(ax, ay, az)
                    local angle = 0
                    ax, ay, az = normalizeVec(ax, ay, az)
                    if axisLen > 0.000001
                    then
                        angle = asin(clamp(axisLen, 0, 1))
                    else
                        ax, ay, az = px, py, pz
                    end
                    if dotVec(ox, oy, oz, nx, ny, nz) < 0
                    then
                        angle = math.pi - angle
                    end
                    return ax, ay, az, angle
                end
                TS = {}
                TS[1] = 0
                TS[2] = 0
                TS[3] = 0

                function thrustManager()
                    -- Final inputs --
                    ------------------
                    local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                    local finalRollInput = rollInput + system.getControlDeviceYawInput()
                    local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                    local finalRotationInput = finalPitchInput + finalRollInput + finalYawInput

                    -- Globals --
                    -------------
                    local cWP = construct.getWorldPosition()
                    local cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]
                    local cPCx, cPCy, cPCz = currentPlanetCenter[1], currentPlanetCenter[2], currentPlanetCenter[3]
                    local gravity = core.getWorldGravity()
                    local gx, gy, gz = gravity[1], gravity[2], gravity[3]
                    local cWOUP = construct.getWorldOrientationUp()
                    local cWOF = construct.getWorldOrientationForward()
                    local cWOR = construct.getWorldOrientationRight()
                    cWOUPx, cWOUPy, cWOUPz = cWOUP[1], cWOUP[2], cWOUP[3] --getConstructWorldOrientationUp
                    cWOFx, cWOFy, cWOFz = cWOF[1], cWOF[2], cWOF[3] --getConstructWorldOrientationForward
                    cWORx, cWORy, cWORz = cWOR[1], cWOR[2], cWOR[3] --getConstructWorldOrientationRight
                    local wVx, wVy, wVz = cWPx-cPCx, cWPy-cPCy, cWPz-cPCz  -- world vertical
                    local cAV = construct.getVelocity()
                    local cAVx, cAVy, cAVz = cAV[1], cAV[2], cAV[3]
                    local cWAV = construct.getWorldVelocity()
                    local cWAVx, cWAVy, cWAVz = cWAV[1], cWAV[2], cWAV[3]
                    local cWAVDirx, cWAVDiry, cWAVDirz = normalizeVec(cWAVx,cWAVy,cWAVz)
                    local xyzSpeedMPS = sqrt(cAVx^2+cAVy^2+cAVz^2)
                    xyzSpeedKPH = xyzSpeedMPS*3.6
                    xSpeedKPH = dotVec(cWAVx, cWAVy, cWAVz, cWORx, cWORy, cWORz)*3.6
                    ySpeedKPH = dotVec(cWAVx, cWAVy, cWAVz, cWOFx, cWOFy, cWOFz)*3.6
                    zSpeedKPH = dotVec(cWAVx, cWAVy, cWAVz, cWOUPx, cWOUPy, cWOUPz)*3.6

                    if gyro and params.Engines_Settings.gyroAxis.value == true then
                        if gyro.isActive() ~= true then gyro.activate() end
                    end

                    Ax0 = 0 --pitch angle in deg
                    Ay0 = 0 --roll angle in deg
                    if alt < params.AutoPilot_Settings.stabilisationsAltitude.value then
                        Ax0 = getConstructPitch(wVx, wVy, wVz)
                        Ay0 = getConstructRoll(wVx, wVy, wVz)
                    end

                    Az = deg(atan(xSpeedKPH, ySpeedKPH)) -- drift rot angle in deg
                    Ax = deg(atan(zSpeedKPH, ySpeedKPH)) -- deg(atan(cAVz, cAVy-1)) -- drift pitch angle in deg

                    local cWAngV = construct.getWorldAngularVelocity()
                    local cWAngVx, cWAngVy, cWAngVz = cWAngV[1], cWAngV[2], cWAngV[3]
                    local wAFAA = construct.getWorldAirFrictionAngularAcceleration()
                    local wAFAAx, wAFAAy, wAFAAz = wAFAA[1], wAFAA[2], wAFAA[3]

                    ThrottlePos = (Nav:getThrottleValue() ~= nil) and Nav:getThrottleValue() or 0

                    if Engines == true then
                        local longBx, longBy, longBz = 0, 0, 0 --longitudinal brake
                        local latBx, latBy, latBz = 0, 0, 0 --lateral brake
                        local vertBx, vertBy, vertBz = 0, 0, 0 --vertical brake
                        local brakeAx, brakeAy, brakeAz = 0, 0, 0 --brake acceleration

                        local longAx, longAy, longAz = 0, 0, 0 --longitudinal acceleration
                        local latAx, latAy, latAz = 0, 0, 0 --lateral acceleration
                        local vertAx, vertAy, vertAz = 0, 0, 0 --vertical acceleration
                        autoBrake = false
                        local strafeSpeed = unitData.maxSpeedkph

                        local targetLatSpeed = 0
                        local targetVertSpeed = 0

                        local tAVx = finalPitchInput * params.Engines_Settings.pitchSpeedFactor.value * cWORx
                                    + finalRollInput *  params.Engines_Settings.rollSpeedFactor.value * cWOFx
                                    + finalYawInput *  params.Engines_Settings.yawSpeedFactor.value * cWOUPx
                                    
                        local tAVy = finalPitchInput * params.Engines_Settings.pitchSpeedFactor.value * cWORy
                                    + finalRollInput *  params.Engines_Settings.rollSpeedFactor.value * cWOFy
                                    + finalYawInput *  params.Engines_Settings.yawSpeedFactor.value * cWOUPy
                                    
                        local tAVz = finalPitchInput * params.Engines_Settings.pitchSpeedFactor.value * cWORz
                                    + finalRollInput *  params.Engines_Settings.rollSpeedFactor.value * cWOFz
                                    + finalYawInput *  params.Engines_Settings.yawSpeedFactor.value * cWOUPz

                        -- widgets complete thrust override
                        local overRide = false
                        local nCW = #customWidgets
                        for i, widget in ipairs(customWidgets) do
                            local longSpeed, latSpeed, vertSpeed, otAVx, otAVy, otAVz = nil,nil,nil,nil,nil,nil
                            local status, err = pcall(function ()
                                longSpeed, latSpeed, vertSpeed, otAVx, otAVy, otAVz = widget:flushOverRide()
                            end)
                            if not status then
                                system.print(err)
                                --unit.exit()
                            end
                            --system.print(i..' / '..nCW)
                            if longSpeed ~= nil and targetLatSpeed ~= nil and targetVertSpeed ~= nil and tAVx ~= nil and tAVy ~= nil and tAVz ~= nil then
                                --system.print("flushing widget")
                                ThrottlePos = longSpeed
                                tAVx, tAVy, tAVz = otAVx, otAVy, otAVz
                                targetLatSpeed = latSpeed
                                targetVertSpeed = vertSpeed
                                overRide = true
                                break
                            end
                        end

                        if overRide == false then
                            --system.print('flush no override')
                            -- Atuopilot rotations
                            ----------------------
                            if params.AutoPilot_Settings.antiStall.value == true and abs(Az) > 35 and ySpeedKPH > 50 and ySpeedKPH > zSpeedKPH and inspace == 0 and abs(Ax0) < 30 and abs(Ay0) < 30 then
                                finalYawInput = finalYawInput * -0.1
                            end

                            -- Pitch and roll stabilization
                            -------------------------------
                            if alt < params.AutoPilot_Settings.stabilisationsAltitude.value then
                                if params.AutoPilot_Settings.autoRoll.value == true 
                                    and abs(Ay0 + params.Engines_Settings.rollAngleAdjustment.value*-1) > 0.25
                                    and finalRollInput == 0 and abs(Ax0) < 30
                                    and turnAssist_toggle == false
                                    and abs(Ay0 + params.Engines_Settings.rollAngleAdjustment.value) < params.AutoPilot_Settings.turnAssistRollThreshold.value then

                                    local rAVx, rAVy, rAVz = rollAngularVelocity(wVx, wVy, wVz, 0 - params.Engines_Settings.rollAngleAdjustment.value, params.Engines_Settings.rollSpeedFactor.value)
                                    tAVx = tAVx + rAVx
                                    tAVy = tAVy + rAVy
                                    tAVz = tAVz + rAVz
                                end

                                if params.AutoPilot_Settings.autoPitch.value == true 
                                    and abs(Ax0) < (params.AutoPilot_Settings.autoPitchAmplitude.value + abs(params.Engines_Settings.pitchAngleAdjustment.value))
                                    and finalPitchInput == 0 
                                    and upInput == 0 
                                    and turnAssist_toggle == false
                                    and abs(Ax0) < 45 
                                    and abs(Ay0) < 10
                                    then

                                    -- autoPitch alt Stabilization
                                    -----------------------------------
                                    --system.print("auto pitch true")
                                    if xyzSpeedKPH > 250 and params.AutoPilot_Settings.altitudeStabilisation.value == true then
                                        if VStabAltLock == nil and abs(Ax0) < 0.05 then 
                                            VStabAltLock = floor(alt)
                                            system.print("Altitude locked at: "..floor(VStabAltLock))
                                        end
                                    else VStabAltLock = nil
                                    end
                                    --system.print(VStabAdjustedAngle.." / "..system.getArkTime())
                                    local pAVx, pAVy, pAVz = pitchAngularVelocity(wVx, wVy, wVz, 0 + params.Engines_Settings.pitchAngleAdjustment.value, params.Engines_Settings.pitchSpeedFactor.value)
                                    tAVx = tAVx + pAVx
                                    tAVy = tAVy + pAVy
                                    tAVz = tAVz + pAVz
                                    --system.print(pAVx+pAVy+pAVz.." / "..system.getArkTime())
                                else if VStabAltLock ~= nil then VStabAltLock = nil system.print("Pitch stabilisation unlocked") end
                                end

                                -- Turn assist
                                --------------
                                if params.AutoPilot_Settings.turnAssist.value == true 
                                    and abs(Ay0) > params.AutoPilot_Settings.turnAssistRollThreshold.value
                                    and abs(Ax0) < params.AutoPilot_Settings.turnAssistPitchThreshold.value
                                    and finalPitchInput == 0
                                    and finalYawInput == 0
                                    and finalRollInput == 0
                                    and inspace == 0 
                                    then
                                    turnAssist_toggle = true
                                    if (TApitchPID == nil) then 
                                        TApitchPID = pid.new(0.2, 0, 10)
                                    end
                                    TApitchPID:inject(0 - Ax0)
                                    local PIDget = TApitchPID:get()
                                    local pAAx, pAAy, pAAz = PIDget * cWORx, PIDget * cWORy, PIDget * cWORz
                                    --targetAngularVelocity = cWOUP * 0.25 * sign(Ay0) * -1 + pitchAngularAcceleraion
                                    tAVx = cWOUPx * 0.25 * sign(Ay0)  + pAAx
                                    tAVy = cWOUPy * 0.25 * sign(Ay0)  + pAAy
                                    tAVz = cWOUPz * 0.25 * sign(Ay0)  + pAAz
                                else turnAssist_toggle = false
                                end
                            end

                            --Acrobatic rotations
                            ---------------------
                            if finalYawInput == 0 then
                                YNLORx, YNLORy, YNLORz = cWOFx, cWOFy, cWOFz
                            end
                            if finalPitchInput == 0 then
                                PNLOUx, PNLOUy, PNLOUz = cWOUPx, cWOUPy, cWOUPz
                            end
                            if finalRollInput == 0 then
                                RNLOUx, RNLOUy, RNLOUz = cWOUPx, cWOUPy, cWOUPz
                            end
                            if DTK == "forward"
                                or DTK == "backward"
                                or DTK == "yawleft"
                                or DTK == "yawright"
                                or DTK == "right"
                                or DTK == "left"
                                then
                                -- Shift + Yaw Auto Rotation
                                if finalYawInput ~= 0 and finalPitchInput == 0 and finalRollInput == 0 then
                                    tAVx, tAVy, tAVz = yawAngularVelocity(YNLORx, YNLORy, YNLORz, params.KeyBind_Params.acrobatic_RotAngle.value * finalYawInput, params.Engines_Settings.yawSpeedFactor.value)

                                -- Shift + Pitch Auto Rotation
                                elseif finalPitchInput ~= 0 and finalYawInput == 0 and finalRollInput == 0 then
                                    tAVx, tAVy, tAVz = pitchAngularVelocity(PNLOUx, PNLOUy, PNLOUz, params.KeyBind_Params.acrobatic_PitchAngle.value * finalPitchInput *-1, params.Engines_Settings.pitchSpeedFactor.value)

                                -- Shift + Roll Auto Rotation
                                elseif finalRollInput ~= 0 and finalYawInput == 0 and finalPitchInput == 0 then
                                    tAVx, tAVy, tAVz = rollAngularVelocity (RNLOUx, RNLOUy, RNLOUz, params.KeyBind_Params.acrobatic_RollAngle.value * finalRollInput, params.Engines_Settings.rollSpeedFactor.value)
                                end
                            end

                            -- BackBurn module
                            ------------------
                            if finalYawInput == 0
                                and finalPitchInput == 0
                                and finalRollInput == 0
                                and (DTK == "brake" or BackBurnToggle == true)
                                then
                            --Horizontal back burn
                            ----------------------
                                local SBBMinimumSpeed = 1000
                                if Nav:getMasterMode() ~= "CRUISE" then
                                    PreviousMasterMode = "TRAVEL"
                                    Nav:setMasterMode("CRUISE")
                                end
                                if xyzSpeedKPH > SBBMinimumSpeed and inspace == 1 and VerticalBackBurnToggle == false then 
                                    BackBurnToggle = true
                                    if Az == 0 then
                                        finalYawInput = 1
                                    else
                                        local axx, axy, axz, an = getAAR(-1*cWOFx, -1*cWOFy, -1*cWOFz, cWAVx, cWAVy, cWAVz, 0, 0, 0)
                                        if (BBPID == nil) then
                                            BBPID = pid.new(0.2, 0, 10)
                                        end
                                        BBPID:inject(an)
                                        local PIDget = BBPID:get()
                                        tAVx = axx * PIDget
                                        tAVy = axy * PIDget
                                        tAVz = axz * PIDget
                                        ThrottlePos = 0
                                        oWVx, oWVy, oWVz = cWAVx, cWAVy, cWAVz
                                    end
                                elseif (DTK == "" and BackBurnToggle == true) or (xyzSpeedKPH < SBBMinimumSpeed and BackBurnToggle == true) then
                                    local axx, axy, axz, an = getAAR(cWOFx, cWOFy, cWOFz, oWVx, oWVy, oWVz, 0,0,0)
                                    if (BBPID == nil) then
                                        BBPID = pid.new(0.2, 0, 10)
                                    end
                                    BBPID:inject(an)
                                    local PIDget = BBPID:get()
                                    tAVx = axx * PIDget
                                    tAVy = axy * PIDget
                                    tAVz = axz * PIDget
                                    ThrottlePos = 0
                            --Vertical back burn
                            ---------------------
                                elseif xyzSpeedKPH < SBBMinimumSpeed and alt < 20000 and alt ~= 0 and BackBurnToggle == false then
                                    PreviousMasterMode = nil
                                    if abs(Ay0) > 1 and VerticalBackBurnToggle == false then
                                        tAVx, tAVy, tAVz = rollAngularVelocity(wVx, wVy, wVz, 0, params.Engines_Settings.rollSpeedFactor.value)
                                    else
                                        VerticalBackBurnToggle = true
                                        tAVx, tAVy, tAVz = pitchAngularVelocity(wVx, wVy, wVz, 90, params.Engines_Settings.pitchSpeedFactor.value)
                                        ThrottlePos = 0
                                        local currentRotDeg = getConstructRot(cWOFx, cWOFy, cWOFz)
                                        if (ABBRotPID == nil) then
                                            ABBRotPID = pid.new(0.2, 0, 10)
                                        end
                                        ABBRotPID:inject(-90 - currentRotDeg)
                                        if Ax0 > 60 then
                                            local PIDget = ABBRotPID:get()
                                            tAVx = tAVx + PIDget * cWOUPx *-1
                                            tAVy = tAVy + PIDget * cWOUPy *-1
                                            tAVz = tAVz + PIDget * cWOUPz *-1
                                        end
                                        if Ax0 < 85 then
                                            ThrottlePos = unitData.maxSpeedkph
                                        end
                                    end
                                end
                            elseif (finalYawInput ~= 0 or finalPitchInput ~= 0 or finalRollInput ~= 0 or DTK ~= "brake")
                                and (BackBurnToggle == true or VerticalBackBurnToggle == true)
                                then
                                BackBurnToggle = false
                                VerticalBackBurnToggle = false
                                if PreviousMasterMode == "TRAVEL" then Nav:setMasterMode("TRAVEL") end
                                ThrottlePos = 0
                                Nav:resetThrottleValue()
                            end

                            if inspace == 1  --prograde
                                and finalRotationInput == 0
                                and BackBurnToggle == false
                                and params.AutoPilot_Settings.autoProGrade.value == true
                                and xyzSpeedKPH > 200
                                then
                                local axx, axy, axz, an = getAAR(cWOFx, cWOFy, cWOFz, cWAVx, cWAVy, cWAVz, 0, 0, 0)
                                if (APGPID == nil) then
                                    APGPID = pid.new(0.05, 0, 1)
                                end
                                APGPID:inject(an)
                                local PIDget = APGPID:get()
                                tAVx = axx * PIDget
                                tAVy = axy * PIDget
                                tAVz = axz * PIDget
                            end

                            if inspace == 0 and (MasterMode == "PARKING" or MasterMode == "SPORT") then
                            --Roll stabilisation
                                local autoRollRollThreshold = 0.1
                                if abs(Ay0) > autoRollRollThreshold then
                                    local rAVx, rAVy, rAVz = rollAngularVelocity(wVx, wVy, wVz, 0 - params.Engines_Settings.rollAngleAdjustment.value, 10)
                                    tAVx = tAVx + rAVx
                                    tAVy = tAVy + rAVy
                                    tAVz = tAVz + rAVz
                                end

                            --Pitch stabilisation
                                local autoPitchAmplitude = 90
                                if abs(Ax0) < autoPitchAmplitude and MasterMode == "PARKING" then
                                    local pAVx, pAVy, pAVz = pitchAngularVelocity(wVx, wVy, wVz, 0 + params.Engines_Settings.pitchAngleAdjustment.value, 10)
                                    tAVx = tAVx + pAVx
                                    tAVy = tAVy + pAVy
                                    tAVz = tAVz + pAVz
                                end
                            end

                            ------------------------------
                            ------ THRUST COMPOSER  ------
                            ------------------------------

                            -- Longitudinal Translation
                            if MasterMode == "PARKING" and SHIFT == false then 
                                strafeSpeed = params.KeyBind_Params.parkingMaxSpeed.value
                                ThrottlePos = forwardInput * params.KeyBind_Params.parkingMaxSpeed.value
                            elseif MasterMode == "PARKING" and SHIFT == true then
                                ThrottlePos = forwardInput * unitData.maxSpeedkph
                            end

                            --if MasterMode == "TRAVEL" or MasterMode == "SPORT" then
                            --    if inspace == 0 and params.Engines_Settings.amtoMaxSpeed.value > 0 and xyzSpeedKPH > params.Engines_Settings.amtoMaxSpeed.value - 5 then
                            --        ThrottlePos = params.Engines_Settings.amtoMaxSpeed.value
                            --    end
                            --end

                            if params.AutoPilot_Settings.altitudeStabilisation.value == true and params.AutoPilot_Settings.autoOrbitSpeed.value == true and inspace == 1 and ThrottlePos ~= 0 and VStabAltLock ~= nil then
                                ThrottlePos = sqrt(currentPlanetGM / (alt + currentPlanetRadius))*3.6
                            end

                            if xyzSpeedKPH > 10000 then
                                if strafeInput == 0 then
                                    targetLatSpeed = xSpeedKPH
                                end
                                if upInput == 0 then
                                    targetVertSpeed = zSpeedKPH
                                end
                            else
                                targetLatSpeed = strafeInput*strafeSpeed
                                targetVertSpeed = VStabAltLock ~= nil and VStabAltLock-alt or upInput*strafeSpeed
                            end
                        end

                        if brakeInput == 1 or (inspace == 0 and xyzSpeedKPH > params.Engines_Settings.amtoMaxSpeed.value) then
                            local LBF = params.Engines_Settings.longitudinalBrakeFactor.value
                            local lBF = params.Engines_Settings.lateralBrakeFactor.value
                            local vBF = params.Engines_Settings.verticalBrakeFactor.value
                            longBx, longBy, longBz = Nav:composeBrakeAcceleration("longitudinal",0)
                            latBx, latBy, latBz = Nav:composeBrakeAcceleration("lateral",0)
                            vertBx, vertBy, vertBz = Nav:composeBrakeAcceleration("vertical",0)
                            brakeAx, brakeAy, brakeAz = longBx*LBF + latBx*lBF + vertBx*vBF,
                                                        longBy*LBF + latBy*lBF + vertBy*vBF,
                                                        longBz*LBF + latBz*lBF + vertBz*vBF
                            autoBrake = true
                        else
                            local targetLongSpeed = ThrottlePos
                            if (MasterMode == "TRAVEL" or MasterMode == "SPORT") and overRide == false then
                                if xyzSpeedKPH < params.AutoPilot_Settings.autoBrakeSpeed.value and params.AutoPilot_Settings.autoBrakeSpeed.value > 0 and ThrottlePos == 0 then
                                    targetLongSpeed = 0
                                    autoBrake = true
                                else
                                    targetLongSpeed = ySpeedKPH
                                end
                            else
                                if ThrottlePos == 0 then
                                    targetLongSpeed = 0
                                    autoBrake = true
                                elseif abs(ySpeedKPH) > abs(ThrottlePos) or sign(ySpeedKPH) ~= sign(ThrottlePos) then
                                    targetLongSpeed = ThrottlePos
                                    autoBrake = true
                                end
                            end
                            if abs(ySpeedKPH) > abs(targetLongSpeed) or sign(ySpeedKPH) ~= sign(targetLongSpeed) then autoBrake = true end
                            --system.print("long brake "..targetLongSpeed)
                            longBx, longBy, longBz = Nav:composeBrakeAcceleration("longitudinal",targetLongSpeed)

                            local SBF = inspace == 1 and params.Engines_Settings.spaceBrakeFactor.value or 1
                            local LBF = params.Engines_Settings.longitudinalBrakeFactor.value
                            local lBF = params.Engines_Settings.lateralBrakeFactor.value
                            local vBF = params.Engines_Settings.verticalBrakeFactor.value

                            if overRide == true then
                                longBx, longBy, longBz = Nav:composeBrakeAcceleration("longitudinal",ThrottlePos)
                                latBx, latBy, latBz = Nav:composeBrakeAcceleration("lateral",targetLatSpeed)
                                vertBx, vertBy, vertBz = Nav:composeBrakeAcceleration("vertical",targetVertSpeed)
                                brakeAx, brakeAy, brakeAz = longBx*LBF*SBF + latBx*lBF*SBF + vertBx*vBF*SBF,
                                                            longBy*LBF*SBF + latBy*lBF*SBF + vertBy*vBF*SBF,
                                                            longBz*LBF*SBF + latBz*lBF*SBF + vertBz*vBF*SBF
                            else
                                if MasterMode == "CRUISE" and params.AutoPilot_Settings.inertiaAutoBrake.value == false then
                                    brakeAx, brakeAy, brakeAz = longBx*LBF*SBF, longBy*LBF*SBF, longBz*LBF*SBF
                                elseif params.AutoPilot_Settings.inertiaAutoBrake.value == true then
                                    local alignmentFactor = inspace == 0 and params.AutoPilot_Settings.atmoAntiDriftFactor.value or params.AutoPilot_Settings.spaceAntiDriftFactor.value
                                    if 180 - abs(Az) < 180 * alignmentFactor then
                                        latBx, latBy, latBz = Nav:composeBrakeAcceleration("lateral",targetLatSpeed)
                                        autoBrake = true
                                        --system.print("lat brake")
                                    end
                                    if 180 - abs(Ax) < 180 * alignmentFactor then
                                        vertBx, vertBy, vertBz = Nav:composeBrakeAcceleration("vertical",targetVertSpeed)
                                        autoBrake = true
                                        --system.print("vert brake "..zSpeedKPH)
                                    end
                                    brakeAx, brakeAy, brakeAz = longBx*LBF*SBF + latBx*lBF*SBF*(1+abs(Az/180)) + vertBx*vBF*SBF*(1+abs(Ax/180)),
                                                                longBy*LBF*SBF + latBy*lBF*SBF*(1+abs(Az/180)) + vertBy*vBF*SBF*(1+abs(Ax/180)),
                                                                longBz*LBF*SBF + latBz*lBF*SBF*(1+abs(Az/180)) + vertBz*vBF*SBF*(1+abs(Ax/180))
                                end
                            end
                        end

                        -- Thrust Composer
                        if (MasterMode == "TRAVEL" or MasterMode == "SPORT") and overRide == false then
                            longAx, longAy, longAz = Nav:composeAccelerationFromThrottle()
                        else
                            longAx, longAy, longAz = Nav:composeAccelerationFromTargetSpeed("longitudinal",ThrottlePos)
                        end
                        latAx, latAy, latAz = Nav:composeAccelerationFromTargetSpeed("lateral",targetLatSpeed)
                        vertAx, vertAy, vertAz = Nav:composeAccelerationFromTargetSpeed("vertical",targetVertSpeed)
                        TS[1] = targetLatSpeed
                        TS[2] = ThrottlePos
                        TS[3] = targetVertSpeed

                        if ThrottlePos == 0 and inspace == 1 and upInput == 0 and strafeInput == 0 and xyzSpeedKPH < 5 then
                            longAx, longAy, longAz = 0, 0, 0
                            latAx, latAy, latAz = 0, 0, 0
                            vertAx, vertAy, vertAz = 0, 0, 0
                        end

                        -- Rotation
                        local angAccelx = tAVx*params.Engines_Settings.angularVelocityCounterFactor.value - cWAngVx*params.Engines_Settings.angularVelocityCounterFactor.value - wAFAAx
                        local angAccely = tAVy*params.Engines_Settings.angularVelocityCounterFactor.value - cWAngVy*params.Engines_Settings.angularVelocityCounterFactor.value - wAFAAy
                        local angAccelz = tAVz*params.Engines_Settings.angularVelocityCounterFactor.value - cWAngVz*params.Engines_Settings.angularVelocityCounterFactor.value - wAFAAz

                        ------------------------------
                        ------ THRUST COMMANDS -------
                        ------------------------------
                        local longitudinalEngineTags = ''
                        local verticalStrafeEngineTags = ''
                        local lateralStrafeEngineTags = 'thrust analog lateral'

                        if params.Engines_Settings.ecoMode.value == true and EnginesUpdate == false then
                            longitudinalEngineTags = 'longitudinal eco'
                            verticalStrafeEngineTags = 'airfoil,vertical space_engine eco,vertical atmospheric_engine eco'
                        elseif params.Engines_Settings.ecoMode.value == false and EnginesUpdate == false then
                            longitudinalEngineTags = 'longitudinal'
                            verticalStrafeEngineTags = 'airfoil,vertical space_engine,vertical atmospheric_engine'
                        else unit.setEngineCommand('longitudinal', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                            unit.setEngineCommand('longitudinal eco', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                            unit.setEngineCommand('thrust analog vertical', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                            unit.setEngineCommand('hover_engine', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                            unit.setEngineCommand('hover_engine eco', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                            unit.setEngineCommand('booster_engine', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                            unit.setEngineCommand('booster_engine eco', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                            EnginesUpdate = false
                        end

                        if params.Engines_Settings.hoverThrust.value == "ON" then
                            if params.Engines_Settings.ecoMode.value == true and HoverUpdate == false then
                                verticalStrafeEngineTags = verticalStrafeEngineTags..',hover_engine eco'
                            elseif params.Engines_Settings.ecoMode.value == false and HoverUpdate == false then
                                verticalStrafeEngineTags = verticalStrafeEngineTags..',hover_engine'
                            else unit.setEngineCommand('hover_engine', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                                unit.setEngineCommand('hover_engine eco', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                                HoverUpdate = false
                            end
                        else unit.setEngineCommand('hover_engine', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                            unit.setEngineCommand('hover_engine eco', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                        end
                        if (params.Engines_Settings.vboosterThrust.value == "AUTO" and unit.getAtmosphereDensity() < 0.75) or params.Engines_Settings.vboosterThrust.value == "ON"then
                            if params.Engines_Settings.ecoMode.value == true and VboosterUpdate == false then
                                verticalStrafeEngineTags = verticalStrafeEngineTags..',booster_engine eco'
                            elseif params.Engines_Settings.ecoMode.value == false and VboosterUpdate == false then
                                verticalStrafeEngineTags = verticalStrafeEngineTags..',booster_engine'
                            else unit.setEngineCommand('booster_engine', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                                unit.setEngineCommand('booster_engine eco', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                                VboosterUpdate = false
                            end
                        else unit.setEngineCommand('booster_engine', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                            unit.setEngineCommand('booster_engine eco', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                        end

                        unit.setEngineCommand('torque', {0,0,0}, {angAccelx, angAccely, angAccelz}, 1, 1, '', '', '', 1)

                        local fAx, fAy, fAz = longAx+latAx+vertAx, longAy+latAy+vertAy, longAz+latAz+vertAz
                        local fTags = longitudinalEngineTags..','..lateralStrafeEngineTags..','..verticalStrafeEngineTags
                        unit.setEngineCommand(fTags, {fAx, fAy, fAz}, {0,0,0}, 0, 1, 'airfoil', 'hover_engine', 'eco', 0)

                        --unit.setEngineCommand(longitudinalEngineTags, {longAx, longAy, longAz}, {0,0,0}, 0, 1, 'airfoil', 'ground', 'eco', 0.0001)
                        --unit.setEngineCommand(lateralStrafeEngineTags, {latAx, latAy, latAz}, {0,0,0}, 0, 1, 'airfoil', 'ground', 'eco', 0.0001)
                        --unit.setEngineCommand(verticalStrafeEngineTags, {vertAx, vertAy, vertAz}, {0,0,0}, 0, 1, 'airfoil', 'ground', 'eco', 0.0001)

                        unit.setEngineCommand('brake', {brakeAx, brakeAy, brakeAz}, {0,0,0}, 0, 1, '', '', '', 1)

                    else
                        unit.setEngineCommand('torque', {0,0,0}, {0, 0, 0}, 1, 1, '', '', '', 1)
                        local longBx, longBy, longBz = Nav:composeBrakeAcceleration("longitudinal",0)
                        local latBx, latBy, latBz = Nav:composeBrakeAcceleration("lateral",0)
                        local vertBx, vertBy, vertBz = Nav:composeBrakeAcceleration("vertical",0)
                        local brakeAx, brakeAy, brakeAz = longBx + latBx + vertBx,
                                                            longBy + latBy + vertBy,
                                                            longBz + latBz + vertBz
                        unit.setEngineCommand('brake', {brakeAx, brakeAy, brakeAz}, {0,0,0}, 0, 1, '', '', '', 1)
                        unit.setEngineCommand('all thrust', {0,0,0}, {0,0,0}, 0, 1, '', '', '', 1)
                    end
                end