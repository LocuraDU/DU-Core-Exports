# This is a file describing a standard autoconfiguration, do not edit.
# See custom/sample.conf for a more generic template and explanation on the syntax.

name: WT Pilot v0.7.0.beta7-SA
pvp: true

slots:
    core:
        class: CoreUnit
    shield:
        class: ShieldGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    spacefueltank:
        class: SpaceFuelContainer
        select: manual
    atmofueltank:
        class: AtmoFuelContainer
        select: manual
    rocketfueltank:
        class: RocketFuelContainer
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    db:
        class: DatabankUnit
        select: manual

handlers:
    unit:
        onStart:
            lua: |
                showARCompass = true --export
                holdBrakeOnInit = true --export
                autoRes = true --export
                autoResMode = 1 --export
                autoResMinHitCount = 0 --export
                shieldDebugLog = false --export
                maxAngularSpeed = 0 --export
                brakeToggle = false --export
                burnLimiter = true --export
                burnLimiterSpeed = 0 --export
                defaultHoverAltitude = 4 --export
                showGuiOutline = true --export
                airfoilTorque = false --export
                showAtmoRelatedButtons = true --export
                showShieldRelatedButtons = true --export
                
                Nav = Navigator.new(self.system, self.core, self.unit)
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                dampingOff = 0
                autoLevel = 0
                altitudeHold = nil
                groundStabilization = true
                screenHeight = system.getScreenHeight()
                screenWidth = system.getScreenWidth()
                brakeInput = 0
                landingMode = false
                manualVerticalInput = false

                if holdBrakeOnInit and vec3(construct.getWorldVelocity()):len()<100 then
                    brakeInput = 1
                    groundStabilization = false
                    local curAlt = core.getAltitude()
                    if curAlt ~= nil and curAlt ~= 0 then
                        landingMode = true
                        unit.deployLandingGears()
                    end
                else
                    unit.retractLandingGears()
                end

                function shieldClass(a,b,c,d,e,f,g)if d==nil then d=true end;if g==nil then g=false end;local h={}local i={MAX=0,MAX2=1,RATIO=2}e=e or i.MAX2;f=f or 0;local j=nil;local k={0,0,0,0}local l=c.getResistances()local m={0,0,0,0}local n=1;local o=30;local p={}for q=1,o do p[#p+1]={0,0,0,0}end;local r={0,0,0,0}local s=0;local t=0;local u=0.0001;local v={}for q=1,120 do v[q]=c.getShieldHitpoints()/c.getMaxShieldHitpoints()end;local w={"AM","EM","KI","TH"}local function x(y,z)z=z or 1;local A=0;for q=1,#y do A=A+y[q]end;if A==0 then return{0,0,0,0}end;local B={}for q=1,#y do B[q]=y[q]/A*z end;return B end;local function C(D)local E={0,0,0,0}for F,G in ipairs(D)do for q,H in ipairs(G)do E[q]=E[q]+H end end;return E end;local function I(J)local K={}local L=#J;for q=1,L do K[q]=q end;local M=false;repeat M=false;for q=2,L do if J[K[q-1]]<J[K[q]]then K[q-1],K[q]=K[q],K[q-1]M=true end end until not M;return table.unpack(K)end;local function N(G,O)local P,Q,R,S=I(G)if G[P]>O*3 then G[P]=G[P]-O*3 end;G[Q]=G[Q]G[R]=G[R]+O*1;G[S]=G[S]+O*2 end;local function T(U)local V={}for q=1,#U do local W=U[q]if not V[W]then V[W]=true else return true end end;return false end;local function X(U,Y)for q=1,#U do if math.abs(U[q]-Y[q])>u/10 then return false end end;return true end;local function Z(_)local a0={0,0,0,0}local a1=I(_)a0[a1]=1;return a0 end;local function a2(_)local a0={0,0,0,0}local a3,a4=I(_)a0[a3]=1;if _[a4]>1 and _[a4]/_[a3]>0.3 then a0[a4]=1 end;return a0 end;local function a5(a6)local a7=x(a6,c.getResistancesPool())N(a7,u)if X(a7,l)or c.getResistancesCooldown()>0 then return end;local a8=c.setResistances(table.unpack(a7))if not a8 then a.print('wtShield ERROR (code: 4) ('..table.concat(a7,",")..')')else l=a7;a.print('Successfuly applied resistances ('..table.concat(a7,",")..')')end end;local function a9()if c.getResistancesCooldown()~=0 or X(r,{0,0,0,0})then return end;local a0;if e==i.MAX then a0=Z(r)elseif e==i.MAX2 then a0=a2(r)elseif e==i.RATIO then a0=k else a0={0.25,0.25,0.25,0.25}a.print('wtShield ERROR (code: 3)')end;a5(a0)end;function h.onDown()c.startVenting()end;function h.onVentingEvent(aa,ab)if not aa then c.activate()end end;function h.toogleAutoRes()d=not d;if d then j=nil end;a.print('AutoRes '..(d and'ON'or'OFF'))end;function h.manualOverride(a7)d=false;j=a7;a.print('AutoRes OFF, setting manual res to '..table.concat(a7,", "))end;function h.onAbsorb(ac,ad)local ae=0.9-ac/ad;local af;for q=1,#l do if math.abs(ae-l[q])<u/10 then if not af then af=q else a.print('wtShield ERROR (code: 1)')return end end end;if not af then a.print('wtShield ERROR (code: 2)')return end;if g then a.print('HIT '..w[af]..' '..ad)end;local ag=a.getUtcTime()t=t+1;m[af]=ag;p[#p][af]=p[#p][af]+ad;r=C(p)k=x(r)end;function h.onTick()local ag=a.getUtcTime()if d and t>0 and(f==0 or t>=f)and ag-math.max(table.unpack(m))<o*n*0.8 then a9()end;if j then a5(j)end;s=t;table.remove(p,1)p[#p+1]={0,0,0,0}r=C(p)k=x(r)if X(r,{0,0,0,0})then t=0 end;table.remove(v,1)v[120]=c.getShieldHitpoints()/c.getMaxShieldHitpoints()end;function h.getStressRatio()return k end;function h.getLastHitTimes()return m end;function h.getShieldHistory()return v end;function h.getAutoRes()return d end;function h.getAutoResModeStr()if not d then return'OFF'elseif e==0 then return'MAX'elseif e==1 then return'MAX2'elseif e==2 then return'RATIO'end end;a.print('currentRes: '..table.concat(l,", "))if d then a5({1,1,1,1})elseif T(l)then a.print('found equal resists, unequalizing...')a5(l)end;b.setTimer('wtShieldTick',n)return h end
                function audioManagerClass(a)local b={}local c={}function b.onUpdate()if a.isPlayingSound()then return end;if c[1]==nil then return end;a.playSound(c[1])table.remove(c,1)end;function b.playSound(d)table.insert(c,d)end;return b end;function monitorClass(a,e,f,g)local h={}local i;local j=audioManagerClass(a)local k=0.3;local l=0.1;local m=0.4;local n=0.1;local o=0.4;local p=0.1;local q="wthud/fuelLow.mp3"local r="wthud/fuelCritical.mp3"local s="wthud/shieldLow.mp3"local t="wthud/shieldCritical.mp3"local u="wthud/ccsLow.mp3"local v="wthud/ccsCritical.mp3"local w="wthud/targetAccelerating.mp3"local x="wthud/targetBraking.mp3"local function y()local z={}if sheild~=nil then z.shieldHpRatio=f.getShieldHitpoints()/f.getMaxShieldHitpoints()end;z.stressHpRatio=e.getMaxCoreStress()>0 and e.getCoreStress()/e.getMaxCoreStress()or 0;z.fuelPercent=g~=nil and g.getItemsVolume()/g.getMaxVolume()or 0;return z end;function h.onUpdate()local z=y()if f~=nil then if(i.shieldHpRatio or 0)>m and z.shieldHpRatio<=m then j.playSound(s)end;if(i.shieldHpRatio or 0)>n and z.shieldHpRatio<=n then j.playSound(t)end end;if i.stressHpRatio>o and z.stressHpRatio<=o then j.playSound(u)end;if i.stressHpRatio>p and z.stressHpRatio<=p then j.playSound(v)end;if i.fuelPercent>k and z.fuelPercent<=k then j.playSound(q)end;if i.fuelPercent>l and z.fuelPercent<=l then j.playSound(r)end;i=z;j.onUpdate()end;i=y()return h end

                if shield ~= nil then
                    wtShield = shieldClass(system, unit, shield, autoRes, autoResMode, autoResMinHitCount, shieldDebugLog)
                end
                wtMonitor = monitorClass(system, core, shield, spacefueltank_1)
                
                unit.hideWidget()
                if warpdrive ~= nil then warpdrive.show() end
                system.showHelper(0)
                system.showScreen(1)
                
                function PilotHUDClass(a,b,c,d,e,f,g,h,i,j,l,m)local n={}local o="black"local p="#b6dbe7"local q="1"local r=[[
                <style>
                .ui {
                    color: ]]..p..[[;
                    font: Inconsolata, monospace;
                    font-family: monospace;
                    font-size: 0.75em;
                    font-weight: bold;
                    opacity: ]]..q..[[;
                    white-space: pre;
                    text-shadow: -1px -1px 0 ]]..o..[[, 1px -1px 0 ]]..o..[[, -1px 1px 0 ]]..o..[[, 1px 1px 0 ]]..o..[[;
                }
                .blue {
                    color: #5BD8FF;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .red {
                    color: #FF5B72;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .orange {
                    color: #fc934f;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .yellow {
                    color: #fce94f;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .green {
                    color: #72ff5b;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                </style>]]local s=0;local t=0;local u=nil;local v=nil;local w=require('atlas')local function x(y)local z=" *([+-]?%d+%.?%d*e?[+-]?%d*)"local A="::pos{"..z..","..z..","..z..","..z..","..z.."}"local B,C,D,E,F=string.match(y,A)if B==nil or C==nil or D==nil or E==nil or F==nil then a.print("Error converting POS")return vec3()end;if B=="0"and C=="0"then return vec3(D,E,F)end;E=math.rad(E)D=math.rad(D)local G=w[tonumber(B)][tonumber(C)]local H=math.cos(D)local I=vec3(H*math.cos(E),H*math.sin(E),math.sin(D))return vec3(G.center)+(G.radius+F)*I end;local function J(K)K=vec3(K)return"::pos{0,0,"..K.x..","..K.y..","..K.z.."}"end;local L={}local function M()if db_1~=nil and db_1.hasKey('AR')then local N=0;for k,O in pairs(json.decode(db_1.getStringValue('AR')))do L[k]=O;N=N+1 end;a.print('Loaded '..N..' AR marks from databank')end end;local function P()if db_1~=nil then db_1.setStringValue('AR',json.encode(L))a.print('saved AR marks to databank')end end;local function Q(K,R,S)L[R]={x(K),S}P()end;M()local T={}for U,V in pairs(w[0])do table.insert(T,V)end;local function W(X)X=X or 0;if X<1000 then return math.ceil(X)..'m'elseif X<1000*10 then return string.format("%.2fkm",X/1000)elseif X<1000*100 then return string.format("%.1fkm",X/1000)elseif X<1000*200*10 then return string.format("%.2fsu",X/1000/200)elseif X<1000*200*100 then return string.format("%.1fsu",X/1000/200)else return math.ceil(X/1000/200)..'su'end end;local function Y(K)local function Z(_,a0,a1)local a2=(a0-_):normalize()local a3=(a1-_):dot(a2)/a2:dot(a2)if a3<=0 then return a1:dist(_),_ elseif a3>=(a0-_):len()then return a1:dist(a0),a0 end;local a4=_+a3*a2;local a5=a4:dist(a1)return a5,a4 end;local a6=vec3({13771471,7435803,-128971})local a7=18000000;local a8=500000;local a9=math.huge;local aa=math.huge;local ab=math.huge;local ac=math.huge;local ad,ae,af,ag,ah;local ai=a6+(K-a6):normalize()*a7;local ac=K:dist(ai)local aj=K:dist(a6)>a7;for ak=1,#T do body1=T[ak]if body1.type[1]~="Asteroid"then local X=K:dist(vec3(body1.center))if X<a9 then a9=X;ad=body1 end;if body1.type[1]=="Planet"or body1.isSanctuary==true then if X<aa then aa=X;ae=body1 end;for al=ak+1,#T do body2=T[al]if body2.type[1]=="Planet"or body2.isSanctuary==true then local am,an=Z(vec3(body1.center),vec3(body2.center),K)if am<ab then ab=am;af=body1;ag=body2;ah=an end end end end end end;if aj then local ao=vec3(ad.center)+(K-vec3(ad.center)):normalize()*a8;local ap=(K-ao):len()if ap<ac then ac=ap;aj=(K-vec3(ad.center)):len()>a8;ai=ao end end;return{closestBody={body=ad,dist=a9},closestPipe={body1=af,body2=ag,dist=ab,point=ah},isPvP=aj,PvpBorderDist=ac,PvpBorderPos=ai}end;u=Y(vec3(d.getWorldPosition()))local aq=0;function n.onText(ar)ar=string.lower(ar)if ar:match('^addar%s(::pos.+})%s(.+)')~=nil then local K,R,S=ar:match('^addar%s(::pos.+})%s(.+)%s?(#%x?%x?%x?%x?%x?%x?)')if K==nil then K,R=ar:match('^addar%s(::pos.+})%s(.+)')S='#76f9e0'end;Q(K,R,S)elseif ar:match('^clearar')~=nil then local R=ar:match('^clearar%s(.+)')if R==nil then L={}else L[R]=nil end;P()elseif ar:match('^info')~=nil then local K=ar:match('^info%s(::pos.+})')local as=Y(x(K))a.print('Info on '..K)a.print('isPvP: '..(as.isPvP and'true'or'false'))a.print('Border ('..W(as.PvpBorderDist)..'): '..J(as.PvpBorderPos))a.print('closest Pipe ('..W(as.closestPipe.dist)..'): '..as.closestPipe.body1.name[1]..' - '..as.closestPipe.body2.name[1])a.print('closest Body ('..W(as.closestBody.dist)..'): '..as.closestBody.body.name[1])elseif ar:match('^helper$')~=nil then aq=1-aq;a.showHelper(aq)end end;local function at(au,av,G)local K=vec3(au)local O=vec3(av)local aw=vec3(G.center)local a3=K-aw;local ax=O:len2()local ay=a3:len()local az=G.GM;local aA=((ax-az/ay)*a3-a3:dot(O)*O)/az;local aB=az/(2*az/ay-ax)local aC=aA:len()local aD=aA:normalize()local aE=aB*(1-aC)local aF=aB*(1+aC)local aG=G.radius;local aH=aE*aD+aw;local aI=aE-aG;local aJ=nil;local aK=aF-aG;if aC<1 then aJ=-aF*aD+aw end;local aL=nil;if aJ~=nil then aL=2*math.pi*math.sqrt(aB^3/az)end;local aM=math.acos(aA:dot(a3)/(aC*ay))if a3:dot(O)<0 then aM=-(aM-2*math.pi)end;local aN=math.acos((math.cos(aM)+aC)/(1+aC*math.cos(aM)))local aO=aN;if aO<0 then aO=aO+2*math.pi end;local aP=aO-aC*math.sin(aO)local aQ=0;local aR=0;local aS=0;if aL~=nil then aQ=aP/(2*math.pi/aL)aR=aL-aQ;aS=aR+aL/2;if aM-math.pi>0 then aR=aQ;aS=aR+aL/2 end;if aS>aL then aS=aS-aL end else aR=(K-aH):len()/vec3(d.getVelocity()):len()end;return{aH,aI,aJ,aK,aR,aS}end;local aT=a.getScreenHeight()local aU=a.getScreenWidth()local function aV(aw,aW)local aX={}local aY=vec3(0,0,1)local aZ=vec3(0,1,0)local aD=vec3(0,0,1)aX["00"]=aw+aD*aW;aX["50"]=aw-aD*aW;for ak=1,4 do aD=aD:rotate(math.pi/180*36,aZ)for al=0,9 do aD=aD:rotate(math.pi/180*36,aY)aX[''..ak..al]=aw+aD*aW end end;return aX end;local function a_(b0)return math.floor(b0+0.5)end;local function b1(b2,b3,S,b4,b5)local b6=400;local b7=c.getPointOnScreen({b3.x,b3.y,b3.z})if b7[3]<=0 then return''end;local b0=b7[1]*aU-b6/2;local b8=b7[2]*aT-b6/2;svg=[[<svg viewBox="0 0 500 500" class="point" style="left:]]..b0 ..[[px;top:]]..b8 ..[[px;position:absolute;width:]]..b6 ..[[px;height:]]..b6 ..[[px">]]if b2=='circle'then svg=svg..[[<circle cx="250" cy="250" r="10" opacity="0.75" stroke="]]..S..[[" stroke-width="2" fill="none"/>]]elseif b2=='cross'then svg=svg..[[<line x1="250" y1="242" x2="250" y2="258" opacity="0.75"  stroke="]]..S..[[" stroke-width="2"/><line x1="242" y1="250" x2="258" y2="250" opacity="0.5"  stroke="]]..S..[[" stroke-width="2"/>]]elseif b2=='triangle'then svg=svg..[[<line x1="242" y1="242" x2="250" y2="258" opacity="0.75"  stroke="]]..S..[[" stroke-width="2"/><line x1="258" y1="242" x2="250" y2="258" opacity="0.75"  stroke="]]..S..[[" stroke-width="2"/><line x1="242" y1="242" x2="258" y2="242" opacity="0.75"  stroke="]]..S..[[" stroke-width="2"/>]]elseif b2=='box'then svg=svg..[[<rect x="237" y="237" width="26" height="26" style="fill: rgba(0,0,0,0); stroke: ]]..S..[[; stroke-width: 2"/>]]end;svg=svg..[[<text x="50%" y ="47%" style="text-anchor: middle; stroke:#000; fill: ]]..S..[[; font-family: Arial, sans-serif; font-size: 14px;">]]..(b4 or'')..[[</text><text x="50%" y ="55%" style="text-anchor: middle; stroke:#000; fill: ]]..S..[[; font-family: Arial, sans-serif; font-size: 14px;">]]..(b5 or'')..[[</text></svg>]]return svg end;local function b9(b3,S,b4,b5)return b1('circle',b3,S,b4,b5)end;local function ba(b3,S)return b1('cross',b3,S)end;local function bb(d)local bc=vec3(d.getWorldPosition())local aX=aV(bc,10^7)local bd=''for R,b3 in pairs(aX)do bd=bd..b9(b3,"#cc8899",R)end;return bd end;local function be(d)local bc=vec3(d.getWorldPosition())local w=require('atlas')local bd=''for U,V in pairs(w[0])do if V.type[1]~="Asteroid"then local X=(vec3(V.center)-bc):len()if not((V.type[1]~="Planet"or V.id==6)and X/10^3/200>20)then local bf=math.floor(X/10^3/200).."su"bd=bd..b9(vec3(V.center),"#b6dbe7",V.name[1],bf)end end end;local bg=vec3({13856549.3576,7386341.6738,-258459.8925})local bf=math.floor((bg-bc):len()/10^3/200).."su"bd=bd..b9(bg,"#b6dbe7","Aegis",bf)return bd end;local function bh(as)local S=as.isPvP and"#72ff5b"or"#FF5B72"local bi=as.isPvP and"Safe Zone"or"PVP"return b9(as.PvpBorderPos,S,bi,W(as.PvpBorderDist))end;local function bj(d,X)local bk=vec3(d.getWorldForward()):normalize()local K=vec3(d.getWorldPosition())local bl=K+bk*X;local bm=K-bk*X;local bn='#b6dbe7'local bo='#a11'local bd=ba(bl,bn)..ba(bm,bo)local bp=vec3(d.getWorldVelocity())if bp:len()>1 then local bq=bp:normalize()local br=K+bq*X;local bs=K-bq*X;bd=bd..b9(br,bn)..b9(bs,bo)end;return bd end;local function bt()local bd=''for R,bu in pairs(L)do local K,S=vec3(bu[1]),bu[2]local X=(K-vec3(d.getWorldPosition())):len()bd=bd..b1('box',K,S,R,W(X))end;return bd end;local function bv(as)local bd=''bd=bd..be(d)bd=bd..bh(as)bd=bd..b9(as.closestPipe.point,'#b6dbe7','PIPE',W(as.closestPipe.dist))bd=bd..bt(d)return bd end;local function bw(bx,by,bz,bA)local bB='-'bA=bA or'█'local bC=math.floor(math.min(math.abs(math.max(by-1,0)),1)*bx+0.5)local bD=math.floor(math.min(math.abs(by),1)*bx+0.5)local bE;if by>=0 then bE='[</a><a class="'..(bz or'')..'">'..string.rep(bA,bD-bC)..'</a><a class="red">'..string.rep(bA,bC)..'</a><a>'..string.rep(bB,bx-bD)..']'elseif by<0 then bE='['..string.rep(bB,bx-bD)..'</a><a class="red">'..string.rep(bA,bD).."</a><a>]"else bE='[</a><a class="red">'..string.rep('X',bx).."</a><a>]"end;return bE end;local function bF()local bG=d.getMass()local bH=0;local bI=d.getPlayersOnBoard()local bJ=d.getPlayersOnBoardInVRStation()local bK=d.getDockedConstructs()for U,bL in ipairs(bI)do bH=bH+d.getBoardedPlayerMass(bL)end;for U,bL in ipairs(bJ)do bH=bH+d.getBoardedInVRStationAvatarMass(bL)end;for U,bL in ipairs(bK)do bG=bG+d.getDockedConstructMass(bL)end;bG=bG+math.max(0,bH-20000)return bG end;local function bM(bN)local bO=bN;while true do bO,k=string.gsub(bO,"^(-?%d+)(%d%d%d)",'%1,%2')if k==0 then break end end;return bO end;local function bP(bQ)bQ=bQ*3.6;return bM(math.floor(bQ))..' km/h'end;local function bR(bS)return string.format("%02d",math.floor(bS//60))..':'..string.format("%02d",math.floor(bS%60))end;local function bT(bS)if bS==-1 then return'ERR'elseif bS<60 then return math.floor(bS)..'s'elseif bS<60*60 then return math.floor(bS/60)..'m'elseif bS<60*60*24 then return math.floor(bS/(60*60))..'h'else return'1d+'end end;local function bU(bV)if bV<1000 then return math.floor(bV)elseif bV<1000*10 then return string.format("%.2fk",bV/1000)elseif bV<1000*100 then return string.format("%.1fk",bV/1000)elseif bV<1000*1000*10 then return string.format("%.2fm",bV/1000000)elseif bV<1000*200*100 then return string.format("%.1fm",bV/1000000)else return math.ceil(bV/1000000)..'m'end end;local function bW(bX)if bX<10 then return string.format("%.2fkg",bX)elseif bX<10^3 then return string.format("%.1fkg",bX)elseif bX<10^4 then return string.format("%.2ft",bX/10^3)elseif bX<10^5 then return string.format("%.1ft",bX/10^3)elseif bX<10^6 then return string.format("%.0ft",bX/10^3)elseif bX<10^7 then return string.format("%.2fkt",bX/10^6)elseif bX<10^8 then return string.format("%.1fkt",bX/10^6)else return string.format("%.0fkt",bX/10^6)end end;local function bY(bZ,b_)local by={}for ak=1,#bZ do by[ak]=bZ[ak]/b_ end;return by end;local function c0()if curOrbit[2]>0 and curOrbit[2]<1000*50 then return b1('triangle',curOrbit[1],"#b6dbe7",W(curOrbit[2]),bR(curOrbit[5]))else return''end end;local function c1()return[[
                <style>
                .main-outline {
                   position: absolute;
                   top: 67vh;
                   left: 28vw;
                   font-size: 0.9em;
                }
                </style>
                <div class="ui main-outline"><a>
                                                   _______________WT_HUD_v0.7.0.beta7__________
                                                  /                                            \
                      ___________________________/                                              \___________________________
                     /                          /                                                \                          \
                    /                          /                                                  \                          \
                   /                          /____________________________________________________\                          \
                  /                          |                                                      |                          \
                 /                           |                                                      |                           \
                /____________________________|                                                      |                            \
                |                            |                                                      |                            |
                |                            |                                                      |                            |
                |                            |                                                      |                            |
                |                            |                                                      |                            |
                |                            |                                                      |                            |
                |____________________________|______________________________________________________|____________________________|
                </a></div>
                ]]end;local function c2()local c3=string.format("%.1fg",vec3(d.getWorldAcceleration()):len()/9.80665)local c4=vec3(b.getEngineThrust('longitudinal')):len()local c5;local c6;local bZ=d.getMaxThrustAlongAxis('longitudinal',d.getForward())if b.getAtmosphereDensity()>0.1 then c5=d.getFrictionBurnSpeed()c6=bZ[1]elseif b.getAtmosphereDensity()>0 then c5=d.getFrictionBurnSpeed()c6=bZ[1]+bZ[3]else c5=d.getMaxSpeed()c6=bZ[3]end;local c7=c6>0 and c4/c6 or 0;local c8=a_(c7*100)local c9=vec3(d.getWorldVelocity()):len()local ca=c9/c5;local cb=-1;if db_1~=nil and db_1.hasKey('targetSpeed')then cb=db_1.getIntValue('targetSpeed')end;local cc=(cb or 0)/c5;local cd;if cb~=-1 then local ce=bw(20,cc)local cf=string.format("%-14s",bP(cb))cd='target  '..ce..' '..cf else cd=string.rep(' ',48)end;local cg=bw(20,ca)..' '..string.format("%-14s",bP(c9))local ch;if b.getControlMode()==0 then local ci=b.getThrottle()/100;local cj=a_(ci*100)ch='throttle '..bw(20,ci)..' '..cj..'%'else local ck=b.getThrottle()/100/3.6;local cl=ck/c5;ch='  cruise '..bw(20,cl)..' '..bP(ck)end;return[[
                <style>
                .text-1 {
                   position: absolute;
                   top: 69.3vh;
                   left: 43vw;
                   font-size: 0.9em;
                }
                </style>
                <div class="ui text-1"><a> 
                 ]]..cd..[[ 
                  speed  ]]..cg..[[ 
                ]]..ch..[[ 
                 thrust  ]]..bw(20,c7)..' '..c8 ..'% ('..c3 ..[[) 
                </a></div>
                ]]end;local function cm()local cn={}local co=1;local function cp(cq,ar,bz)local cr=cq and'■'or'-'local cs=bz==nil and'['..cr..']'or'[</a><a class="'..bz..'">'..cr..'</a><a>]'cn[co]=cs..' '..ar;co=co+1 end;cp(b.getControlMode()==1,'|A:R| cruise')local ct=nil;local cu='|CTR| brake'local cv=brakeInput>0;if brakeInput==2 or brakeInput==1 and brakeButtonHold~=1 then ct='red'cu=cu..' </a><a class="red">LOCKED</a><a>'elseif brakeInput==1 then ct='yellow'end;cp(cv,cu,ct)local cw=dampingOff==1 and'yellow'or nil;local cx='|A:2| '..(dampingOff==1 and'</a><a class="yellow">no damping</a><a>'or'no damping')cp(dampingOff==1,cx,cw)if showAtmoRelatedButtons then cp(autoLevel==1,'|A:3| auto-level')cp(altitudeHold~=nil,altitudeHold==nil and'|A:4| altitude hold'or'|A:4| holding: '..W(altitudeHold))cp(burnLimiter,'|A:6| burn limiter')end;cp(showARCompass,'|A:5| AR marks')if g~=nil and showShieldRelatedButtons then cp(h.getAutoRes(),'|A:7| auto resists')cp(g.isActive(),'|AS8| shield')cp(g.isVenting(),'|A:9| vent',g.isVenting()and'yellow'or nil)end;cp(landingMode,'| G | landing mode',landingMode and'red'or nil)cp(groundStabilization,'|S:G| hover'..(groundStabilization and': '..W(b.getSurfaceEngineAltitudeStabilization())or''))local cy=table.concat(cn,"\n")return[[
                <style>
                .text-2 {
                   position: absolute;
                   top: 73.5vh;
                   left: 64vw;
                   font-size: 0.8em;
                }
                </style>
                <div class="ui text-2"><a>]]..cy..[[</a></div>
                ]]end;local function cz(as)local cA=vec3(d.getWorldVelocity())local cB=vec3(e.getWorldGravity())local cC=cA:project_on(cB)local cD=math.floor(cC:len())if cC:dot(cB)>0 then cD=-cD end;local cE=d.getMaxBrake()local cF=bF()local c9=cA:len()local cG;if cE~=0 then cG=c9^2/(cE/cF)/2 else cG=0 end;local cH=c9~=0 and cG/c9*2 or 0;local cI=bW(cF)local cJ=string.format('%-6s',W(cG))local cK=bR(cH)if b.getAtmosphereDensity()==0 then local c6=d.getMaxThrustAlongAxis('space_engine',d.getForward())[3]local cL=c9^2/((cE+c6)/cF)/2;local cM=c9~=0 and cL/c9*2 or 0;cJ=cJ..' '..string.format('%-8s','('..W(cL)..')')cK=cK..'  ('..bR(cM)..')'else cJ='   '..cJ;cK='   '..cK end;local cN;if e.getAltitude()~=0 and as.closestBody.body.atmosphereThickness>0 then cN='burn speed: '..bP(d.getFrictionBurnSpeed())else cN='max speed:  '..bP(d.getMaxSpeed())end;return[[
                <style>
                .text-3 {
                   position: absolute;
                   top: 72.5vh;
                   left: 31vw;
                   font-size: 0.77em;
                }
                </style>
                <div class="ui text-3"><a>
                vert speed: ]]..cD..[[ m/s
                mass:       ]]..cI..[[ 
                ]]..cN..[[ 
                br dist: ]]..cJ..[[ 
                br time: ]]..cK..[[ 
                </a></div>
                ]]end;local function cO()local function cP(cQ)local cR=cQ~=nil and json.decode(cQ.getWidgetData())or{}local cS=(cR.percentage~=nil and cR.percentage or 0)/100;local cT=a_(cS*100)local cU=cR.timeLeft~=nil and(cR.timeLeft=='n/a'and-1 or cR.timeLeft)or-1;local cV=cU>=0 and bT(cU)or tostring(cT)..'%'return bw(10,cS)..' '..cV end;local cW={}if j~=nil then cW[#cW+1]='atmo   '..cP(j)end;if l~=nil then cW[#cW+1]='space  '..cP(l)end;if m~=nil then cW[#cW+1]='rocket '..cP(m)end;local cX=table.concat(cW,"\n")return[[
                <style>
                .text-4 {
                   position: absolute;
                   top: 82vh;
                   left: 29vw;
                   font-size: 0.9em;
                }
                </style>
                <div class="ui text-4"><a>
                FUEL
                ]]..cX..[[
                </a></div>
                ]]end;local cY=""for ak=90,10,-10 do cY=cY..[[------- ]]..tostring(ak)..[[              ]]..tostring(ak)..[[ -------

                        --              --

                ]]end;cY=cY.."-------- 0              0 --------"for ak=-10,-90,-10 do cY=cY..[[ 

                        --              --

                ------ ]]..tostring(ak)..[[              ]]..tostring(ak)..[[ ------]]end;local function cZ()local c_=t or 0;local d0=s or 0;local d1=tostring((-c_+90)/180*100)return[[
                <style>
                .horizon-container {
                   position: absolute;
                   top: 77.5vh;
                   left: 41.25vw;
                   width: 21vw;
                   height: 13vh;
                   display: flex;
                   justify-content: center;
                   overflow: hidden;
                }
                .horizon {
                   font-size: 0.8em;
                   position: absolute;
                   top: 50%;
                   transform-origin: 50% ]]..d1 ..[[%;
                   transform: translate(0, -]]..d1 ..[[%) rotate(]]..tostring(-d0)..[[deg);
                }
                .horizon-center {
                   font-size: 0.8em;
                   position: absolute;
                   top: 50%;
                   transform: translate(0, -50%);
                }
                </style>
                <div class="horizon-container">
                <div class="ui horizon-center"><a>\___   ___/
                /         \
                </a></div>
                <div class="ui horizon"><a>]]..cY..[[
                </a></div></div>
                ]]end;local function d2(aX)local b0=10;local d3={}local d4={' ','▄','█'}for U,d5 in ipairs(aX)do local d6={}local d7=math.floor(d5*b0)for U=1,d7 do table.insert(d6,d4[#d4])end;if d7<b0 then table.insert(d6,d4[math.floor(d5*b0%1*(#d4-1)+0.5)+1])end;for U=1,b0-d7+1 do table.insert(d6,d4[1])end;table.insert(d3,d6)end;local d8={}for ak=b0,1,-1 do local d6=''for al=1,#aX do d6=d6 ..d3[al][ak]end;table.insert(d8,d6)end;return d8 end;local function d9(d5)local d6={'','','','','','','','','',''}local da=11-(math.floor(d5*9+0.5)+1)d6[da]=math.floor(d5*100+0.5)..'%'return d6 end;local function db(dc,dd)local d5={}for ak=1,#dc,math.floor(#dc/20)do table.insert(d5,dc[ak])end;d5[#d5]=dd;local de=d2(d5)local df=d9(dd)return de,df end;local function dg(bQ)bQ=bQ or 5;local dh={'|','/','|','\\'}local da=math.floor(a.getUtcTime()*bQ%#dh)+1;return dh[da]end;local function di()local dj=a.getUtcTime()local dk=g.getShieldHitpoints()local dl=g.getMaxShieldHitpoints()local dm=dk/dl;local dn=a_(dm*100)local dp=h.getShieldHistory()local dq=g.isVenting()local dr=''if dq then dr='yellow'elseif not g.isActive()then dr='red'end;local ds=''if dm<0.5 then ds='yellow'elseif dm<0.2 then ds='red'end;shieldStatusStr=g.isActive()and' ONLINE'or'OFFLINE'local ae,df=db(dp,dm)for ak=1,#ae do ae[ak]='</a><a class="'..ds..'">'..ae[ak]..'</a><a>'end;return[[
                <style>
                .shield-panel {
                    position: absolute;
                    top: 77vh;
                    left: 39.5vw;
                    font-size: 0.65em;
                }
                </style>
                <div class="ui shield-panel"><a>
                  ]]..string.format('%20s',bU(dk))..[[ / ]]..string.format('%-21s',bU(dl))..[[ 
                     </a><a class="]]..dr..[[">SHIELD</a><a> |]]..ae[1]..[[| ]]..df[1]..[[        
                    </a><a class="]]..dr..[[">]]..shieldStatusStr..[[</a><a> |]]..ae[2]..[[| ]]..df[2]..[[ 
                            |]]..ae[3]..[[| ]]..df[3]..[[ 
                            |]]..ae[4]..[[| ]]..df[4]..[[ 
                            |]]..ae[5]..[[| ]]..df[5]..[[ 
                            |]]..ae[6]..[[| ]]..df[6]..[[ 
                            |]]..ae[7]..[[| ]]..df[7]..[[ 
                            |]]..ae[8]..[[| ]]..df[8]..[[ 
                            |]]..ae[9]..[[| ]]..df[9]..[[ 
                            |]]..ae[10]..[[| ]]..df[10]..[[           
                </a></div>]]end;local function dt()local du=e.getMaxCoreStress()-e.getCoreStress()local dv=e.getMaxCoreStress()local dw=dv>0 and du/dv or 0;local dx=a_(dw*100)local dy=''if dw<0.5 then dy='yellow'elseif dw<0.2 then dy='red'end;local dz=bw(20,dw,dy)local dA=string.format('%-5s',dx..'%')local dq=g.isVenting()local dB=bY(g.getResistances(),g.getResistancesPool())local dC=g.getResistancesCooldown()local dD=g.getResistancesMaxCooldown()local dE=dC/dD;local dF=g.getVentingCooldown()local dG=g.getVentingMaxCooldown()local dH=dF/dG;local dI=h.getStressRatio()local dJ=h.getAutoRes()local dK={}for ak,a3 in ipairs(dB)do dK[ak]=bw(12,a3,'blue')end;local dL={}for ak,a3 in ipairs(dI)do dL[ak]=bw(12,a3,'red')end;local dM=dJ and''or'yellow'local dN='</a><a class="'..dM..'">'..h.getAutoResModeStr()..'</a><a>'local dO=bw(16,dE)local dP=string.format('%-11s',dC==0 and'READY'or bR(dC))local dQ=dq and bw(16,1,'yellow',dg())or bw(16,dH)local dR=string.format('%-11s',dq and'IN PROGRESS'or(dF==0 and'READY'or bR(dF)))return[[
                <style>
                .res-panel {
                    position: absolute;
                    top: 77vh;
                    left: 51vw;
                    font-size: 0.55em;
                }
                </style>
                <div class="ui res-panel"><a>   
                  ]]..string.format('%20s',bU(du))..[[ / ]]..string.format('%-21s',bU(dv))..[[  
                        CCS ]]..dz..[[ ]]..string.format('%-11s',bU(dx)..'%')..[[  
                                                                        
                                 ]]..dK[2]..[[ 
                                 ]]..dL[2]..[[ 
                                       EM
                    ]]..dK[1]..[[  AM    KI  ]]..dK[3]..[[ 
                    ]]..dL[1]..[[     TH     ]]..dL[3]..[[ 
                                 ]]..dK[4]..[[ 
                                 ]]..dL[4]..[[ 
                    AUTO: ]]..dN..[[ 
                           RES ]]..dO..[[ ]]..dP..[[ 
                    |A:9| VENT ]]..dQ..[[ ]]..dR..[[ 
                </a></div>]]end;local function dS(as)local function dT(R)return R:gsub("Asteroid ","A"):gsub("Moon ","M"):sub(1,11)end;local bi=as.isPvP and'SAFE ZONE'or' PVP ZONE'return[[
                <style>
                .position-panel {
                    position: absolute;
                    top: 20vh;
                    left: 87vw;
                    font-size: 0.9em;
                }
                </style>
                <div class="ui position-panel"><a>
                 ___                ___
                |                      |
                |  ]]..bi..[[  ]]..string.format('%7s',W(as.PvpBorderDist))..[[  |

                  ]]..string.format('%11s',dT(as.closestBody.body.name[1]))..[[  ]]..string.format('%6s',W(as.closestBody.dist))..[[ 
                         atmo: ]]..string.format('%6s',W(as.closestBody.body.atmosphereThickness))..[[ 
                      gravity:  ]]..string.format('%.2fg',as.closestBody.body.gravity/9.80665)..[[ 
                  avg surface: ]]..string.format('%6s',W(as.closestBody.body.surfaceAverageAltitude))..[[ 
                  max surface: ]]..string.format('%6s',W(as.closestBody.body.surfaceMaxAltitude))..[[ 
                 
                 ]]..string.format('%11s',dT(as.closestPipe.body1.name[1]))..[[-]]..string.format('%-11s',dT(as.closestPipe.body2.name[1]))..[[ 
                |  PIPE        ]]..string.format('%7s',W(as.closestPipe.dist))..[[ |
                |___                ___|
                </a></div>
                ]]end;function n.onFlush()local function dU(dV,dW,dX)local dY=dV:cross(dX):normalize_inplace()local dZ=math.acos(utils.clamp(dY:dot(-dW),-1,1))*constants.rad2deg;if dY:cross(-dW):dot(dX)<0 then dZ=-dZ end;return dZ end;local d_=vec3(e.getWorldVertical())local e0=vec3(d.getWorldOrientationForward())local e1=vec3(d.getWorldOrientationUp())local e2=vec3(d.getWorldOrientationRight())local e3=getRoll(d_,e0,e2)s=e3 or 0;local e4=s/180*math.pi;local e5=math.cos(e4)local e6=math.sin(e4)local e7=dU(d_,e0,e2*e5+e1*e6)t=utils.clamp(e7,-90,90)local e8=2;local e9=100/3.6;e8=math.max(e8,0.01)local ea=pitchInput+a.getControlDeviceForwardInput()local eb=rollInput+a.getControlDeviceYawInput()local ec=yawInput-a.getControlDeviceLeftRightInput()local ed=brakeInput;local d_=vec3(e.getWorldVertical())local cB=vec3(e.getWorldGravity())local bc=vec3(d.getWorldPosition())local ee=vec3(d.getWorldOrientationUp())local ef=vec3(d.getWorldOrientationForward()):normalize()local eg=vec3(d.getWorldOrientationRight())local cA=vec3(d.getWorldVelocity())local eh=cA:normalize()local c9=cA:len()local e3=getRoll(d_,ef,eg)local ei=math.abs(e3)local ej=utils.sign(e3)local cE=d.getMaxBrake()local cF=bF()u=Y(vec3(d.getWorldPosition()))curOrbit=at(bc,cA,u.closestBody.body)verticalSpeed=cA:project_on(cB):len()if cB:dot(cA)>0 then verticalSpeed=-verticalSpeed end;local ek=vec3(d.getWorldAngularVelocity())local el;local em=b.getAtmosphereDensity()local en=burnLimiterSpeed/3.6;if en==0 then en=d.getFrictionBurnSpeed()end;local eo=0;if altitudeHold~=nil then local ep=100;local eq=30;local er=e.getAltitude()-altitudeHold;local es=utils.clamp(er/100,-1,1)local et=-ep*es;local eu=et-verticalSpeed;local ev=utils.clamp(eu/ep,-1,1)f.axisCommandManager:setThrottleCommand(axisCommandId.vertical,ev*100)a.print(vec3(b.getEngineThrust('airfoil')):len()/cF/9.81)local c4=vec3(b.getEngineThrust('longitudinal')):len()local ew=c4/cF;local ex=5*ev;if ew>0 then eo=utils.clamp(math.asin(ex/ew)*constants.rad2deg,-eq,eq)end elseif landingMode and not manualVerticalInput then local et=-1;local eu=et-verticalSpeed;if eu>10 then ed=1 end;local ev=utils.clamp(eu/100,-1,1)f.axisCommandManager:setThrottleCommand(axisCommandId.vertical,ev*100)end;local ey=30;if autoLevel==1 and ea==0 and eb==0 and s~=0 and t~=eo then eb=utils.clamp(-s,-ey,ey)/ey;ea=utils.clamp(-t+eo,-ey,ey)/ey;if math.abs(s)>90 then ea=-ea end;el=ea*eg+eb*ef+ec*ee elseif dampingOff==1 and ea==0 and eb==0 and ec==0 then el=ek else el=(ea*eg+eb*ef+ec*ee):normalize()*d.getMaxAngularSpeed()end;local ez=1;local eA=0;local eB=1;local eC=e8*(el-ek)local eD=vec3(d.getWorldAirFrictionAngularAcceleration())eC=eC-eD;local eE=airfoilTorque and'airfoil'or''f:setEngineTorqueCommand('torque',eC,ez,eE,'','',eB)local eF=''local eG=vec3()local eH=false;local eI='thrust analog longitudinal'local eJ=f.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if eJ==axisCommandType.byThrottle then local eK=f.axisCommandManager:composeAxisAccelerationFromThrottle(eI,axisCommandId.longitudinal)if burnLimiter then local eL=(vec3(u.closestBody.body.center)-bc):normalize()local eM=cA:project_on(eL):len()local eN=eL:dot(ef)>0;local eO=eL:dot(eh)>0;if eO then eM=-eM end;local eP=u.closestBody.body.atmosphereThickness>0 and eM<0 and curOrbit[2]<u.closestBody.body.atmosphereThickness;if em>0.1 or em>0 and t<0 then local eQ=eh:dot(ef)>0;if c9>en then if eQ then eK=vec3()end;ed=1 elseif c9>en-e9 then local eR=vec3(d.getWorldAirFrictionAcceleration())local eS=(eR+cB:project_on(eh)):len()local eT=eS/ef:project_on(eh):len()local eU=(en-c9-1/3.6)/e9;if eU<0 then eU=0 end;eT=eT+20*eU;if eQ and eK:len()>eT then eK=eT*ef end end elseif eP and cE>0 then local eV=eh:project_on(eL):len()local eW=u.closestBody.body.GM/u.closestBody.body.atmosphereRadius^2;local eX=cE/cF*eV-eW;if eX<=0 then eX=0.0001 end;local eY=en*eV;local eZ=(eM^2-eY^2)/(2*eX)local e_=u.closestBody.dist-u.closestBody.body.atmosphereRadius;if-eM>eY and eZ>=e_ then if eN then eK=vec3()end;ed=1 end end end;f:setEngineForceCommand(eI,eK,ez)elseif eJ==axisCommandType.byTargetSpeed then local eK=f.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)eF=eF..' , '..eI;eG=eG+eK;if f.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or f.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-f.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then eH=true end end;local f0=-ed*cE*eh;f:setEngineForceCommand('brake',f0)local f1='thrust analog lateral'local f2=f.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if f2==axisCommandType.byThrottle then local f3=f.axisCommandManager:composeAxisAccelerationFromThrottle(f1,axisCommandId.lateral)f:setEngineForceCommand(f1,f3,ez)elseif f2==axisCommandType.byTargetSpeed then local f4=f.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)eF=eF..' , '..f1;eG=eG+f4 end;local f5='thrust analog vertical'local f6=f.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if f6==axisCommandType.byThrottle then local f7=f.axisCommandManager:composeAxisAccelerationFromThrottle(f5,axisCommandId.vertical)f:setEngineForceCommand(f5,f7,ez,'airfoil','ground','',eB)elseif f6==axisCommandType.byTargetSpeed then local f8=f.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)eF=eF..' , '..f5;eG=eG+f8 end;if eG:len()>constants.epsilon then if brakeInput~=0 or eH or math.abs(eh:dot(ef))<0.95 then eF=eF..', brake'end;f:setEngineForceCommand(eF,eG,eA,'','','',eB)end;f:setBoosterCommand('rocket_engine')if d.isWarping()then brakeInput=1 end end;local function f9()local fa=showARCompass and bv(u)..dS(u)..c0()or''local bd=r..fa..bj(d,10^7)..c2()..cm()..cz(u)..cO()if showGuiOutline then bd=bd..c1()end;local cB=vec3(e.getWorldGravity()):len()if e.getAltitude()~=0 or g==nil then bd=bd..cZ()else bd=bd..di()..dt()end;return bd end;local function fb()a.setScreen(f9())end;function n.onUpdate()fb()end;return n end
                wtPilotHud = PilotHUDClass(system, unit, library, construct, core, Nav, shield, wtShield, db, atmofueltank_1, spacefueltank_1, rocketfueltank_1)
    
        onTimer:
            args: ["wtShieldTick"]
            lua: |
                wtShield.onTick()
    system:
        onUpdate:
            lua: |
                Nav:update()
                wtPilotHud.onUpdate()
                wtMonitor.onUpdate()
        onFlush:
            lua: |
                local ok, msg = xpcall(wtPilotHud.onFlush, traceback)
                if not ok then
                  system.print(msg:gsub("\n", "<br>"))
                end
                --wtPilotHud.onFlush()
        actionStart:
            args: [forward]
            lua: pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1
        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: |
                brakeButtonHold = 1
                if brakeToggle then
                    brakeInput = 1 - brakeInput 
                else
                    brakeInput = 1
                end
        actionStop:
            args: [brake]
            lua: |
                brakeButtonHold = 0
                if not brakeToggle then
                    brakeInput = brakeInput - 1
                end
        actionStart:
            args: [gear]
            lua: |
                if lshiftInput then
                    if groundStabilization then
                        groundStabilization = false
                        Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    else
                        groundStabilization = true
                        Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()
                    end
                elseif landingMode then
                    landingMode = false
                    unit.retractLandingGears()
                    if defaultHoverAltitude > 0 then
                        groundStabilization = true
                        Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()
                        Nav.axisCommandManager:setTargetGroundAltitude(defaultHoverAltitude)
                    end
                    Nav.axisCommandManager:resetCommand(axisCommandId.vertical)
                else
                    landingMode = true
                    altitudeHold = nil
                    autoLevel = 0
                    unit.deployLandingGears()
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    groundStabilization = false
                end
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: |
                if unit.getThrottle() == 0 then
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100)
                else
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                end
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, 0.05)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, -0.05)
        actionStart:
            args: [option2]
            lua: |
                dampingOff = 1 - dampingOff
        actionStart:
            args: [option3]
            lua: |
                if altitudeHold == nil then
                    autoLevel = 1 - autoLevel
                end
        actionStart:
            args: [option4]
            lua: |
                local curAlt = core.getAltitude()
                if altitudeHold == nil then
                    altitudeHold = curAlt
                    autoLevel = 1
                else
                    altitudeHold = nil
                    autoLevel = 0
                    Nav.axisCommandManager:resetCommand(axisCommandId.vertical)
                end
        actionStart:
            args: [option5]
            lua: |
                showARCompass = not showARCompass
        actionStart:
            args: [option6]
            lua: |
                burnLimiter = not burnLimiter
        actionStart:
            args: [option7]
            lua: |
                wtShield.toogleAutoRes()
        actionStart:
            args: [option8]
            lua: |
                if lshiftInput then 
                    shield.toggle()
                end
        actionStart:
            args: [option9]
            lua: |
                shield.startVenting()
        actionStart:
            args: [lshift]
            lua: |
                lshiftInput = true
        actionStop:
            args: [lshift]
            lua: |
                lshiftInput = false
                if manualResToApply then 
                    wtShield.manualOverride(manualResToApply)
                    manualResToApply = nil
                end
        actionStart:
            args: [strafeleft]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[1] = manualResToApply[1] + 1
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
                end
        actionStop:
            args: [strafeleft]
            lua: |
                if unit.getAxisCommandValue(1) == -1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
                end
        actionStart:
            args: [up]
            lua: |
                manualVerticalInput = true
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[2] = manualResToApply[2] + 1
                elseif brakeInput == 1 then
                    brakeInput = 2
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
                end
        actionLoop:
            args: [up]
            lua: |
                if altitudeHold ~= nil then
                    altitudeHold = altitudeHold + 10
                end
        actionStop:
            args: [up]
            lua: |
                manualVerticalInput = false
                if unit.getAxisCommandValue(2) == 1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                end
        actionStart:
            args: [straferight]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[3] = manualResToApply[3] + 1
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
                end
        actionStop:
            args: [straferight]
            lua: |
                if unit.getAxisCommandValue(1) == 1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
                end
        actionStart:
            args: [down]
            lua: |
                manualVerticalInput = true
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[4] = manualResToApply[4] + 1
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
                end
        actionLoop:
            args: [down]
            lua: |
                if altitudeHold ~= nil then
                    altitudeHold = altitudeHold - 10
                end
        actionStop:
            args: [down]
            lua: |
                manualVerticalInput = false
                if unit.getAxisCommandValue(2) == -1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                end
        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
        inputText(text):
            lua: |
                wtPilotHud.onText(text)
    shield:
        down():
            lua: |
                wtShield.onDown()
        venting(active, restoredHitpoints):
            lua: |
                wtShield.onVentingEvent(active, restoredHitpoints)
        absorbed(hitpoints, hitpointsRaw):
            lua: |
                wtShield.onAbsorb(hitpoints, hitpointsRaw)
