{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"tick()","filter":{"args":[{"value":"syncData"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"0"},{"code":"system.print(\"Sync Board started\")\nDB = nil\nfueltanks = {}\ntelemeters = {}\nengines = {}\n\nfindConnectedSlots()\nsystem.print(\"Sync Board connected\")\n--DB.setStringValue(\"fueltanks\",\"\")\n--DB.setStringValue(\"telemeters\",\"\")\n--DB.setStringValue(\"vEngines\",\"\")\ntick()\nsystem.print(\"Sync Board initialised\")\nunit.setTimer(\"syncData\",0.1)\nunit.hide()","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"1"},{"code":"----------------------------------------------------------------\n--                    SERIALIZER BY ELIAS                     --\n----------------------------------------------------------------\nlocal concat = table.concat\n\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    if #table == 0 then\n        local hasValue = false\n        for key, value in pairs(table) do\n            hasValue = true\n            local keyType = type(key)\n            if keyType == \"string\" then\n                t[tC] = key .. \"=\"\n            elseif keyType == \"number\" then\n                t[tC] = \"[\" .. key .. \"]=\"\n            elseif keyType == \"boolean\" then\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\n            else\n                t[tC] = \"notsupported=\"\n            end\n            tC = tC + 1\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        if hasValue then\n            tC = tC - 1\n        end\n    else\n        for i = 1, #table do\n            local value = table[i]\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\nfunction serialize(value)\n    local t = {}\n    local check = type(value)\n    \n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n    return concat(t)\nend\n\nfunction deserialize(s)\n  if s == nil then return s end\n\n  local f = load(\"return \" .. s)\n\n  if f ~= nil then return f() end\n  system.print(tostring(s))\n  return nil\nend\n\n-----------------------------------------------\n--     Simple json decode alternative by J   -- \n-----------------------------------------------\nlocal unicode = {\n   {'\\\\u00e0' ,'à'},\n   {'\\\\u00e1' ,'á'},\n   {'\\\\u00e2' ,'â'},\n   {'\\\\u00e3' ,'ã'},\n   {'\\\\u00e4' ,'ä'},\n   {'\\\\u00e5' ,'å'},\n   {'\\\\u00e6' ,'æ'},\n   {'\\\\u00e7' ,'ç'},\n   {'\\\\u00e8' ,'è'},\n   {'\\\\u00e9' ,'é'},\n   {'\\\\u00ea' ,'ê'},\n   {'\\\\u00eb' ,'ë'},\n   {'\\\\u00ec' ,'ì'},\n   {'\\\\u00ed' ,'í'},\n   {'\\\\u00ee' ,'î'},\n   {'\\\\u00ef' ,'ï'},\n   {'\\\\u00f0' ,'ð'},\n   {'\\\\u00f1' ,'ñ'},\n   {'\\\\u00f2' ,'ò'},\n   {'\\\\u00f3' ,'ó'},\n   {'\\\\u00f4' ,'ô'},\n   {'\\\\u00f5' ,'õ'},\n   {'\\\\u00f6' ,'ö'},\n   {'\\\\u00f8' ,'ø'},\n   {'\\\\u00f9' ,'ù'},\n   {'\\\\u00fa' ,'ú'},\n   {'\\\\u00fb' ,'û'},\n   {'\\\\u00fc' ,'ü'},\n   {'\\\\u00fd' ,'ý'},\n   {'\\\\u00ff' ,'ÿ'},\n   {'\\\\u00df' ,'ß'}\n}\n\nfunction toboolean(str)\n    local bool = nil\n    if str == \"true\" then\n        bool = true\n    elseif str == \"false\" then\n        bool = false\n    end\n    return bool\nend\n\nfunction uniDecode(str)\n    for k, v in pairs(unicode) do\n        str = str:gsub(v[1], v[2])\n    end\n    return str\nend\n\nfunction decodedInput(encodedInput)\n    local nStr = string.gsub(encodedInput, \"%\\\\u(%x%x%x%x)\", function(a)return utf8.char(tonumber(a,16))end)\n    return nStr\nend\n\n--function dataDecode(String) --!!!doesnt work for API returning tables!!! (strings / numbers / booleans only; example: core.getData()/fuel_tank.getData())\n--    local r1 = {}\n--    local r2 = {}\n--    local rf = {}\n--    local s = string.sub(String,2,-3)\n--    s = s:gsub('%\\\"', \"\")\n--    for match in (s..\",\"):gmatch(\"(.-),\") do\n--        r1[#r1+1] = decodedInput(match)\n--    end\n--    for i , v in ipairs(r1) do\n--        for match in (v..\":\"):gmatch(\"(.-):\") do\n--            r2[#r2+1] = decodedInput(match)\n--        end\n--    end\n--    for i , v in ipairs(r2) do\n--        if (i % 2 ~= 0) then\n--            if tonumber(r2[i+1])~= nil then\n--                rf[v] = tonumber(r2[i+1])\n--            elseif r2[i+1] == \"true\" or r2[i+1] == \"false\" then\n--                rf[v] = toboolean(r2[i+1])\n--           else\n--                rf[v] = r2[i+1]\n--            end\n--        end\n--    end\n--    return rf\n--end\n\nfunction dataDecode(string)\n    string = decodedInput(string)\n    local replaced = string:gsub('[[]', '{'):gsub('[]]', '}'):gsub('\"(%w+)\":', '[\"%1\"]=')\n    return load('return ' .. replaced)()\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"2"},{"code":"function findConnectedSlots()\n    for slotName in pairs(unit) do\n        \n        if type(unit[slotName])=='table' and unit[slotName].getClass ~= nil and slotName~='system' and slotName~='library' and slotName~='unit' and slotName~='export' then\n            system.print(unit[slotName].getElementClass())\n            if unit[slotName].getElementClass() == \"DataBankUnit\" then\n                DB = unit[slotName]\n                system.print(\"Databank found\")\n            end\n            if unit[slotName].getElementClass() == \"AtmoFuelContainer\" or unit[slotName].getElementClass() == \"SpaceFuelContainer\" or unit[slotName].getElementClass() == \"RocketFuelContainer\" then\n                fueltanks[#fueltanks+1] = unit[slotName]\n                system.print(\"Fuel Tank found\")\n            end\n            if unit[slotName].getElementClass() == \"TelemeterUnit\" then\n                telemeters[#telemeters+1] = unit[slotName]\n                system.print(\"Telemeter found\")\n            end\n            if string.sub(unit[slotName].getElementClass(),1,11) == \"SpaceEngine\" then\n               engines[#engines+1] = unit[slotName]\n               system.print(\"Engine found\")\n            end\n        end\n    end\n    if not DB then system.print(\"No Databank found, synchronisation is compromised!\") end\nend\n  --  engine_unit\nfunction table.index(t,val)\n    for i,v in ipairs(t) do\n        if v == val then \n            return i\n        end\n    end\n    return nil\nend\n\nfunction tick()\n    if #fueltanks ~= 0 and DB then\n        local synchronisedData = {}\n        if DB.getStringValue(\"fueltanks\") ~= \"\" and  DB.getStringValue(\"fueltanks\") ~= nil and deserialize(DB.getStringValue(\"fueltanks\")) ~= nil then\n            synchronisedData =  deserialize(DB.getStringValue(\"fueltanks\"))\n        end\n        --system.print(\"PB 1 Number of synchronized fuel tanks: \"..#synchronisedData)\n        --system.print(\"PB 1 Number of local fuel tanks: \"..#fueltanks)\n        local ftData = {}\n        local ftNames = {}\n        for i, v in ipairs(fueltanks) do\n            ftData[i] = dataDecode(v.getWidgetData())\n            ftNames[i] = dataDecode(v.getWidgetData()).name\n        end\n        for i, v in ipairs(synchronisedData) do\n            if table.index(ftNames, v.name) == nil then\n                ftData[#ftData+1] = v\n            end\n        end\n        --system.print(\"PB 1 Total number of fuel tanks: \"..#ftData)\n        DB.setStringValue(\"fueltanks\",serialize(ftData))\n    end\n    if #telemeters ~= 0 and DB then\n        local synchronisedData = {}\n        if DB.getStringValue(\"telemeters\") ~= \"\" and DB.getStringValue(\"telemeters\") ~= nil and deserialize(DB.getStringValue(\"telemeters\")) ~= nil then\n            synchronisedData = deserialize(DB.getStringValue(\"telemeters\"))\n        end\n        local telData = {}\n        local telIDs = {}\n      \n        for i, v in ipairs(telemeters) do\n            telData[#telData+1] = {id = v.getId(), distance = v.getDistance()}\n            telIDs[#telIDs+1] = v.getId()\n        end\n        for i, v in ipairs(synchronisedData) do\n            if table.index(telIDs, v.id) == nil then\n               telData[#telData+1] = v\n            end\n        end\n        --system.print(\"Total number of telemeters: \"..#telData)\n        DB.setStringValue(\"telemeters\",serialize(telData)) \n    end\n    if #engines ~= 0 and DB then\n        local synchronisedData = {}\n        if DB.getStringValue(\"vEngines\") ~= \"\" and DB.getStringValue(\"vEngines\") ~= nil and deserialize(DB.getStringValue(\"vEngines\")) ~= nil then\n            synchronisedData = deserialize(DB.getStringValue(\"vEngines\"))\n        end\n        \n        local engData = {}\n        local engIDs = {}\n        for i, v in ipairs(engines) do\n            engData[#engData+1] = {id = v.getId(), thrust = v.getThrust() , maxThrust = v.getMaxThrust()}\n            --system.print(v.getThrust()..\" / \"..v.getMaxThrust())\n            engIDs[#engIDs+1] = v.getId()\n        end\n        for i, v in ipairs(synchronisedData) do\n            if table.index(engIDs, v.id) == nil then\n               engData[#engData+1] = v\n            end\n        end\n        --system.print(serialize(engData))\n        DB.setStringValue(\"vEngines\",serialize(engData))\n        \n    end\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"3"}],"methods":[],"events":[]}